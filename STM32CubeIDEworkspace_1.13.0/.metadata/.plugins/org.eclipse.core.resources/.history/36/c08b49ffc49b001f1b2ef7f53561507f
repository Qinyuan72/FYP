/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdint.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DS_Pin GPIO_PIN_7     // Data input connected to PA7
#define OE_Pin GPIO_PIN_6     // Output Enable connected to PA6
#define SH_CP_Pin GPIO_PIN_5  // Shift register clock connected to PA5
#define DS_Port GPIOA
#define OE_Port GPIOA
#define SH_CP_Port GPIOA
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void shiftOut(uint8_t data);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */
#define SER_PIN GPIO_PIN_7    // Data input connected to PA7
#define SER_PORT GPIOA
#define RCLK_PIN GPIO_PIN_6   // Latch clock connected to PA6
#define RCLK_PORT GPIOA
#define SRCLK_PIN GPIO_PIN_5  // Shift register clock connected to PA5
#define SRCLK_PORT GPIOA

uint8_t currentVal =  0b00000000;

void HC595write()
{
    for(int i=0; i<8; i++)
    {
        if(currentVal & (1<<i))
        {
            HAL_GPIO_WritePin(SER_PORT, SER_PIN, GPIO_PIN_SET);
        }
        else
        {
            HAL_GPIO_WritePin(SER_PORT, SER_PIN, GPIO_PIN_RESET);
        }
        HAL_GPIO_WritePin(SRCLK_PORT, SRCLK_PIN, GPIO_PIN_SET);
        HAL_GPIO_WritePin(SRCLK_PORT, SRCLK_PIN, GPIO_PIN_RESET);
    }
    HAL_GPIO_WritePin(RCLK_PORT, RCLK_PIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(RCLK_PORT, RCLK_PIN, GPIO_PIN_RESET);
}

void HC595writePin(uint8_t pin, uint8_t value)
{
      if (value == 0)
      {
          currentVal &= ~(1 << pin);
      }
      else
      {
          currentVal |= (1 << pin);
      }
      HC595write();
}
/* USER CODE END 0 */

/* USER CODE BEGIN 2 */
// Set all pins "ON"
currentVal =  0b11111111;
HC595write();
HAL_Delay(1000);

// Set selected pins "ON"
// OFF-OFF-ON-ON-ON-ON-OFF-OFF
currentVal =  0b00111100;
HC595write();
HAL_Delay(1000);

// Set all pins "OFF"
currentVal =  0b00000000;
HC595write();
HAL_Delay(350);

HC595writePin(0, 1); // Set pin 0 "ON"
HAL_Delay(350);

HC595writePin(1, 1); // Set pin 1 "ON"
HAL_Delay(350);

HC595writePin(2, 1); // Set pin 2 "ON"
HAL_Delay(350);

HC595writePin(3, 1); // Set pin 3 "ON"
HAL_Delay(350);

HC595writePin(4, 1); // Set pin 4 "ON"
HAL_Delay(350);

HC595writePin(5, 1); // Set pin 5 "ON"
HAL_Delay(350);

HC595writePin(6, 1); // Set pin 6 "ON"
HAL_Delay(350);

HC595writePin(7, 1); // Set pin 7 "ON"
HAL_Delay(350);

HC595writePin(0, 0); // Set pin 0 "OFF"
HAL_Delay(350);

HC595writePin(1, 0); // Set pin 1 "OFF"
HAL_Delay(350);

HC595writePin(2, 0); // Set pin 2 "OFF"
HAL_Delay(350);

HC595writePin(3, 0); // Set pin 3 "OFF"
HAL_Delay(350);

HC595writePin(4, 0); // Set pin 4 "OFF"
HAL_Delay(350);

HC595writePin(5, 0); // Set pin 5 "OFF"
HAL_Delay(350);

HC595writePin(6, 0); // Set pin 6 "OFF"
HAL_Delay(350);

HC595writePin(7, 0); // Set pin 7 "OFF"
HAL_Delay(350);

// Binary counter
for(int counter=0; counter<256; counter++)
{
  currentVal =  counter;
  HC595write();
  HAL_Delay(100);
}
/* USER CODE END 2 */

int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART2_UART_Init();

    while (1)
    {
        shiftOut(0xAA);  // Send test data (binary pattern 10101010)
        latch();         // Latch to display the data
        HAL_Delay(500);  // Wait for 500 ms to observe the pattern on the oscilloscope

        shiftOut(0x55);  // Send alternate test data (binary pattern 01010101)
        latch();         // Latch to display the data
        HAL_Delay(500);  // Wait for 500 ms
    }
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SH_CP_Pin | DS_Pin, GPIO_PIN_RESET);  // Set initial levels for SH_CP and DS

  /*Configure GPIO pins : SH_CP_Pin PA5, DS_Pin PA7 */
  GPIO_InitStruct.Pin = SH_CP_Pin | DS_Pin;  // Only SH_CP and DS needed for data shifting
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
