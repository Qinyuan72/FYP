
74HC595_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005bf4  08005bf4  00006bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c60  08005c60  00007024  2**0
                  CONTENTS
  4 .ARM          00000008  08005c60  08005c60  00006c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c68  08005c68  00007024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c68  08005c68  00006c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c6c  08005c6c  00006c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08005c70  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b4  20000024  08005c94  00007024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019d8  08005c94  000079d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fce  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c91  00000000  00000000  0001b022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001dcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdf  00000000  00000000  0001ed78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b81  00000000  00000000  0001fa57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012981  00000000  00000000  000225d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1754  00000000  00000000  00034f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001266ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004528  00000000  00000000  001266f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0012ac18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000024 	.word	0x20000024
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bdc 	.word	0x08005bdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000028 	.word	0x20000028
 80001cc:	08005bdc 	.word	0x08005bdc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  Main function to initialize RTOS and tasks.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	@ 0x28
 80004c4:	af00      	add	r7, sp, #0
    /* Initialize HAL library */
    HAL_Init();
 80004c6:	f000 fa53 	bl	8000970 <HAL_Init>
    SystemClock_Config();
 80004ca:	f000 f89f 	bl	800060c <SystemClock_Config>
    MX_GPIO_Init();
 80004ce:	f000 f91f 	bl	8000710 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80004d2:	f000 f8ed 	bl	80006b0 <MX_USART2_UART_Init>

    /* Initialize SN74HC595 */
    SN74HC595_Init();
 80004d6:	f000 f823 	bl	8000520 <SN74HC595_Init>

    /* Initialize FreeRTOS */
    osKernelInitialize();
 80004da:	f002 fde3 	bl	80030a4 <osKernelInitialize>

    /* Create the SN74HC595 display task */
    const osThreadAttr_t displayTask_attributes = {
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2224      	movs	r2, #36	@ 0x24
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f005 fb3f 	bl	8005b68 <memset>
 80004ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <main+0x54>)
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004f2:	61bb      	str	r3, [r7, #24]
 80004f4:	2318      	movs	r3, #24
 80004f6:	61fb      	str	r3, [r7, #28]
        .name = "DisplayTask",
        .stack_size = 128 * 4,
        .priority = (osPriority_t) osPriorityNormal,
    };
    displayTaskHandle = osThreadNew(vTaskSN74HC595, NULL, &displayTask_attributes);
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	461a      	mov	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	4806      	ldr	r0, [pc, #24]	@ (8000518 <main+0x58>)
 8000500:	f002 fe1a 	bl	8003138 <osThreadNew>
 8000504:	4603      	mov	r3, r0
 8000506:	4a05      	ldr	r2, [pc, #20]	@ (800051c <main+0x5c>)
 8000508:	6013      	str	r3, [r2, #0]

    /* Start FreeRTOS scheduler */
    osKernelStart();
 800050a:	f002 fdef 	bl	80030ec <osKernelStart>

    /* Infinite loop (we should never reach here) */
    while (1) {}
 800050e:	bf00      	nop
 8000510:	e7fd      	b.n	800050e <main+0x4e>
 8000512:	bf00      	nop
 8000514:	08005bf4 	.word	0x08005bf4
 8000518:	080005bd 	.word	0x080005bd
 800051c:	200000c8 	.word	0x200000c8

08000520 <SN74HC595_Init>:

/**
  * @brief SN74HC595 initialization.
  */
void SN74HC595_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OE_PORT, OE_PIN, GPIO_PIN_SET); // Disable output initially
 8000524:	2201      	movs	r2, #1
 8000526:	2140      	movs	r1, #64	@ 0x40
 8000528:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052c:	f000 fd2c 	bl	8000f88 <HAL_GPIO_WritePin>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <SN74HC595_SendData>:
/**
  * @brief Send data to SN74HC595 shift register.
  * @param data: 8-bit data to be sent
  */
void SN74HC595_SendData(uint8_t data)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
    // Enable output (active low)
    HAL_GPIO_WritePin(OE_PORT, OE_PIN, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2140      	movs	r1, #64	@ 0x40
 8000542:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000546:	f000 fd1f 	bl	8000f88 <HAL_GPIO_WritePin>

    // Shift each bit into the shift register
    for (int i = 0; i < 8; i++)
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	e01c      	b.n	800058a <SN74HC595_SendData+0x56>
    {
        // Set SER pin based on the current bit
        HAL_GPIO_WritePin(SER_PORT, SER_PIN, (data & (1 << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000550:	79fa      	ldrb	r2, [r7, #7]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	fa42 f303 	asr.w	r3, r2, r3
 8000558:	b2db      	uxtb	r3, r3
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	2120      	movs	r1, #32
 8000564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000568:	f000 fd0e 	bl	8000f88 <HAL_GPIO_WritePin>

        // Pulse SRCLK to shift in the bit
        HAL_GPIO_WritePin(SER_PORT, SRCLK_PIN, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2180      	movs	r1, #128	@ 0x80
 8000570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000574:	f000 fd08 	bl	8000f88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SER_PORT, SRCLK_PIN, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2180      	movs	r1, #128	@ 0x80
 800057c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000580:	f000 fd02 	bl	8000f88 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3301      	adds	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b07      	cmp	r3, #7
 800058e:	dddf      	ble.n	8000550 <SN74HC595_SendData+0x1c>
    }

    // Latch the data into the storage register
    HAL_GPIO_WritePin(RCLK_PORT, RCLK_PIN, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2140      	movs	r1, #64	@ 0x40
 8000594:	4808      	ldr	r0, [pc, #32]	@ (80005b8 <SN74HC595_SendData+0x84>)
 8000596:	f000 fcf7 	bl	8000f88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RCLK_PORT, RCLK_PIN, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2140      	movs	r1, #64	@ 0x40
 800059e:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <SN74HC595_SendData+0x84>)
 80005a0:	f000 fcf2 	bl	8000f88 <HAL_GPIO_WritePin>

    // Disable output if required
    HAL_GPIO_WritePin(OE_PORT, OE_PIN, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2140      	movs	r1, #64	@ 0x40
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ac:	f000 fcec 	bl	8000f88 <HAL_GPIO_WritePin>
}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	48000400 	.word	0x48000400

080005bc <vTaskSN74HC595>:
/**
  * @brief  Task to manage the SN74HC595 shift register display.
  * @param  argument: Not used
  */
void vTaskSN74HC595(void *argument)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    uint8_t cnt = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]

    /* Infinite loop to update display */
    for (;;)
    {
        /* Send current count value to 74HC595 */
        SN74HC595_SendData(number[cnt]);
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000604 <vTaskSN74HC595+0x48>)
 80005cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ffae 	bl	8000534 <SN74HC595_SendData>

        /* Increment counter and wrap around after 9 */
        cnt = (cnt + 1) % 10;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <vTaskSN74HC595+0x4c>)
 80005de:	fb83 1302 	smull	r1, r3, r3, r2
 80005e2:	1099      	asrs	r1, r3, #2
 80005e4:	17d3      	asrs	r3, r2, #31
 80005e6:	1ac9      	subs	r1, r1, r3
 80005e8:	460b      	mov	r3, r1
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	440b      	add	r3, r1
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	1ad1      	subs	r1, r2, r3
 80005f2:	460b      	mov	r3, r1
 80005f4:	73fb      	strb	r3, [r7, #15]

        /* Delay for a while (replace HAL_Delay with FreeRTOS delay) */
        vTaskDelay(pdMS_TO_TICKS(500));
 80005f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005fa:	f003 fdb7 	bl	800416c <vTaskDelay>
        SN74HC595_SendData(number[cnt]);
 80005fe:	bf00      	nop
 8000600:	e7e2      	b.n	80005c8 <vTaskSN74HC595+0xc>
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000
 8000608:	66666667 	.word	0x66666667

0800060c <SystemClock_Config>:

/**
  * @brief  Configure the system clock.
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	@ 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 faa4 	bl	8005b68 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000632:	f000 fccf 	bl	8000fd4 <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
    {
        Error_Handler();
 800063c:	f000 f8aa 	bl	8000794 <Error_Handler>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000640:	2310      	movs	r3, #16
 8000642:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800064c:	2360      	movs	r3, #96	@ 0x60
 800064e:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000654:	2301      	movs	r3, #1
 8000656:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 40;
 800065c:	2328      	movs	r3, #40	@ 0x28
 800065e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000660:	2307      	movs	r3, #7
 8000662:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fd05 	bl	8001080 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x74>
    {
        Error_Handler();
 800067c:	f000 f88a 	bl	8000794 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	603b      	str	r3, [r7, #0]
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2303      	movs	r3, #3
 8000686:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	2104      	movs	r1, #4
 8000698:	4618      	mov	r0, r3
 800069a:	f001 f8cd 	bl	8001838 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x9c>
    {
        Error_Handler();
 80006a4:	f000 f876 	bl	8000794 <Error_Handler>
    }
}
 80006a8:	bf00      	nop
 80006aa:	3758      	adds	r7, #88	@ 0x58
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 80006b4:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	@ (800070c <MX_USART2_UART_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006f4:	f001 ff80 	bl	80025f8 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x52>
    {
        Error_Handler();
 80006fe:	f000 f849 	bl	8000794 <Error_Handler>
    }
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000040 	.word	0x20000040
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b19      	ldr	r3, [pc, #100]	@ (800078c <MX_GPIO_Init+0x7c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a18      	ldr	r2, [pc, #96]	@ (800078c <MX_GPIO_Init+0x7c>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_GPIO_Init+0x7c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_GPIO_Init+0x7c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a12      	ldr	r2, [pc, #72]	@ (800078c <MX_GPIO_Init+0x7c>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_GPIO_Init+0x7c>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pins : SER_PIN, SRCLK_PIN, OE_PIN */
    GPIO_InitStruct.Pin = SER_PIN | SRCLK_PIN | OE_PIN;
 8000756:	23e0      	movs	r3, #224	@ 0xe0
 8000758:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SER_PORT, &GPIO_InitStruct);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4619      	mov	r1, r3
 800076c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000770:	f000 fa60 	bl	8000c34 <HAL_GPIO_Init>

    /*Configure GPIO pin : RCLK_PIN */
    GPIO_InitStruct.Pin = RCLK_PIN;
 8000774:	2340      	movs	r3, #64	@ 0x40
 8000776:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(RCLK_PORT, &GPIO_InitStruct);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_GPIO_Init+0x80>)
 8000780:	f000 fa58 	bl	8000c34 <HAL_GPIO_Init>
}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	48000400 	.word	0x48000400

08000794 <Error_Handler>:

/**
  * @brief Error Handler
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
    __disable_irq();
    while (1) {}
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <Error_Handler+0x8>

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <HAL_MspInit+0x4c>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007aa:	4a10      	ldr	r2, [pc, #64]	@ (80007ec <HAL_MspInit+0x4c>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <HAL_MspInit+0x4c>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <HAL_MspInit+0x4c>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c2:	4a0a      	ldr	r2, [pc, #40]	@ (80007ec <HAL_MspInit+0x4c>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <HAL_MspInit+0x4c>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	210f      	movs	r1, #15
 80007da:	f06f 0001 	mvn.w	r0, #1
 80007de:	f000 fa00 	bl	8000be2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0ac      	sub	sp, #176	@ 0xb0
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2288      	movs	r2, #136	@ 0x88
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f005 f9a9 	bl	8005b68 <memset>
  if(huart->Instance==USART2)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a21      	ldr	r2, [pc, #132]	@ (80008a0 <HAL_UART_MspInit+0xb0>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d13b      	bne.n	8000898 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000820:	2302      	movs	r3, #2
 8000822:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000824:	2300      	movs	r3, #0
 8000826:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fa27 	bl	8001c80 <HAL_RCCEx_PeriphCLKConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000838:	f7ff ffac 	bl	8000794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800083c:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <HAL_UART_MspInit+0xb4>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000840:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <HAL_UART_MspInit+0xb4>)
 8000842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000846:	6593      	str	r3, [r2, #88]	@ 0x58
 8000848:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <HAL_UART_MspInit+0xb4>)
 800084a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <HAL_UART_MspInit+0xb4>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000858:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <HAL_UART_MspInit+0xb4>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000860:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <HAL_UART_MspInit+0xb4>)
 8000862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800086c:	230c      	movs	r3, #12
 800086e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000884:	2307      	movs	r3, #7
 8000886:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f000 f9ce 	bl	8000c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000898:	bf00      	nop
 800089a:	37b0      	adds	r7, #176	@ 0xb0
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40004400 	.word	0x40004400
 80008a4:	40021000 	.word	0x40021000

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <NMI_Handler+0x4>

080008b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <MemManage_Handler+0x4>

080008c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <UsageFault_Handler+0x4>

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e2:	f000 f8a1 	bl	8000a28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008e6:	f004 f8c5 	bl	8004a74 <xTaskGetSchedulerState>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d001      	beq.n	80008f4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008f0:	f004 feba 	bl	8005668 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	@ (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000954 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000920:	f7ff ffea 	bl	80008f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480c      	ldr	r0, [pc, #48]	@ (8000958 <LoopForever+0x6>)
  ldr r1, =_edata
 8000926:	490d      	ldr	r1, [pc, #52]	@ (800095c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000928:	4a0d      	ldr	r2, [pc, #52]	@ (8000960 <LoopForever+0xe>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800093c:	4c0a      	ldr	r4, [pc, #40]	@ (8000968 <LoopForever+0x16>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094a:	f005 f915 	bl	8005b78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800094e:	f7ff fdb7 	bl	80004c0 <main>

08000952 <LoopForever>:

LoopForever:
    b LoopForever
 8000952:	e7fe      	b.n	8000952 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000954:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000960:	08005c70 	.word	0x08005c70
  ldr r2, =_sbss
 8000964:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000968:	200019d8 	.word	0x200019d8

0800096c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_2_IRQHandler>
	...

08000970 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <HAL_Init+0x3c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a0b      	ldr	r2, [pc, #44]	@ (80009ac <HAL_Init+0x3c>)
 8000980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000984:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000986:	2003      	movs	r0, #3
 8000988:	f000 f920 	bl	8000bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800098c:	200f      	movs	r0, #15
 800098e:	f000 f80f 	bl	80009b0 <HAL_InitTick>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	e001      	b.n	80009a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800099e:	f7ff feff 	bl	80007a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40022000 	.word	0x40022000

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009bc:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <HAL_InitTick+0x6c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d023      	beq.n	8000a0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009c4:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <HAL_InitTick+0x70>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <HAL_InitTick+0x6c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f91d 	bl	8000c1a <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10f      	bne.n	8000a06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d809      	bhi.n	8000a00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	f000 f8f5 	bl	8000be2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <HAL_InitTick+0x74>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
 80009fe:	e007      	b.n	8000a10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
 8000a04:	e004      	b.n	8000a10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	73fb      	strb	r3, [r7, #15]
 8000a0a:	e001      	b.n	8000a10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000001c 	.word	0x2000001c
 8000a20:	20000014 	.word	0x20000014
 8000a24:	20000018 	.word	0x20000018

08000a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_IncTick+0x20>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_IncTick+0x24>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a04      	ldr	r2, [pc, #16]	@ (8000a4c <HAL_IncTick+0x24>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	2000001c 	.word	0x2000001c
 8000a4c:	200000cc 	.word	0x200000cc

08000a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <HAL_GetTick+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	200000cc 	.word	0x200000cc

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	@ (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	@ (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	@ 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	@ 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b98:	d301      	bcc.n	8000b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00f      	b.n	8000bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <SysTick_Config+0x40>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba6:	210f      	movs	r1, #15
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f7ff ff8e 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <SysTick_Config+0x40>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb6:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <SysTick_Config+0x40>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000e010 	.word	0xe000e010

08000bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff47 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b086      	sub	sp, #24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf4:	f7ff ff5c 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	68b9      	ldr	r1, [r7, #8]
 8000bfe:	6978      	ldr	r0, [r7, #20]
 8000c00:	f7ff ff8e 	bl	8000b20 <NVIC_EncodePriority>
 8000c04:	4602      	mov	r2, r0
 8000c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff5d 	bl	8000acc <__NVIC_SetPriority>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ffb0 	bl	8000b88 <SysTick_Config>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c42:	e17f      	b.n	8000f44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	2101      	movs	r1, #1
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	4013      	ands	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 8171 	beq.w	8000f3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d005      	beq.n	8000c74 <HAL_GPIO_Init+0x40>
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d130      	bne.n	8000cd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000caa:	2201      	movs	r2, #1
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	091b      	lsrs	r3, r3, #4
 8000cc0:	f003 0201 	and.w	r2, r3, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d118      	bne.n	8000d14 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	f003 0201 	and.w	r2, r3, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d017      	beq.n	8000d50 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d123      	bne.n	8000da4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	220f      	movs	r2, #15
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	6939      	ldr	r1, [r7, #16]
 8000da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0203 	and.w	r2, r3, #3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80ac 	beq.w	8000f3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b5f      	ldr	r3, [pc, #380]	@ (8000f64 <HAL_GPIO_Init+0x330>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dea:	4a5e      	ldr	r2, [pc, #376]	@ (8000f64 <HAL_GPIO_Init+0x330>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000df2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f64 <HAL_GPIO_Init+0x330>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dfe:	4a5a      	ldr	r2, [pc, #360]	@ (8000f68 <HAL_GPIO_Init+0x334>)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e28:	d025      	beq.n	8000e76 <HAL_GPIO_Init+0x242>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4f      	ldr	r2, [pc, #316]	@ (8000f6c <HAL_GPIO_Init+0x338>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d01f      	beq.n	8000e72 <HAL_GPIO_Init+0x23e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4e      	ldr	r2, [pc, #312]	@ (8000f70 <HAL_GPIO_Init+0x33c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d019      	beq.n	8000e6e <HAL_GPIO_Init+0x23a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4d      	ldr	r2, [pc, #308]	@ (8000f74 <HAL_GPIO_Init+0x340>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0x236>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4c      	ldr	r2, [pc, #304]	@ (8000f78 <HAL_GPIO_Init+0x344>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00d      	beq.n	8000e66 <HAL_GPIO_Init+0x232>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8000f7c <HAL_GPIO_Init+0x348>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x22e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4a      	ldr	r2, [pc, #296]	@ (8000f80 <HAL_GPIO_Init+0x34c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_GPIO_Init+0x22a>
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	e00c      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e5e:	2307      	movs	r3, #7
 8000e60:	e00a      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e62:	2305      	movs	r3, #5
 8000e64:	e008      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e66:	2304      	movs	r3, #4
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e004      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e76:	2300      	movs	r3, #0
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	f002 0203 	and.w	r2, r2, #3
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	4093      	lsls	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e88:	4937      	ldr	r1, [pc, #220]	@ (8000f68 <HAL_GPIO_Init+0x334>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e96:	4b3b      	ldr	r3, [pc, #236]	@ (8000f84 <HAL_GPIO_Init+0x350>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eba:	4a32      	ldr	r2, [pc, #200]	@ (8000f84 <HAL_GPIO_Init+0x350>)
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ec0:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <HAL_GPIO_Init+0x350>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ee4:	4a27      	ldr	r2, [pc, #156]	@ (8000f84 <HAL_GPIO_Init+0x350>)
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eea:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <HAL_GPIO_Init+0x350>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000f84 <HAL_GPIO_Init+0x350>)
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <HAL_GPIO_Init+0x350>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f38:	4a12      	ldr	r2, [pc, #72]	@ (8000f84 <HAL_GPIO_Init+0x350>)
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f47f ae78 	bne.w	8000c44 <HAL_GPIO_Init+0x10>
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48000c00 	.word	0x48000c00
 8000f78:	48001000 	.word	0x48001000
 8000f7c:	48001400 	.word	0x48001400
 8000f80:	48001800 	.word	0x48001800
 8000f84:	40010400 	.word	0x40010400

08000f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
 8000f94:	4613      	mov	r3, r2
 8000f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f98:	787b      	ldrb	r3, [r7, #1]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fa4:	e002      	b.n	8000fac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fe2:	d130      	bne.n	8001046 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fe4:	4b23      	ldr	r3, [pc, #140]	@ (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ff0:	d038      	beq.n	8001064 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff2:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001000:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001002:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2232      	movs	r2, #50	@ 0x32
 8001008:	fb02 f303 	mul.w	r3, r2, r3
 800100c:	4a1b      	ldr	r2, [pc, #108]	@ (800107c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800100e:	fba2 2303 	umull	r2, r3, r2, r3
 8001012:	0c9b      	lsrs	r3, r3, #18
 8001014:	3301      	adds	r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001018:	e002      	b.n	8001020 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3b01      	subs	r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001020:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800102c:	d102      	bne.n	8001034 <HAL_PWREx_ControlVoltageScaling+0x60>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f2      	bne.n	800101a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001034:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800103c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001040:	d110      	bne.n	8001064 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e00f      	b.n	8001066 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001046:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800104e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001052:	d007      	beq.n	8001064 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001054:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800105c:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001062:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40007000 	.word	0x40007000
 8001078:	20000014 	.word	0x20000014
 800107c:	431bde83 	.word	0x431bde83

08001080 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e3ca      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001092:	4b97      	ldr	r3, [pc, #604]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800109c:	4b94      	ldr	r3, [pc, #592]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 80e4 	beq.w	800127c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d007      	beq.n	80010ca <HAL_RCC_OscConfig+0x4a>
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	2b0c      	cmp	r3, #12
 80010be:	f040 808b 	bne.w	80011d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	f040 8087 	bne.w	80011d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010ca:	4b89      	ldr	r3, [pc, #548]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <HAL_RCC_OscConfig+0x62>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e3a2      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a1a      	ldr	r2, [r3, #32]
 80010e6:	4b82      	ldr	r3, [pc, #520]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d004      	beq.n	80010fc <HAL_RCC_OscConfig+0x7c>
 80010f2:	4b7f      	ldr	r3, [pc, #508]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010fa:	e005      	b.n	8001108 <HAL_RCC_OscConfig+0x88>
 80010fc:	4b7c      	ldr	r3, [pc, #496]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 80010fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001108:	4293      	cmp	r3, r2
 800110a:	d223      	bcs.n	8001154 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fd55 	bl	8001bc0 <RCC_SetFlashLatencyFromMSIRange>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e383      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001120:	4b73      	ldr	r3, [pc, #460]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a72      	ldr	r2, [pc, #456]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001126:	f043 0308 	orr.w	r3, r3, #8
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b70      	ldr	r3, [pc, #448]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	496d      	ldr	r1, [pc, #436]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800113e:	4b6c      	ldr	r3, [pc, #432]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	4968      	ldr	r1, [pc, #416]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 800114e:	4313      	orrs	r3, r2
 8001150:	604b      	str	r3, [r1, #4]
 8001152:	e025      	b.n	80011a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001154:	4b66      	ldr	r3, [pc, #408]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a65      	ldr	r2, [pc, #404]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b63      	ldr	r3, [pc, #396]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	4960      	ldr	r1, [pc, #384]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 800116e:	4313      	orrs	r3, r2
 8001170:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001172:	4b5f      	ldr	r3, [pc, #380]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	495b      	ldr	r1, [pc, #364]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001182:	4313      	orrs	r3, r2
 8001184:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d109      	bne.n	80011a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fd15 	bl	8001bc0 <RCC_SetFlashLatencyFromMSIRange>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e343      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011a0:	f000 fc4a 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b52      	ldr	r3, [pc, #328]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	4950      	ldr	r1, [pc, #320]	@ (80012f4 <HAL_RCC_OscConfig+0x274>)
 80011b2:	5ccb      	ldrb	r3, [r1, r3]
 80011b4:	f003 031f 	and.w	r3, r3, #31
 80011b8:	fa22 f303 	lsr.w	r3, r2, r3
 80011bc:	4a4e      	ldr	r2, [pc, #312]	@ (80012f8 <HAL_RCC_OscConfig+0x278>)
 80011be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011c0:	4b4e      	ldr	r3, [pc, #312]	@ (80012fc <HAL_RCC_OscConfig+0x27c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fbf3 	bl	80009b0 <HAL_InitTick>
 80011ca:	4603      	mov	r3, r0
 80011cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d052      	beq.n	800127a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	e327      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d032      	beq.n	8001246 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011e0:	4b43      	ldr	r3, [pc, #268]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a42      	ldr	r2, [pc, #264]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc30 	bl	8000a50 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011f4:	f7ff fc2c 	bl	8000a50 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e310      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001206:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001212:	4b37      	ldr	r3, [pc, #220]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a36      	ldr	r2, [pc, #216]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b34      	ldr	r3, [pc, #208]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	4931      	ldr	r1, [pc, #196]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001230:	4b2f      	ldr	r3, [pc, #188]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	492c      	ldr	r1, [pc, #176]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
 8001244:	e01a      	b.n	800127c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001246:	4b2a      	ldr	r3, [pc, #168]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a29      	ldr	r2, [pc, #164]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 800124c:	f023 0301 	bic.w	r3, r3, #1
 8001250:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001252:	f7ff fbfd 	bl	8000a50 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800125a:	f7ff fbf9 	bl	8000a50 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e2dd      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800126c:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f0      	bne.n	800125a <HAL_RCC_OscConfig+0x1da>
 8001278:	e000      	b.n	800127c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800127a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d074      	beq.n	8001372 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2b08      	cmp	r3, #8
 800128c:	d005      	beq.n	800129a <HAL_RCC_OscConfig+0x21a>
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2b0c      	cmp	r3, #12
 8001292:	d10e      	bne.n	80012b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d10b      	bne.n	80012b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d064      	beq.n	8001370 <HAL_RCC_OscConfig+0x2f0>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d160      	bne.n	8001370 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e2ba      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ba:	d106      	bne.n	80012ca <HAL_RCC_OscConfig+0x24a>
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0b      	ldr	r2, [pc, #44]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 80012c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e026      	b.n	8001318 <HAL_RCC_OscConfig+0x298>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012d2:	d115      	bne.n	8001300 <HAL_RCC_OscConfig+0x280>
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a05      	ldr	r2, [pc, #20]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 80012da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a02      	ldr	r2, [pc, #8]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 80012e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e014      	b.n	8001318 <HAL_RCC_OscConfig+0x298>
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	08005c18 	.word	0x08005c18
 80012f8:	20000014 	.word	0x20000014
 80012fc:	20000018 	.word	0x20000018
 8001300:	4ba0      	ldr	r3, [pc, #640]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a9f      	ldr	r2, [pc, #636]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b9d      	ldr	r3, [pc, #628]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a9c      	ldr	r2, [pc, #624]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff fb96 	bl	8000a50 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fb92 	bl	8000a50 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	@ 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e276      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133a:	4b92      	ldr	r3, [pc, #584]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0x2a8>
 8001346:	e014      	b.n	8001372 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fb82 	bl	8000a50 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fb7e 	bl	8000a50 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	@ 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e262      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001362:	4b88      	ldr	r3, [pc, #544]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x2d0>
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d060      	beq.n	8001440 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b04      	cmp	r3, #4
 8001382:	d005      	beq.n	8001390 <HAL_RCC_OscConfig+0x310>
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b0c      	cmp	r3, #12
 8001388:	d119      	bne.n	80013be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d116      	bne.n	80013be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001390:	4b7c      	ldr	r3, [pc, #496]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_OscConfig+0x328>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e23f      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b76      	ldr	r3, [pc, #472]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	061b      	lsls	r3, r3, #24
 80013b6:	4973      	ldr	r1, [pc, #460]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013bc:	e040      	b.n	8001440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d023      	beq.n	800140e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d2:	f7ff fb3d 	bl	8000a50 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013da:	f7ff fb39 	bl	8000a50 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e21d      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ec:	4b65      	ldr	r3, [pc, #404]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f8:	4b62      	ldr	r3, [pc, #392]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	061b      	lsls	r3, r3, #24
 8001406:	495f      	ldr	r1, [pc, #380]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
 800140c:	e018      	b.n	8001440 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140e:	4b5d      	ldr	r3, [pc, #372]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a5c      	ldr	r2, [pc, #368]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fb19 	bl	8000a50 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fb15 	bl	8000a50 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1f9      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001434:	4b53      	ldr	r3, [pc, #332]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	2b00      	cmp	r3, #0
 800144a:	d03c      	beq.n	80014c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01c      	beq.n	800148e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001454:	4b4b      	ldr	r3, [pc, #300]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800145a:	4a4a      	ldr	r2, [pc, #296]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff faf4 	bl	8000a50 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff faf0 	bl	8000a50 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e1d4      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800147e:	4b41      	ldr	r3, [pc, #260]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0ef      	beq.n	800146c <HAL_RCC_OscConfig+0x3ec>
 800148c:	e01b      	b.n	80014c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148e:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001494:	4a3b      	ldr	r2, [pc, #236]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149e:	f7ff fad7 	bl	8000a50 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a6:	f7ff fad3 	bl	8000a50 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e1b7      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014b8:	4b32      	ldr	r3, [pc, #200]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 80014ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1ef      	bne.n	80014a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80a6 	beq.w	8001620 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 80014da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10d      	bne.n	8001500 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e4:	4b27      	ldr	r3, [pc, #156]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 80014e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e8:	4a26      	ldr	r2, [pc, #152]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 80014ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f0:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 80014f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014fc:	2301      	movs	r3, #1
 80014fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001500:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <HAL_RCC_OscConfig+0x508>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d118      	bne.n	800153e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800150c:	4b1e      	ldr	r3, [pc, #120]	@ (8001588 <HAL_RCC_OscConfig+0x508>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a1d      	ldr	r2, [pc, #116]	@ (8001588 <HAL_RCC_OscConfig+0x508>)
 8001512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001518:	f7ff fa9a 	bl	8000a50 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001520:	f7ff fa96 	bl	8000a50 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e17a      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_RCC_OscConfig+0x508>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d108      	bne.n	8001558 <HAL_RCC_OscConfig+0x4d8>
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154c:	4a0d      	ldr	r2, [pc, #52]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001556:	e029      	b.n	80015ac <HAL_RCC_OscConfig+0x52c>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b05      	cmp	r3, #5
 800155e:	d115      	bne.n	800158c <HAL_RCC_OscConfig+0x50c>
 8001560:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001566:	4a07      	ldr	r2, [pc, #28]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001570:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001576:	4a03      	ldr	r2, [pc, #12]	@ (8001584 <HAL_RCC_OscConfig+0x504>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001580:	e014      	b.n	80015ac <HAL_RCC_OscConfig+0x52c>
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	40007000 	.word	0x40007000
 800158c:	4b9c      	ldr	r3, [pc, #624]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 800158e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001592:	4a9b      	ldr	r2, [pc, #620]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800159c:	4b98      	ldr	r3, [pc, #608]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a2:	4a97      	ldr	r2, [pc, #604]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 80015a4:	f023 0304 	bic.w	r3, r3, #4
 80015a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d016      	beq.n	80015e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fa4c 	bl	8000a50 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff fa48 	bl	8000a50 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e12a      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 80015d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0ed      	beq.n	80015bc <HAL_RCC_OscConfig+0x53c>
 80015e0:	e015      	b.n	800160e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e2:	f7ff fa35 	bl	8000a50 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015e8:	e00a      	b.n	8001600 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff fa31 	bl	8000a50 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e113      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001600:	4b7f      	ldr	r3, [pc, #508]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 8001602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1ed      	bne.n	80015ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800160e:	7ffb      	ldrb	r3, [r7, #31]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d105      	bne.n	8001620 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001614:	4b7a      	ldr	r3, [pc, #488]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 8001616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001618:	4a79      	ldr	r2, [pc, #484]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 800161a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800161e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80fe 	beq.w	8001826 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162e:	2b02      	cmp	r3, #2
 8001630:	f040 80d0 	bne.w	80017d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001634:	4b72      	ldr	r3, [pc, #456]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f003 0203 	and.w	r2, r3, #3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001644:	429a      	cmp	r2, r3
 8001646:	d130      	bne.n	80016aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	3b01      	subs	r3, #1
 8001654:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	429a      	cmp	r2, r3
 8001658:	d127      	bne.n	80016aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001664:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001666:	429a      	cmp	r2, r3
 8001668:	d11f      	bne.n	80016aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001674:	2a07      	cmp	r2, #7
 8001676:	bf14      	ite	ne
 8001678:	2201      	movne	r2, #1
 800167a:	2200      	moveq	r2, #0
 800167c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800167e:	4293      	cmp	r3, r2
 8001680:	d113      	bne.n	80016aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800168c:	085b      	lsrs	r3, r3, #1
 800168e:	3b01      	subs	r3, #1
 8001690:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d109      	bne.n	80016aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	3b01      	subs	r3, #1
 80016a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d06e      	beq.n	8001788 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	d069      	beq.n	8001784 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016b0:	4b53      	ldr	r3, [pc, #332]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016bc:	4b50      	ldr	r3, [pc, #320]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0ad      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 80016d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016d8:	f7ff f9ba 	bl	8000a50 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff f9b6 	bl	8000a50 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e09a      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f2:	4b43      	ldr	r3, [pc, #268]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016fe:	4b40      	ldr	r3, [pc, #256]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	4b40      	ldr	r3, [pc, #256]	@ (8001804 <HAL_RCC_OscConfig+0x784>)
 8001704:	4013      	ands	r3, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800170e:	3a01      	subs	r2, #1
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	4311      	orrs	r1, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001718:	0212      	lsls	r2, r2, #8
 800171a:	4311      	orrs	r1, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001720:	0852      	lsrs	r2, r2, #1
 8001722:	3a01      	subs	r2, #1
 8001724:	0552      	lsls	r2, r2, #21
 8001726:	4311      	orrs	r1, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800172c:	0852      	lsrs	r2, r2, #1
 800172e:	3a01      	subs	r2, #1
 8001730:	0652      	lsls	r2, r2, #25
 8001732:	4311      	orrs	r1, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001738:	0912      	lsrs	r2, r2, #4
 800173a:	0452      	lsls	r2, r2, #17
 800173c:	430a      	orrs	r2, r1
 800173e:	4930      	ldr	r1, [pc, #192]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 8001740:	4313      	orrs	r3, r2
 8001742:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001744:	4b2e      	ldr	r3, [pc, #184]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a2d      	ldr	r2, [pc, #180]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 800174a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800174e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001750:	4b2b      	ldr	r3, [pc, #172]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4a2a      	ldr	r2, [pc, #168]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 8001756:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800175a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800175c:	f7ff f978 	bl	8000a50 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff f974 	bl	8000a50 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e058      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001776:	4b22      	ldr	r3, [pc, #136]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001782:	e050      	b.n	8001826 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e04f      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001788:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d148      	bne.n	8001826 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001794:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a19      	ldr	r2, [pc, #100]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 800179a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800179e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017a0:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4a16      	ldr	r2, [pc, #88]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 80017a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017ac:	f7ff f950 	bl	8000a50 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff f94c 	bl	8000a50 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e030      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x734>
 80017d2:	e028      	b.n	8001826 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	d023      	beq.n	8001822 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a08      	ldr	r2, [pc, #32]	@ (8001800 <HAL_RCC_OscConfig+0x780>)
 80017e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff f933 	bl	8000a50 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ec:	e00c      	b.n	8001808 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ee:	f7ff f92f 	bl	8000a50 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d905      	bls.n	8001808 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e013      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
 8001800:	40021000 	.word	0x40021000
 8001804:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001808:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_RCC_OscConfig+0x7b0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1ec      	bne.n	80017ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_RCC_OscConfig+0x7b0>)
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	4905      	ldr	r1, [pc, #20]	@ (8001830 <HAL_RCC_OscConfig+0x7b0>)
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_RCC_OscConfig+0x7b4>)
 800181c:	4013      	ands	r3, r2
 800181e:	60cb      	str	r3, [r1, #12]
 8001820:	e001      	b.n	8001826 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000
 8001834:	feeefffc 	.word	0xfeeefffc

08001838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0e7      	b.n	8001a1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b75      	ldr	r3, [pc, #468]	@ (8001a24 <HAL_RCC_ClockConfig+0x1ec>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d910      	bls.n	800187c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b72      	ldr	r3, [pc, #456]	@ (8001a24 <HAL_RCC_ClockConfig+0x1ec>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 0207 	bic.w	r2, r3, #7
 8001862:	4970      	ldr	r1, [pc, #448]	@ (8001a24 <HAL_RCC_ClockConfig+0x1ec>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b6e      	ldr	r3, [pc, #440]	@ (8001a24 <HAL_RCC_ClockConfig+0x1ec>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0cf      	b.n	8001a1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d010      	beq.n	80018aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	4b66      	ldr	r3, [pc, #408]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001894:	429a      	cmp	r2, r3
 8001896:	d908      	bls.n	80018aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001898:	4b63      	ldr	r3, [pc, #396]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4960      	ldr	r1, [pc, #384]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d04c      	beq.n	8001950 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018be:	4b5a      	ldr	r3, [pc, #360]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d121      	bne.n	800190e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0a6      	b.n	8001a1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018d6:	4b54      	ldr	r3, [pc, #336]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d115      	bne.n	800190e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e09a      	b.n	8001a1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e08e      	b.n	8001a1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e086      	b.n	8001a1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800190e:	4b46      	ldr	r3, [pc, #280]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f023 0203 	bic.w	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4943      	ldr	r1, [pc, #268]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 800191c:	4313      	orrs	r3, r2
 800191e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001920:	f7ff f896 	bl	8000a50 <HAL_GetTick>
 8001924:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	e00a      	b.n	800193e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001928:	f7ff f892 	bl	8000a50 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e06e      	b.n	8001a1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 020c 	and.w	r2, r3, #12
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	429a      	cmp	r2, r3
 800194e:	d1eb      	bne.n	8001928 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d010      	beq.n	800197e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	4b31      	ldr	r3, [pc, #196]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001968:	429a      	cmp	r2, r3
 800196a:	d208      	bcs.n	800197e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	492b      	ldr	r1, [pc, #172]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800197e:	4b29      	ldr	r3, [pc, #164]	@ (8001a24 <HAL_RCC_ClockConfig+0x1ec>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d210      	bcs.n	80019ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198c:	4b25      	ldr	r3, [pc, #148]	@ (8001a24 <HAL_RCC_ClockConfig+0x1ec>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 0207 	bic.w	r2, r3, #7
 8001994:	4923      	ldr	r1, [pc, #140]	@ (8001a24 <HAL_RCC_ClockConfig+0x1ec>)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	4313      	orrs	r3, r2
 800199a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199c:	4b21      	ldr	r3, [pc, #132]	@ (8001a24 <HAL_RCC_ClockConfig+0x1ec>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d001      	beq.n	80019ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e036      	b.n	8001a1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d008      	beq.n	80019cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	4918      	ldr	r1, [pc, #96]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d009      	beq.n	80019ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4910      	ldr	r1, [pc, #64]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ec:	f000 f824 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	490b      	ldr	r1, [pc, #44]	@ (8001a2c <HAL_RCC_ClockConfig+0x1f4>)
 80019fe:	5ccb      	ldrb	r3, [r1, r3]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
 8001a08:	4a09      	ldr	r2, [pc, #36]	@ (8001a30 <HAL_RCC_ClockConfig+0x1f8>)
 8001a0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_RCC_ClockConfig+0x1fc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe ffcd 	bl	80009b0 <HAL_InitTick>
 8001a16:	4603      	mov	r3, r0
 8001a18:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	08005c18 	.word	0x08005c18
 8001a30:	20000014 	.word	0x20000014
 8001a34:	20000018 	.word	0x20000018

08001a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	@ 0x24
 8001a3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a46:	4b3e      	ldr	r3, [pc, #248]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a50:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x34>
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	2b0c      	cmp	r3, #12
 8001a64:	d121      	bne.n	8001aaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d11e      	bne.n	8001aaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a6c:	4b34      	ldr	r3, [pc, #208]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a78:	4b31      	ldr	r3, [pc, #196]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e005      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a88:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a94:	4a2b      	ldr	r2, [pc, #172]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10d      	bne.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d102      	bne.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ab0:	4b25      	ldr	r3, [pc, #148]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	e004      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001abc:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001abe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d134      	bne.n	8001b30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d003      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0xa6>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d003      	beq.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xac>
 8001adc:	e005      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ae0:	617b      	str	r3, [r7, #20]
      break;
 8001ae2:	e005      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ae4:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ae6:	617b      	str	r3, [r7, #20]
      break;
 8001ae8:	e002      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	617b      	str	r3, [r7, #20]
      break;
 8001aee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001af0:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	3301      	adds	r3, #1
 8001afc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	fb03 f202 	mul.w	r2, r3, r2
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b16:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	0e5b      	lsrs	r3, r3, #25
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	3301      	adds	r3, #1
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b30:	69bb      	ldr	r3, [r7, #24]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	@ 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08005c30 	.word	0x08005c30
 8001b48:	00f42400 	.word	0x00f42400
 8001b4c:	007a1200 	.word	0x007a1200

08001b50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000014 	.word	0x20000014

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b6c:	f7ff fff0 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4904      	ldr	r1, [pc, #16]	@ (8001b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08005c28 	.word	0x08005c28

08001b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b98:	f7ff ffda 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	0adb      	lsrs	r3, r3, #11
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4904      	ldr	r1, [pc, #16]	@ (8001bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08005c28 	.word	0x08005c28

08001bc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bd8:	f7ff f9ee 	bl	8000fb8 <HAL_PWREx_GetVoltageRange>
 8001bdc:	6178      	str	r0, [r7, #20]
 8001bde:	e014      	b.n	8001c0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b25      	ldr	r3, [pc, #148]	@ (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be4:	4a24      	ldr	r2, [pc, #144]	@ (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bec:	4b22      	ldr	r3, [pc, #136]	@ (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bf8:	f7ff f9de 	bl	8000fb8 <HAL_PWREx_GetVoltageRange>
 8001bfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	4a1d      	ldr	r2, [pc, #116]	@ (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c10:	d10b      	bne.n	8001c2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b80      	cmp	r3, #128	@ 0x80
 8001c16:	d919      	bls.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c1c:	d902      	bls.n	8001c24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c1e:	2302      	movs	r3, #2
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e013      	b.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c24:	2301      	movs	r3, #1
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	e010      	b.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b80      	cmp	r3, #128	@ 0x80
 8001c2e:	d902      	bls.n	8001c36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c30:	2303      	movs	r3, #3
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	e00a      	b.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b80      	cmp	r3, #128	@ 0x80
 8001c3a:	d102      	bne.n	8001c42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	e004      	b.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b70      	cmp	r3, #112	@ 0x70
 8001c46:	d101      	bne.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c48:	2301      	movs	r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f023 0207 	bic.w	r2, r3, #7
 8001c54:	4909      	ldr	r1, [pc, #36]	@ (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c5c:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d001      	beq.n	8001c6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40022000 	.word	0x40022000

08001c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c88:	2300      	movs	r3, #0
 8001c8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d041      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ca0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ca4:	d02a      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ca6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001caa:	d824      	bhi.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001cac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001cb0:	d008      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001cb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001cb6:	d81e      	bhi.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00a      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001cbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cc0:	d010      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001cc2:	e018      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cc4:	4b86      	ldr	r3, [pc, #536]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4a85      	ldr	r2, [pc, #532]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cd0:	e015      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fabb 	bl	8002254 <RCCEx_PLLSAI1_Config>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ce2:	e00c      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3320      	adds	r3, #32
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 fba6 	bl	800243c <RCCEx_PLLSAI2_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cf4:	e003      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	74fb      	strb	r3, [r7, #19]
      break;
 8001cfa:	e000      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cfe:	7cfb      	ldrb	r3, [r7, #19]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10b      	bne.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d04:	4b76      	ldr	r3, [pc, #472]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d12:	4973      	ldr	r1, [pc, #460]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001d1a:	e001      	b.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d1c:	7cfb      	ldrb	r3, [r7, #19]
 8001d1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d041      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d34:	d02a      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d3a:	d824      	bhi.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d40:	d008      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d46:	d81e      	bhi.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00a      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d50:	d010      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d52:	e018      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d54:	4b62      	ldr	r3, [pc, #392]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a61      	ldr	r2, [pc, #388]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d60:	e015      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fa73 	bl	8002254 <RCCEx_PLLSAI1_Config>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d72:	e00c      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3320      	adds	r3, #32
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fb5e 	bl	800243c <RCCEx_PLLSAI2_Config>
 8001d80:	4603      	mov	r3, r0
 8001d82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d84:	e003      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	74fb      	strb	r3, [r7, #19]
      break;
 8001d8a:	e000      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d8e:	7cfb      	ldrb	r3, [r7, #19]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10b      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d94:	4b52      	ldr	r3, [pc, #328]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001da2:	494f      	ldr	r1, [pc, #316]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001daa:	e001      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a0 	beq.w	8001efe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dc2:	4b47      	ldr	r3, [pc, #284]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00d      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	4b41      	ldr	r3, [pc, #260]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ddc:	4a40      	ldr	r2, [pc, #256]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df0:	2301      	movs	r3, #1
 8001df2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e00:	f7fe fe26 	bl	8000a50 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e06:	e009      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e08:	f7fe fe22 	bl	8000a50 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d902      	bls.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	74fb      	strb	r3, [r7, #19]
        break;
 8001e1a:	e005      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e1c:	4b31      	ldr	r3, [pc, #196]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ef      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e28:	7cfb      	ldrb	r3, [r7, #19]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d15c      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01f      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d019      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e58:	4b21      	ldr	r3, [pc, #132]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5e:	4a20      	ldr	r2, [pc, #128]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e78:	4a19      	ldr	r2, [pc, #100]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d016      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7fe fde1 	bl	8000a50 <HAL_GetTick>
 8001e8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e90:	e00b      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7fe fddd 	bl	8000a50 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d902      	bls.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	74fb      	strb	r3, [r7, #19]
            break;
 8001ea8:	e006      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ec      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ebe:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ece:	4904      	ldr	r1, [pc, #16]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001ed6:	e009      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	74bb      	strb	r3, [r7, #18]
 8001edc:	e006      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eec:	7c7b      	ldrb	r3, [r7, #17]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d105      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef2:	4b9e      	ldr	r3, [pc, #632]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	4a9d      	ldr	r2, [pc, #628]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f0a:	4b98      	ldr	r3, [pc, #608]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f10:	f023 0203 	bic.w	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f18:	4994      	ldr	r1, [pc, #592]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f2c:	4b8f      	ldr	r3, [pc, #572]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f32:	f023 020c 	bic.w	r2, r3, #12
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f3a:	498c      	ldr	r1, [pc, #560]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f4e:	4b87      	ldr	r3, [pc, #540]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5c:	4983      	ldr	r1, [pc, #524]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f70:	4b7e      	ldr	r3, [pc, #504]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	497b      	ldr	r1, [pc, #492]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f92:	4b76      	ldr	r3, [pc, #472]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa0:	4972      	ldr	r1, [pc, #456]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fb4:	4b6d      	ldr	r3, [pc, #436]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc2:	496a      	ldr	r1, [pc, #424]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fd6:	4b65      	ldr	r3, [pc, #404]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe4:	4961      	ldr	r1, [pc, #388]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ff8:	4b5c      	ldr	r3, [pc, #368]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002006:	4959      	ldr	r1, [pc, #356]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800201a:	4b54      	ldr	r3, [pc, #336]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002020:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002028:	4950      	ldr	r1, [pc, #320]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800203c:	4b4b      	ldr	r3, [pc, #300]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002042:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204a:	4948      	ldr	r1, [pc, #288]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800205e:	4b43      	ldr	r3, [pc, #268]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002064:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206c:	493f      	ldr	r1, [pc, #252]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d028      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002080:	4b3a      	ldr	r3, [pc, #232]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002086:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800208e:	4937      	ldr	r1, [pc, #220]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800209a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800209e:	d106      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a0:	4b32      	ldr	r3, [pc, #200]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4a31      	ldr	r2, [pc, #196]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020aa:	60d3      	str	r3, [r2, #12]
 80020ac:	e011      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3304      	adds	r3, #4
 80020bc:	2101      	movs	r1, #1
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f8c8 	bl	8002254 <RCCEx_PLLSAI1_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d028      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020de:	4b23      	ldr	r3, [pc, #140]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ec:	491f      	ldr	r1, [pc, #124]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020fc:	d106      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020fe:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a1a      	ldr	r2, [pc, #104]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002108:	60d3      	str	r3, [r2, #12]
 800210a:	e011      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002110:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002114:	d10c      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	2101      	movs	r1, #1
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f899 	bl	8002254 <RCCEx_PLLSAI1_Config>
 8002122:	4603      	mov	r3, r0
 8002124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02b      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002142:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800214a:	4908      	ldr	r1, [pc, #32]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002156:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800215a:	d109      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215c:	4b03      	ldr	r3, [pc, #12]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a02      	ldr	r2, [pc, #8]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002166:	60d3      	str	r3, [r2, #12]
 8002168:	e014      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002174:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002178:	d10c      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3304      	adds	r3, #4
 800217e:	2101      	movs	r1, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f867 	bl	8002254 <RCCEx_PLLSAI1_Config>
 8002186:	4603      	mov	r3, r0
 8002188:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d02f      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021ae:	4928      	ldr	r1, [pc, #160]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021be:	d10d      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3304      	adds	r3, #4
 80021c4:	2102      	movs	r1, #2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f844 	bl	8002254 <RCCEx_PLLSAI1_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d014      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	74bb      	strb	r3, [r7, #18]
 80021da:	e011      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021e4:	d10c      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3320      	adds	r3, #32
 80021ea:	2102      	movs	r1, #2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f925 	bl	800243c <RCCEx_PLLSAI2_Config>
 80021f2:	4603      	mov	r3, r0
 80021f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800220c:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800221a:	490d      	ldr	r1, [pc, #52]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800222e:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800223e:	4904      	ldr	r1, [pc, #16]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002246:	7cbb      	ldrb	r3, [r7, #18]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000

08002254 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002262:	4b75      	ldr	r3, [pc, #468]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d018      	beq.n	80022a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800226e:	4b72      	ldr	r3, [pc, #456]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0203 	and.w	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d10d      	bne.n	800229a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
       ||
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002286:	4b6c      	ldr	r3, [pc, #432]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
       ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d047      	beq.n	800232a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	e044      	b.n	800232a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d018      	beq.n	80022da <RCCEx_PLLSAI1_Config+0x86>
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d825      	bhi.n	80022f8 <RCCEx_PLLSAI1_Config+0xa4>
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d002      	beq.n	80022b6 <RCCEx_PLLSAI1_Config+0x62>
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d009      	beq.n	80022c8 <RCCEx_PLLSAI1_Config+0x74>
 80022b4:	e020      	b.n	80022f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022b6:	4b60      	ldr	r3, [pc, #384]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d11d      	bne.n	80022fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c6:	e01a      	b.n	80022fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d116      	bne.n	8002302 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d8:	e013      	b.n	8002302 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022da:	4b57      	ldr	r3, [pc, #348]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022e6:	4b54      	ldr	r3, [pc, #336]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022f6:	e006      	b.n	8002306 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      break;
 80022fc:	e004      	b.n	8002308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022fe:	bf00      	nop
 8002300:	e002      	b.n	8002308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002302:	bf00      	nop
 8002304:	e000      	b.n	8002308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002306:	bf00      	nop
    }

    if(status == HAL_OK)
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10d      	bne.n	800232a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800230e:	4b4a      	ldr	r3, [pc, #296]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	430b      	orrs	r3, r1
 8002324:	4944      	ldr	r1, [pc, #272]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002326:	4313      	orrs	r3, r2
 8002328:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d17d      	bne.n	800242c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002330:	4b41      	ldr	r3, [pc, #260]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a40      	ldr	r2, [pc, #256]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002336:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800233a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233c:	f7fe fb88 	bl	8000a50 <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002342:	e009      	b.n	8002358 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002344:	f7fe fb84 	bl	8000a50 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d902      	bls.n	8002358 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	73fb      	strb	r3, [r7, #15]
        break;
 8002356:	e005      	b.n	8002364 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002358:	4b37      	ldr	r3, [pc, #220]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ef      	bne.n	8002344 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d160      	bne.n	800242c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d111      	bne.n	8002394 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002370:	4b31      	ldr	r3, [pc, #196]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6892      	ldr	r2, [r2, #8]
 8002380:	0211      	lsls	r1, r2, #8
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68d2      	ldr	r2, [r2, #12]
 8002386:	0912      	lsrs	r2, r2, #4
 8002388:	0452      	lsls	r2, r2, #17
 800238a:	430a      	orrs	r2, r1
 800238c:	492a      	ldr	r1, [pc, #168]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	610b      	str	r3, [r1, #16]
 8002392:	e027      	b.n	80023e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d112      	bne.n	80023c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800239a:	4b27      	ldr	r3, [pc, #156]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80023a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6892      	ldr	r2, [r2, #8]
 80023aa:	0211      	lsls	r1, r2, #8
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6912      	ldr	r2, [r2, #16]
 80023b0:	0852      	lsrs	r2, r2, #1
 80023b2:	3a01      	subs	r2, #1
 80023b4:	0552      	lsls	r2, r2, #21
 80023b6:	430a      	orrs	r2, r1
 80023b8:	491f      	ldr	r1, [pc, #124]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	610b      	str	r3, [r1, #16]
 80023be:	e011      	b.n	80023e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80023c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6892      	ldr	r2, [r2, #8]
 80023d0:	0211      	lsls	r1, r2, #8
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6952      	ldr	r2, [r2, #20]
 80023d6:	0852      	lsrs	r2, r2, #1
 80023d8:	3a01      	subs	r2, #1
 80023da:	0652      	lsls	r2, r2, #25
 80023dc:	430a      	orrs	r2, r1
 80023de:	4916      	ldr	r1, [pc, #88]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023e4:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a13      	ldr	r2, [pc, #76]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7fe fb2e 	bl	8000a50 <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023f6:	e009      	b.n	800240c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023f8:	f7fe fb2a 	bl	8000a50 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d902      	bls.n	800240c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	73fb      	strb	r3, [r7, #15]
          break;
 800240a:	e005      	b.n	8002418 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0ef      	beq.n	80023f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	4904      	ldr	r1, [pc, #16]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000

0800243c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800244a:	4b6a      	ldr	r3, [pc, #424]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d018      	beq.n	8002488 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002456:	4b67      	ldr	r3, [pc, #412]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0203 	and.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d10d      	bne.n	8002482 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
       ||
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800246e:	4b61      	ldr	r3, [pc, #388]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
       ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d047      	beq.n	8002512 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	e044      	b.n	8002512 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d018      	beq.n	80024c2 <RCCEx_PLLSAI2_Config+0x86>
 8002490:	2b03      	cmp	r3, #3
 8002492:	d825      	bhi.n	80024e0 <RCCEx_PLLSAI2_Config+0xa4>
 8002494:	2b01      	cmp	r3, #1
 8002496:	d002      	beq.n	800249e <RCCEx_PLLSAI2_Config+0x62>
 8002498:	2b02      	cmp	r3, #2
 800249a:	d009      	beq.n	80024b0 <RCCEx_PLLSAI2_Config+0x74>
 800249c:	e020      	b.n	80024e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800249e:	4b55      	ldr	r3, [pc, #340]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11d      	bne.n	80024e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ae:	e01a      	b.n	80024e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024b0:	4b50      	ldr	r3, [pc, #320]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d116      	bne.n	80024ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c0:	e013      	b.n	80024ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024c2:	4b4c      	ldr	r3, [pc, #304]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024ce:	4b49      	ldr	r3, [pc, #292]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024de:	e006      	b.n	80024ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      break;
 80024e4:	e004      	b.n	80024f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024e6:	bf00      	nop
 80024e8:	e002      	b.n	80024f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024ea:	bf00      	nop
 80024ec:	e000      	b.n	80024f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024f6:	4b3f      	ldr	r3, [pc, #252]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6819      	ldr	r1, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	430b      	orrs	r3, r1
 800250c:	4939      	ldr	r1, [pc, #228]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800250e:	4313      	orrs	r3, r2
 8002510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d167      	bne.n	80025e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002518:	4b36      	ldr	r3, [pc, #216]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a35      	ldr	r2, [pc, #212]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800251e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002524:	f7fe fa94 	bl	8000a50 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800252a:	e009      	b.n	8002540 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800252c:	f7fe fa90 	bl	8000a50 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d902      	bls.n	8002540 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	73fb      	strb	r3, [r7, #15]
        break;
 800253e:	e005      	b.n	800254c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002540:	4b2c      	ldr	r3, [pc, #176]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ef      	bne.n	800252c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d14a      	bne.n	80025e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d111      	bne.n	800257c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002558:	4b26      	ldr	r3, [pc, #152]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6892      	ldr	r2, [r2, #8]
 8002568:	0211      	lsls	r1, r2, #8
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68d2      	ldr	r2, [r2, #12]
 800256e:	0912      	lsrs	r2, r2, #4
 8002570:	0452      	lsls	r2, r2, #17
 8002572:	430a      	orrs	r2, r1
 8002574:	491f      	ldr	r1, [pc, #124]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002576:	4313      	orrs	r3, r2
 8002578:	614b      	str	r3, [r1, #20]
 800257a:	e011      	b.n	80025a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800257c:	4b1d      	ldr	r3, [pc, #116]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002584:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6892      	ldr	r2, [r2, #8]
 800258c:	0211      	lsls	r1, r2, #8
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6912      	ldr	r2, [r2, #16]
 8002592:	0852      	lsrs	r2, r2, #1
 8002594:	3a01      	subs	r2, #1
 8002596:	0652      	lsls	r2, r2, #25
 8002598:	430a      	orrs	r2, r1
 800259a:	4916      	ldr	r1, [pc, #88]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800259c:	4313      	orrs	r3, r2
 800259e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80025a0:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a13      	ldr	r2, [pc, #76]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ac:	f7fe fa50 	bl	8000a50 <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025b2:	e009      	b.n	80025c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025b4:	f7fe fa4c 	bl	8000a50 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d902      	bls.n	80025c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	73fb      	strb	r3, [r7, #15]
          break;
 80025c6:	e005      	b.n	80025d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025c8:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0ef      	beq.n	80025b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	4904      	ldr	r1, [pc, #16]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e040      	b.n	800268c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe f8e8 	bl	80007f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2224      	movs	r2, #36	@ 0x24
 8002624:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fae0 	bl	8002c04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f825 	bl	8002694 <UART_SetConfig>
 800264a:	4603      	mov	r3, r0
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e01b      	b.n	800268c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 fb5f 	bl	8002d48 <UART_CheckIdleState>
 800268a:	4603      	mov	r3, r0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002698:	b08a      	sub	sp, #40	@ 0x28
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4ba4      	ldr	r3, [pc, #656]	@ (8002954 <UART_SetConfig+0x2c0>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a99      	ldr	r2, [pc, #612]	@ (8002958 <UART_SetConfig+0x2c4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026fc:	4313      	orrs	r3, r2
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002710:	430a      	orrs	r2, r1
 8002712:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a90      	ldr	r2, [pc, #576]	@ (800295c <UART_SetConfig+0x2c8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d126      	bne.n	800276c <UART_SetConfig+0xd8>
 800271e:	4b90      	ldr	r3, [pc, #576]	@ (8002960 <UART_SetConfig+0x2cc>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b03      	cmp	r3, #3
 800272a:	d81b      	bhi.n	8002764 <UART_SetConfig+0xd0>
 800272c:	a201      	add	r2, pc, #4	@ (adr r2, 8002734 <UART_SetConfig+0xa0>)
 800272e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002732:	bf00      	nop
 8002734:	08002745 	.word	0x08002745
 8002738:	08002755 	.word	0x08002755
 800273c:	0800274d 	.word	0x0800274d
 8002740:	0800275d 	.word	0x0800275d
 8002744:	2301      	movs	r3, #1
 8002746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800274a:	e116      	b.n	800297a <UART_SetConfig+0x2e6>
 800274c:	2302      	movs	r3, #2
 800274e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002752:	e112      	b.n	800297a <UART_SetConfig+0x2e6>
 8002754:	2304      	movs	r3, #4
 8002756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800275a:	e10e      	b.n	800297a <UART_SetConfig+0x2e6>
 800275c:	2308      	movs	r3, #8
 800275e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002762:	e10a      	b.n	800297a <UART_SetConfig+0x2e6>
 8002764:	2310      	movs	r3, #16
 8002766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800276a:	e106      	b.n	800297a <UART_SetConfig+0x2e6>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a7c      	ldr	r2, [pc, #496]	@ (8002964 <UART_SetConfig+0x2d0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d138      	bne.n	80027e8 <UART_SetConfig+0x154>
 8002776:	4b7a      	ldr	r3, [pc, #488]	@ (8002960 <UART_SetConfig+0x2cc>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b0c      	cmp	r3, #12
 8002782:	d82d      	bhi.n	80027e0 <UART_SetConfig+0x14c>
 8002784:	a201      	add	r2, pc, #4	@ (adr r2, 800278c <UART_SetConfig+0xf8>)
 8002786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278a:	bf00      	nop
 800278c:	080027c1 	.word	0x080027c1
 8002790:	080027e1 	.word	0x080027e1
 8002794:	080027e1 	.word	0x080027e1
 8002798:	080027e1 	.word	0x080027e1
 800279c:	080027d1 	.word	0x080027d1
 80027a0:	080027e1 	.word	0x080027e1
 80027a4:	080027e1 	.word	0x080027e1
 80027a8:	080027e1 	.word	0x080027e1
 80027ac:	080027c9 	.word	0x080027c9
 80027b0:	080027e1 	.word	0x080027e1
 80027b4:	080027e1 	.word	0x080027e1
 80027b8:	080027e1 	.word	0x080027e1
 80027bc:	080027d9 	.word	0x080027d9
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027c6:	e0d8      	b.n	800297a <UART_SetConfig+0x2e6>
 80027c8:	2302      	movs	r3, #2
 80027ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027ce:	e0d4      	b.n	800297a <UART_SetConfig+0x2e6>
 80027d0:	2304      	movs	r3, #4
 80027d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027d6:	e0d0      	b.n	800297a <UART_SetConfig+0x2e6>
 80027d8:	2308      	movs	r3, #8
 80027da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027de:	e0cc      	b.n	800297a <UART_SetConfig+0x2e6>
 80027e0:	2310      	movs	r3, #16
 80027e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027e6:	e0c8      	b.n	800297a <UART_SetConfig+0x2e6>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a5e      	ldr	r2, [pc, #376]	@ (8002968 <UART_SetConfig+0x2d4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d125      	bne.n	800283e <UART_SetConfig+0x1aa>
 80027f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002960 <UART_SetConfig+0x2cc>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80027fc:	2b30      	cmp	r3, #48	@ 0x30
 80027fe:	d016      	beq.n	800282e <UART_SetConfig+0x19a>
 8002800:	2b30      	cmp	r3, #48	@ 0x30
 8002802:	d818      	bhi.n	8002836 <UART_SetConfig+0x1a2>
 8002804:	2b20      	cmp	r3, #32
 8002806:	d00a      	beq.n	800281e <UART_SetConfig+0x18a>
 8002808:	2b20      	cmp	r3, #32
 800280a:	d814      	bhi.n	8002836 <UART_SetConfig+0x1a2>
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <UART_SetConfig+0x182>
 8002810:	2b10      	cmp	r3, #16
 8002812:	d008      	beq.n	8002826 <UART_SetConfig+0x192>
 8002814:	e00f      	b.n	8002836 <UART_SetConfig+0x1a2>
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800281c:	e0ad      	b.n	800297a <UART_SetConfig+0x2e6>
 800281e:	2302      	movs	r3, #2
 8002820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002824:	e0a9      	b.n	800297a <UART_SetConfig+0x2e6>
 8002826:	2304      	movs	r3, #4
 8002828:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800282c:	e0a5      	b.n	800297a <UART_SetConfig+0x2e6>
 800282e:	2308      	movs	r3, #8
 8002830:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002834:	e0a1      	b.n	800297a <UART_SetConfig+0x2e6>
 8002836:	2310      	movs	r3, #16
 8002838:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800283c:	e09d      	b.n	800297a <UART_SetConfig+0x2e6>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a4a      	ldr	r2, [pc, #296]	@ (800296c <UART_SetConfig+0x2d8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d125      	bne.n	8002894 <UART_SetConfig+0x200>
 8002848:	4b45      	ldr	r3, [pc, #276]	@ (8002960 <UART_SetConfig+0x2cc>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002852:	2bc0      	cmp	r3, #192	@ 0xc0
 8002854:	d016      	beq.n	8002884 <UART_SetConfig+0x1f0>
 8002856:	2bc0      	cmp	r3, #192	@ 0xc0
 8002858:	d818      	bhi.n	800288c <UART_SetConfig+0x1f8>
 800285a:	2b80      	cmp	r3, #128	@ 0x80
 800285c:	d00a      	beq.n	8002874 <UART_SetConfig+0x1e0>
 800285e:	2b80      	cmp	r3, #128	@ 0x80
 8002860:	d814      	bhi.n	800288c <UART_SetConfig+0x1f8>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <UART_SetConfig+0x1d8>
 8002866:	2b40      	cmp	r3, #64	@ 0x40
 8002868:	d008      	beq.n	800287c <UART_SetConfig+0x1e8>
 800286a:	e00f      	b.n	800288c <UART_SetConfig+0x1f8>
 800286c:	2300      	movs	r3, #0
 800286e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002872:	e082      	b.n	800297a <UART_SetConfig+0x2e6>
 8002874:	2302      	movs	r3, #2
 8002876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800287a:	e07e      	b.n	800297a <UART_SetConfig+0x2e6>
 800287c:	2304      	movs	r3, #4
 800287e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002882:	e07a      	b.n	800297a <UART_SetConfig+0x2e6>
 8002884:	2308      	movs	r3, #8
 8002886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800288a:	e076      	b.n	800297a <UART_SetConfig+0x2e6>
 800288c:	2310      	movs	r3, #16
 800288e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002892:	e072      	b.n	800297a <UART_SetConfig+0x2e6>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a35      	ldr	r2, [pc, #212]	@ (8002970 <UART_SetConfig+0x2dc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d12a      	bne.n	80028f4 <UART_SetConfig+0x260>
 800289e:	4b30      	ldr	r3, [pc, #192]	@ (8002960 <UART_SetConfig+0x2cc>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028ac:	d01a      	beq.n	80028e4 <UART_SetConfig+0x250>
 80028ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028b2:	d81b      	bhi.n	80028ec <UART_SetConfig+0x258>
 80028b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028b8:	d00c      	beq.n	80028d4 <UART_SetConfig+0x240>
 80028ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028be:	d815      	bhi.n	80028ec <UART_SetConfig+0x258>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <UART_SetConfig+0x238>
 80028c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028c8:	d008      	beq.n	80028dc <UART_SetConfig+0x248>
 80028ca:	e00f      	b.n	80028ec <UART_SetConfig+0x258>
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028d2:	e052      	b.n	800297a <UART_SetConfig+0x2e6>
 80028d4:	2302      	movs	r3, #2
 80028d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028da:	e04e      	b.n	800297a <UART_SetConfig+0x2e6>
 80028dc:	2304      	movs	r3, #4
 80028de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028e2:	e04a      	b.n	800297a <UART_SetConfig+0x2e6>
 80028e4:	2308      	movs	r3, #8
 80028e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028ea:	e046      	b.n	800297a <UART_SetConfig+0x2e6>
 80028ec:	2310      	movs	r3, #16
 80028ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028f2:	e042      	b.n	800297a <UART_SetConfig+0x2e6>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a17      	ldr	r2, [pc, #92]	@ (8002958 <UART_SetConfig+0x2c4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d13a      	bne.n	8002974 <UART_SetConfig+0x2e0>
 80028fe:	4b18      	ldr	r3, [pc, #96]	@ (8002960 <UART_SetConfig+0x2cc>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002904:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002908:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800290c:	d01a      	beq.n	8002944 <UART_SetConfig+0x2b0>
 800290e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002912:	d81b      	bhi.n	800294c <UART_SetConfig+0x2b8>
 8002914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002918:	d00c      	beq.n	8002934 <UART_SetConfig+0x2a0>
 800291a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800291e:	d815      	bhi.n	800294c <UART_SetConfig+0x2b8>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <UART_SetConfig+0x298>
 8002924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002928:	d008      	beq.n	800293c <UART_SetConfig+0x2a8>
 800292a:	e00f      	b.n	800294c <UART_SetConfig+0x2b8>
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002932:	e022      	b.n	800297a <UART_SetConfig+0x2e6>
 8002934:	2302      	movs	r3, #2
 8002936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800293a:	e01e      	b.n	800297a <UART_SetConfig+0x2e6>
 800293c:	2304      	movs	r3, #4
 800293e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002942:	e01a      	b.n	800297a <UART_SetConfig+0x2e6>
 8002944:	2308      	movs	r3, #8
 8002946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800294a:	e016      	b.n	800297a <UART_SetConfig+0x2e6>
 800294c:	2310      	movs	r3, #16
 800294e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002952:	e012      	b.n	800297a <UART_SetConfig+0x2e6>
 8002954:	efff69f3 	.word	0xefff69f3
 8002958:	40008000 	.word	0x40008000
 800295c:	40013800 	.word	0x40013800
 8002960:	40021000 	.word	0x40021000
 8002964:	40004400 	.word	0x40004400
 8002968:	40004800 	.word	0x40004800
 800296c:	40004c00 	.word	0x40004c00
 8002970:	40005000 	.word	0x40005000
 8002974:	2310      	movs	r3, #16
 8002976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a9f      	ldr	r2, [pc, #636]	@ (8002bfc <UART_SetConfig+0x568>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d17a      	bne.n	8002a7a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002984:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002988:	2b08      	cmp	r3, #8
 800298a:	d824      	bhi.n	80029d6 <UART_SetConfig+0x342>
 800298c:	a201      	add	r2, pc, #4	@ (adr r2, 8002994 <UART_SetConfig+0x300>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029b9 	.word	0x080029b9
 8002998:	080029d7 	.word	0x080029d7
 800299c:	080029c1 	.word	0x080029c1
 80029a0:	080029d7 	.word	0x080029d7
 80029a4:	080029c7 	.word	0x080029c7
 80029a8:	080029d7 	.word	0x080029d7
 80029ac:	080029d7 	.word	0x080029d7
 80029b0:	080029d7 	.word	0x080029d7
 80029b4:	080029cf 	.word	0x080029cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029b8:	f7ff f8d6 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 80029bc:	61f8      	str	r0, [r7, #28]
        break;
 80029be:	e010      	b.n	80029e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029c0:	4b8f      	ldr	r3, [pc, #572]	@ (8002c00 <UART_SetConfig+0x56c>)
 80029c2:	61fb      	str	r3, [r7, #28]
        break;
 80029c4:	e00d      	b.n	80029e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029c6:	f7ff f837 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80029ca:	61f8      	str	r0, [r7, #28]
        break;
 80029cc:	e009      	b.n	80029e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029d2:	61fb      	str	r3, [r7, #28]
        break;
 80029d4:	e005      	b.n	80029e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80029e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80fb 	beq.w	8002be0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d305      	bcc.n	8002a06 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d903      	bls.n	8002a0e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002a0c:	e0e8      	b.n	8002be0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	2200      	movs	r2, #0
 8002a12:	461c      	mov	r4, r3
 8002a14:	4615      	mov	r5, r2
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	022b      	lsls	r3, r5, #8
 8002a20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a24:	0222      	lsls	r2, r4, #8
 8002a26:	68f9      	ldr	r1, [r7, #12]
 8002a28:	6849      	ldr	r1, [r1, #4]
 8002a2a:	0849      	lsrs	r1, r1, #1
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	4688      	mov	r8, r1
 8002a30:	4681      	mov	r9, r0
 8002a32:	eb12 0a08 	adds.w	sl, r2, r8
 8002a36:	eb43 0b09 	adc.w	fp, r3, r9
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a48:	4650      	mov	r0, sl
 8002a4a:	4659      	mov	r1, fp
 8002a4c:	f7fd fbc0 	bl	80001d0 <__aeabi_uldivmod>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4613      	mov	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a5e:	d308      	bcc.n	8002a72 <UART_SetConfig+0x3de>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a66:	d204      	bcs.n	8002a72 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	60da      	str	r2, [r3, #12]
 8002a70:	e0b6      	b.n	8002be0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002a78:	e0b2      	b.n	8002be0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a82:	d15e      	bne.n	8002b42 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002a84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d828      	bhi.n	8002ade <UART_SetConfig+0x44a>
 8002a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a94 <UART_SetConfig+0x400>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002ab9 	.word	0x08002ab9
 8002a98:	08002ac1 	.word	0x08002ac1
 8002a9c:	08002ac9 	.word	0x08002ac9
 8002aa0:	08002adf 	.word	0x08002adf
 8002aa4:	08002acf 	.word	0x08002acf
 8002aa8:	08002adf 	.word	0x08002adf
 8002aac:	08002adf 	.word	0x08002adf
 8002ab0:	08002adf 	.word	0x08002adf
 8002ab4:	08002ad7 	.word	0x08002ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ab8:	f7ff f856 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8002abc:	61f8      	str	r0, [r7, #28]
        break;
 8002abe:	e014      	b.n	8002aea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ac0:	f7ff f868 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8002ac4:	61f8      	str	r0, [r7, #28]
        break;
 8002ac6:	e010      	b.n	8002aea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8002c00 <UART_SetConfig+0x56c>)
 8002aca:	61fb      	str	r3, [r7, #28]
        break;
 8002acc:	e00d      	b.n	8002aea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ace:	f7fe ffb3 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 8002ad2:	61f8      	str	r0, [r7, #28]
        break;
 8002ad4:	e009      	b.n	8002aea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ada:	61fb      	str	r3, [r7, #28]
        break;
 8002adc:	e005      	b.n	8002aea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ae8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d077      	beq.n	8002be0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005a      	lsls	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	441a      	add	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b0f      	cmp	r3, #15
 8002b0a:	d916      	bls.n	8002b3a <UART_SetConfig+0x4a6>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b12:	d212      	bcs.n	8002b3a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f023 030f 	bic.w	r3, r3, #15
 8002b1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	8afb      	ldrh	r3, [r7, #22]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	8afa      	ldrh	r2, [r7, #22]
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	e052      	b.n	8002be0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002b40:	e04e      	b.n	8002be0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d827      	bhi.n	8002b9a <UART_SetConfig+0x506>
 8002b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b50 <UART_SetConfig+0x4bc>)
 8002b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b50:	08002b75 	.word	0x08002b75
 8002b54:	08002b7d 	.word	0x08002b7d
 8002b58:	08002b85 	.word	0x08002b85
 8002b5c:	08002b9b 	.word	0x08002b9b
 8002b60:	08002b8b 	.word	0x08002b8b
 8002b64:	08002b9b 	.word	0x08002b9b
 8002b68:	08002b9b 	.word	0x08002b9b
 8002b6c:	08002b9b 	.word	0x08002b9b
 8002b70:	08002b93 	.word	0x08002b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b74:	f7fe fff8 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8002b78:	61f8      	str	r0, [r7, #28]
        break;
 8002b7a:	e014      	b.n	8002ba6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b7c:	f7ff f80a 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8002b80:	61f8      	str	r0, [r7, #28]
        break;
 8002b82:	e010      	b.n	8002ba6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b84:	4b1e      	ldr	r3, [pc, #120]	@ (8002c00 <UART_SetConfig+0x56c>)
 8002b86:	61fb      	str	r3, [r7, #28]
        break;
 8002b88:	e00d      	b.n	8002ba6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b8a:	f7fe ff55 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 8002b8e:	61f8      	str	r0, [r7, #28]
        break;
 8002b90:	e009      	b.n	8002ba6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b96:	61fb      	str	r3, [r7, #28]
        break;
 8002b98:	e005      	b.n	8002ba6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ba4:	bf00      	nop
    }

    if (pclk != 0U)
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d019      	beq.n	8002be0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	085a      	lsrs	r2, r3, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	441a      	add	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	2b0f      	cmp	r3, #15
 8002bc4:	d909      	bls.n	8002bda <UART_SetConfig+0x546>
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bcc:	d205      	bcs.n	8002bda <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60da      	str	r2, [r3, #12]
 8002bd8:	e002      	b.n	8002be0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002bec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3728      	adds	r7, #40	@ 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40008000 	.word	0x40008000
 8002c00:	00f42400 	.word	0x00f42400

08002c04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01a      	beq.n	8002d1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d02:	d10a      	bne.n	8002d1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	605a      	str	r2, [r3, #4]
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b098      	sub	sp, #96	@ 0x60
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d58:	f7fd fe7a 	bl	8000a50 <HAL_GetTick>
 8002d5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d12e      	bne.n	8002dca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d74:	2200      	movs	r2, #0
 8002d76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f88c 	bl	8002e98 <UART_WaitOnFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d021      	beq.n	8002dca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d8e:	e853 3f00 	ldrex	r3, [r3]
 8002d92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002da6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002daa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dac:	e841 2300 	strex	r3, r2, [r1]
 8002db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e6      	bne.n	8002d86 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e062      	b.n	8002e90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d149      	bne.n	8002e6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de0:	2200      	movs	r2, #0
 8002de2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f856 	bl	8002e98 <UART_WaitOnFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d03c      	beq.n	8002e6c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e6      	bne.n	8002df2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3308      	adds	r3, #8
 8002e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	e853 3f00 	ldrex	r3, [r3]
 8002e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3308      	adds	r3, #8
 8002e42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e44:	61fa      	str	r2, [r7, #28]
 8002e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e48:	69b9      	ldr	r1, [r7, #24]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	e841 2300 	strex	r3, r2, [r1]
 8002e50:	617b      	str	r3, [r7, #20]
   return(result);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e5      	bne.n	8002e24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e011      	b.n	8002e90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3758      	adds	r7, #88	@ 0x58
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea8:	e04f      	b.n	8002f4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d04b      	beq.n	8002f4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb2:	f7fd fdcd 	bl	8000a50 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e04e      	b.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d037      	beq.n	8002f4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b80      	cmp	r3, #128	@ 0x80
 8002ede:	d034      	beq.n	8002f4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b40      	cmp	r3, #64	@ 0x40
 8002ee4:	d031      	beq.n	8002f4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d110      	bne.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f838 	bl	8002f72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2208      	movs	r2, #8
 8002f06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e029      	b.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f24:	d111      	bne.n	8002f4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f81e 	bl	8002f72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e00f      	b.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69da      	ldr	r2, [r3, #28]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d0a0      	beq.n	8002eaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b095      	sub	sp, #84	@ 0x54
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f82:	e853 3f00 	ldrex	r3, [r3]
 8002f86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fa0:	e841 2300 	strex	r3, r2, [r1]
 8002fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e6      	bne.n	8002f7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	e853 3f00 	ldrex	r3, [r3]
 8002fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3308      	adds	r3, #8
 8002fca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fd4:	e841 2300 	strex	r3, r2, [r1]
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e5      	bne.n	8002fac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d118      	bne.n	800301a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f023 0310 	bic.w	r3, r3, #16
 8002ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300a:	6979      	ldr	r1, [r7, #20]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	e841 2300 	strex	r3, r2, [r1]
 8003012:	613b      	str	r3, [r7, #16]
   return(result);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e6      	bne.n	8002fe8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800302e:	bf00      	nop
 8003030:	3754      	adds	r7, #84	@ 0x54
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <__NVIC_SetPriority>:
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	2b00      	cmp	r3, #0
 800304e:	db0a      	blt.n	8003066 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	490c      	ldr	r1, [pc, #48]	@ (8003088 <__NVIC_SetPriority+0x4c>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	0112      	lsls	r2, r2, #4
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	440b      	add	r3, r1
 8003060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003064:	e00a      	b.n	800307c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4908      	ldr	r1, [pc, #32]	@ (800308c <__NVIC_SetPriority+0x50>)
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	3b04      	subs	r3, #4
 8003074:	0112      	lsls	r2, r2, #4
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	440b      	add	r3, r1
 800307a:	761a      	strb	r2, [r3, #24]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000e100 	.word	0xe000e100
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003094:	2100      	movs	r1, #0
 8003096:	f06f 0004 	mvn.w	r0, #4
 800309a:	f7ff ffcf 	bl	800303c <__NVIC_SetPriority>
#endif
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030aa:	f3ef 8305 	mrs	r3, IPSR
 80030ae:	603b      	str	r3, [r7, #0]
  return(result);
 80030b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80030b6:	f06f 0305 	mvn.w	r3, #5
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	e00c      	b.n	80030d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80030be:	4b0a      	ldr	r3, [pc, #40]	@ (80030e8 <osKernelInitialize+0x44>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d105      	bne.n	80030d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80030c6:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <osKernelInitialize+0x44>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	e002      	b.n	80030d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295
 80030d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030d8:	687b      	ldr	r3, [r7, #4]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	200000d0 	.word	0x200000d0

080030ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030f2:	f3ef 8305 	mrs	r3, IPSR
 80030f6:	603b      	str	r3, [r7, #0]
  return(result);
 80030f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <osKernelStart+0x1a>
    stat = osErrorISR;
 80030fe:	f06f 0305 	mvn.w	r3, #5
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	e010      	b.n	8003128 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003106:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <osKernelStart+0x48>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d109      	bne.n	8003122 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800310e:	f7ff ffbf 	bl	8003090 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003112:	4b08      	ldr	r3, [pc, #32]	@ (8003134 <osKernelStart+0x48>)
 8003114:	2202      	movs	r2, #2
 8003116:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003118:	f001 f85e 	bl	80041d8 <vTaskStartScheduler>
      stat = osOK;
 800311c:	2300      	movs	r3, #0
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	e002      	b.n	8003128 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003128:	687b      	ldr	r3, [r7, #4]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	200000d0 	.word	0x200000d0

08003138 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b08e      	sub	sp, #56	@ 0x38
 800313c:	af04      	add	r7, sp, #16
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003148:	f3ef 8305 	mrs	r3, IPSR
 800314c:	617b      	str	r3, [r7, #20]
  return(result);
 800314e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003150:	2b00      	cmp	r3, #0
 8003152:	d17e      	bne.n	8003252 <osThreadNew+0x11a>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d07b      	beq.n	8003252 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800315a:	2380      	movs	r3, #128	@ 0x80
 800315c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800315e:	2318      	movs	r3, #24
 8003160:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d045      	beq.n	80031fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <osThreadNew+0x48>
        name = attr->name;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <osThreadNew+0x6e>
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	2b38      	cmp	r3, #56	@ 0x38
 8003198:	d805      	bhi.n	80031a6 <osThreadNew+0x6e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <osThreadNew+0x72>
        return (NULL);
 80031a6:	2300      	movs	r3, #0
 80031a8:	e054      	b.n	8003254 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00e      	beq.n	80031e0 <osThreadNew+0xa8>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b5b      	cmp	r3, #91	@ 0x5b
 80031c8:	d90a      	bls.n	80031e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d006      	beq.n	80031e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <osThreadNew+0xa8>
        mem = 1;
 80031da:	2301      	movs	r3, #1
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	e010      	b.n	8003202 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10c      	bne.n	8003202 <osThreadNew+0xca>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d108      	bne.n	8003202 <osThreadNew+0xca>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <osThreadNew+0xca>
          mem = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	e001      	b.n	8003202 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d110      	bne.n	800322a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003210:	9202      	str	r2, [sp, #8]
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	6a3a      	ldr	r2, [r7, #32]
 800321c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fdfe 	bl	8003e20 <xTaskCreateStatic>
 8003224:	4603      	mov	r3, r0
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e013      	b.n	8003252 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d110      	bne.n	8003252 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	b29a      	uxth	r2, r3
 8003234:	f107 0310 	add.w	r3, r7, #16
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fe4c 	bl	8003ee0 <xTaskCreate>
 8003248:	4603      	mov	r3, r0
 800324a:	2b01      	cmp	r3, #1
 800324c:	d001      	beq.n	8003252 <osThreadNew+0x11a>
            hTask = NULL;
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003252:	693b      	ldr	r3, [r7, #16]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3728      	adds	r7, #40	@ 0x28
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4a07      	ldr	r2, [pc, #28]	@ (8003288 <vApplicationGetIdleTaskMemory+0x2c>)
 800326c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4a06      	ldr	r2, [pc, #24]	@ (800328c <vApplicationGetIdleTaskMemory+0x30>)
 8003272:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2280      	movs	r2, #128	@ 0x80
 8003278:	601a      	str	r2, [r3, #0]
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	200000d4 	.word	0x200000d4
 800328c:	20000130 	.word	0x20000130

08003290 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a07      	ldr	r2, [pc, #28]	@ (80032bc <vApplicationGetTimerTaskMemory+0x2c>)
 80032a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	4a06      	ldr	r2, [pc, #24]	@ (80032c0 <vApplicationGetTimerTaskMemory+0x30>)
 80032a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032ae:	601a      	str	r2, [r3, #0]
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	20000330 	.word	0x20000330
 80032c0:	2000038c 	.word	0x2000038c

080032c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f103 0208 	add.w	r2, r3, #8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
 80032dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f103 0208 	add.w	r2, r3, #8
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f103 0208 	add.w	r2, r3, #8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	601a      	str	r2, [r3, #0]
}
 800335a:	bf00      	nop
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d103      	bne.n	8003386 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e00c      	b.n	80033a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3308      	adds	r3, #8
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e002      	b.n	8003394 <vListInsert+0x2e>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	429a      	cmp	r2, r3
 800339e:	d2f6      	bcs.n	800338e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	601a      	str	r2, [r3, #0]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6892      	ldr	r2, [r2, #8]
 80033ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6852      	ldr	r2, [r2, #4]
 80033f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	d103      	bne.n	800340c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	1e5a      	subs	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003452:	bf00      	nop
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003458:	f002 f876 	bl	8005548 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003464:	68f9      	ldr	r1, [r7, #12]
 8003466:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	441a      	add	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003488:	3b01      	subs	r3, #1
 800348a:	68f9      	ldr	r1, [r7, #12]
 800348c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	441a      	add	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	22ff      	movs	r2, #255	@ 0xff
 800349c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	22ff      	movs	r2, #255	@ 0xff
 80034a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d114      	bne.n	80034d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d01a      	beq.n	80034ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3310      	adds	r3, #16
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 f91a 	bl	80046f4 <xTaskRemoveFromEventList>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d012      	beq.n	80034ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034c6:	4b0d      	ldr	r3, [pc, #52]	@ (80034fc <xQueueGenericReset+0xd0>)
 80034c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	e009      	b.n	80034ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3310      	adds	r3, #16
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fef1 	bl	80032c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3324      	adds	r3, #36	@ 0x24
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff feec 	bl	80032c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034ec:	f002 f85e 	bl	80055ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034f0:	2301      	movs	r3, #1
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	e000ed04 	.word	0xe000ed04

08003500 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08e      	sub	sp, #56	@ 0x38
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10b      	bne.n	800352c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003526:	bf00      	nop
 8003528:	bf00      	nop
 800352a:	e7fd      	b.n	8003528 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10b      	bne.n	800354a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	e7fd      	b.n	8003546 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <xQueueGenericCreateStatic+0x56>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <xQueueGenericCreateStatic+0x5a>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <xQueueGenericCreateStatic+0x5c>
 800355a:	2300      	movs	r3, #0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	623b      	str	r3, [r7, #32]
}
 8003572:	bf00      	nop
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <xQueueGenericCreateStatic+0x84>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <xQueueGenericCreateStatic+0x88>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <xQueueGenericCreateStatic+0x8a>
 8003588:	2300      	movs	r3, #0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10b      	bne.n	80035a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800358e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	61fb      	str	r3, [r7, #28]
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	e7fd      	b.n	80035a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035a6:	2350      	movs	r3, #80	@ 0x50
 80035a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b50      	cmp	r3, #80	@ 0x50
 80035ae:	d00b      	beq.n	80035c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	61bb      	str	r3, [r7, #24]
}
 80035c2:	bf00      	nop
 80035c4:	bf00      	nop
 80035c6:	e7fd      	b.n	80035c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80035ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00d      	beq.n	80035f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80035e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f805 	bl	80035fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3730      	adds	r7, #48	@ 0x30
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d103      	bne.n	8003616 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e002      	b.n	800361c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003628:	2101      	movs	r1, #1
 800362a:	69b8      	ldr	r0, [r7, #24]
 800362c:	f7ff fefe 	bl	800342c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08e      	sub	sp, #56	@ 0x38
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800364e:	2300      	movs	r3, #0
 8003650:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <xQueueGenericSend+0x34>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800366e:	bf00      	nop
 8003670:	bf00      	nop
 8003672:	e7fd      	b.n	8003670 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <xQueueGenericSend+0x42>
 800367a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <xQueueGenericSend+0x46>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <xQueueGenericSend+0x48>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <xQueueGenericSend+0x64>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d103      	bne.n	80036b2 <xQueueGenericSend+0x72>
 80036aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <xQueueGenericSend+0x76>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <xQueueGenericSend+0x78>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10b      	bne.n	80036d4 <xQueueGenericSend+0x94>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	623b      	str	r3, [r7, #32]
}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036d4:	f001 f9ce 	bl	8004a74 <xTaskGetSchedulerState>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <xQueueGenericSend+0xa4>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <xQueueGenericSend+0xa8>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <xQueueGenericSend+0xaa>
 80036e8:	2300      	movs	r3, #0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10b      	bne.n	8003706 <xQueueGenericSend+0xc6>
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	61fb      	str	r3, [r7, #28]
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	e7fd      	b.n	8003702 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003706:	f001 ff1f 	bl	8005548 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800370e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <xQueueGenericSend+0xdc>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d129      	bne.n	8003770 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003722:	f000 fa0f 	bl	8003b44 <prvCopyDataToQueue>
 8003726:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	2b00      	cmp	r3, #0
 800372e:	d010      	beq.n	8003752 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	3324      	adds	r3, #36	@ 0x24
 8003734:	4618      	mov	r0, r3
 8003736:	f000 ffdd 	bl	80046f4 <xTaskRemoveFromEventList>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d013      	beq.n	8003768 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003740:	4b3f      	ldr	r3, [pc, #252]	@ (8003840 <xQueueGenericSend+0x200>)
 8003742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	e00a      	b.n	8003768 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d007      	beq.n	8003768 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003758:	4b39      	ldr	r3, [pc, #228]	@ (8003840 <xQueueGenericSend+0x200>)
 800375a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003768:	f001 ff20 	bl	80055ac <vPortExitCritical>
				return pdPASS;
 800376c:	2301      	movs	r3, #1
 800376e:	e063      	b.n	8003838 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d103      	bne.n	800377e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003776:	f001 ff19 	bl	80055ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800377a:	2300      	movs	r3, #0
 800377c:	e05c      	b.n	8003838 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800377e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	4618      	mov	r0, r3
 800378a:	f001 f817 	bl	80047bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800378e:	2301      	movs	r3, #1
 8003790:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003792:	f001 ff0b 	bl	80055ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003796:	f000 fd87 	bl	80042a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800379a:	f001 fed5 	bl	8005548 <vPortEnterCritical>
 800379e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037a4:	b25b      	sxtb	r3, r3
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d103      	bne.n	80037b4 <xQueueGenericSend+0x174>
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037ba:	b25b      	sxtb	r3, r3
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d103      	bne.n	80037ca <xQueueGenericSend+0x18a>
 80037c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037ca:	f001 feef 	bl	80055ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ce:	1d3a      	adds	r2, r7, #4
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 f806 	bl	80047e8 <xTaskCheckForTimeOut>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d124      	bne.n	800382c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037e4:	f000 faa6 	bl	8003d34 <prvIsQueueFull>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d018      	beq.n	8003820 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f0:	3310      	adds	r3, #16
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 ff2a 	bl	8004650 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037fe:	f000 fa31 	bl	8003c64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003802:	f000 fd5f 	bl	80042c4 <xTaskResumeAll>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f af7c 	bne.w	8003706 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800380e:	4b0c      	ldr	r3, [pc, #48]	@ (8003840 <xQueueGenericSend+0x200>)
 8003810:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	e772      	b.n	8003706 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003820:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003822:	f000 fa1f 	bl	8003c64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003826:	f000 fd4d 	bl	80042c4 <xTaskResumeAll>
 800382a:	e76c      	b.n	8003706 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800382c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800382e:	f000 fa19 	bl	8003c64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003832:	f000 fd47 	bl	80042c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003836:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003838:	4618      	mov	r0, r3
 800383a:	3738      	adds	r7, #56	@ 0x38
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	e000ed04 	.word	0xe000ed04

08003844 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b090      	sub	sp, #64	@ 0x40
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800386e:	bf00      	nop
 8003870:	bf00      	nop
 8003872:	e7fd      	b.n	8003870 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <xQueueGenericSendFromISR+0x3e>
 800387a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <xQueueGenericSendFromISR+0x42>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <xQueueGenericSendFromISR+0x44>
 8003886:	2300      	movs	r3, #0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800388c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800389e:	bf00      	nop
 80038a0:	bf00      	nop
 80038a2:	e7fd      	b.n	80038a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d103      	bne.n	80038b2 <xQueueGenericSendFromISR+0x6e>
 80038aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <xQueueGenericSendFromISR+0x72>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <xQueueGenericSendFromISR+0x74>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	623b      	str	r3, [r7, #32]
}
 80038ce:	bf00      	nop
 80038d0:	bf00      	nop
 80038d2:	e7fd      	b.n	80038d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038d4:	f001 ff18 	bl	8005708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038d8:	f3ef 8211 	mrs	r2, BASEPRI
 80038dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	61fa      	str	r2, [r7, #28]
 80038ee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d302      	bcc.n	8003906 <xQueueGenericSendFromISR+0xc2>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d12f      	bne.n	8003966 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800390c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003914:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800391c:	f000 f912 	bl	8003b44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003920:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d112      	bne.n	8003950 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800392a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003934:	3324      	adds	r3, #36	@ 0x24
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fedc 	bl	80046f4 <xTaskRemoveFromEventList>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00e      	beq.n	8003960 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e007      	b.n	8003960 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003950:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003954:	3301      	adds	r3, #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	b25a      	sxtb	r2, r3
 800395a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003960:	2301      	movs	r3, #1
 8003962:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003964:	e001      	b.n	800396a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003966:	2300      	movs	r3, #0
 8003968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800396a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800396c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003974:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003978:	4618      	mov	r0, r3
 800397a:	3740      	adds	r7, #64	@ 0x40
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08c      	sub	sp, #48	@ 0x30
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800398c:	2300      	movs	r3, #0
 800398e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <xQueueReceive+0x32>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	623b      	str	r3, [r7, #32]
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	e7fd      	b.n	80039ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d103      	bne.n	80039c0 <xQueueReceive+0x40>
 80039b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <xQueueReceive+0x44>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <xQueueReceive+0x46>
 80039c4:	2300      	movs	r3, #0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <xQueueReceive+0x62>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	61fb      	str	r3, [r7, #28]
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	e7fd      	b.n	80039de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039e2:	f001 f847 	bl	8004a74 <xTaskGetSchedulerState>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <xQueueReceive+0x72>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <xQueueReceive+0x76>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <xQueueReceive+0x78>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <xQueueReceive+0x94>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	61bb      	str	r3, [r7, #24]
}
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	e7fd      	b.n	8003a10 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a14:	f001 fd98 	bl	8005548 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01f      	beq.n	8003a64 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a28:	f000 f8f6 	bl	8003c18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	1e5a      	subs	r2, r3, #1
 8003a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a32:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00f      	beq.n	8003a5c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3e:	3310      	adds	r3, #16
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fe57 	bl	80046f4 <xTaskRemoveFromEventList>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a4c:	4b3c      	ldr	r3, [pc, #240]	@ (8003b40 <xQueueReceive+0x1c0>)
 8003a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a5c:	f001 fda6 	bl	80055ac <vPortExitCritical>
				return pdPASS;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e069      	b.n	8003b38 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d103      	bne.n	8003a72 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a6a:	f001 fd9f 	bl	80055ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e062      	b.n	8003b38 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d106      	bne.n	8003a86 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a78:	f107 0310 	add.w	r3, r7, #16
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fe9d 	bl	80047bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a82:	2301      	movs	r3, #1
 8003a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a86:	f001 fd91 	bl	80055ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a8a:	f000 fc0d 	bl	80042a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a8e:	f001 fd5b 	bl	8005548 <vPortEnterCritical>
 8003a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a98:	b25b      	sxtb	r3, r3
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d103      	bne.n	8003aa8 <xQueueReceive+0x128>
 8003aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003aae:	b25b      	sxtb	r3, r3
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d103      	bne.n	8003abe <xQueueReceive+0x13e>
 8003ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003abe:	f001 fd75 	bl	80055ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ac2:	1d3a      	adds	r2, r7, #4
 8003ac4:	f107 0310 	add.w	r3, r7, #16
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fe8c 	bl	80047e8 <xTaskCheckForTimeOut>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d123      	bne.n	8003b1e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ad6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ad8:	f000 f916 	bl	8003d08 <prvIsQueueEmpty>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d017      	beq.n	8003b12 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae4:	3324      	adds	r3, #36	@ 0x24
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fdb0 	bl	8004650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003af0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003af2:	f000 f8b7 	bl	8003c64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003af6:	f000 fbe5 	bl	80042c4 <xTaskResumeAll>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d189      	bne.n	8003a14 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003b00:	4b0f      	ldr	r3, [pc, #60]	@ (8003b40 <xQueueReceive+0x1c0>)
 8003b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	e780      	b.n	8003a14 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b14:	f000 f8a6 	bl	8003c64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b18:	f000 fbd4 	bl	80042c4 <xTaskResumeAll>
 8003b1c:	e77a      	b.n	8003a14 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b20:	f000 f8a0 	bl	8003c64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b24:	f000 fbce 	bl	80042c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b2a:	f000 f8ed 	bl	8003d08 <prvIsQueueEmpty>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f43f af6f 	beq.w	8003a14 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3730      	adds	r7, #48	@ 0x30
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10d      	bne.n	8003b7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d14d      	bne.n	8003c06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 ff9e 	bl	8004ab0 <xTaskPriorityDisinherit>
 8003b74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	e043      	b.n	8003c06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d119      	bne.n	8003bb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6858      	ldr	r0, [r3, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	f002 f816 	bl	8005bc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	441a      	add	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d32b      	bcc.n	8003c06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	e026      	b.n	8003c06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68d8      	ldr	r0, [r3, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	f001 fffc 	bl	8005bc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd0:	425b      	negs	r3, r3
 8003bd2:	441a      	add	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d207      	bcs.n	8003bf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	425b      	negs	r3, r3
 8003bee:	441a      	add	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d105      	bne.n	8003c06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003c0e:	697b      	ldr	r3, [r7, #20]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d018      	beq.n	8003c5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	441a      	add	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d303      	bcc.n	8003c4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68d9      	ldr	r1, [r3, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c54:	461a      	mov	r2, r3
 8003c56:	6838      	ldr	r0, [r7, #0]
 8003c58:	f001 ffb2 	bl	8005bc0 <memcpy>
	}
}
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c6c:	f001 fc6c 	bl	8005548 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c78:	e011      	b.n	8003c9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d012      	beq.n	8003ca8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3324      	adds	r3, #36	@ 0x24
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fd34 	bl	80046f4 <xTaskRemoveFromEventList>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c92:	f000 fe0d 	bl	80048b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	dce9      	bgt.n	8003c7a <prvUnlockQueue+0x16>
 8003ca6:	e000      	b.n	8003caa <prvUnlockQueue+0x46>
					break;
 8003ca8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	22ff      	movs	r2, #255	@ 0xff
 8003cae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003cb2:	f001 fc7b 	bl	80055ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cb6:	f001 fc47 	bl	8005548 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cc2:	e011      	b.n	8003ce8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d012      	beq.n	8003cf2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3310      	adds	r3, #16
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fd0f 	bl	80046f4 <xTaskRemoveFromEventList>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cdc:	f000 fde8 	bl	80048b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ce0:	7bbb      	ldrb	r3, [r7, #14]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	dce9      	bgt.n	8003cc4 <prvUnlockQueue+0x60>
 8003cf0:	e000      	b.n	8003cf4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cf2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	22ff      	movs	r2, #255	@ 0xff
 8003cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003cfc:	f001 fc56 	bl	80055ac <vPortExitCritical>
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d10:	f001 fc1a 	bl	8005548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	e001      	b.n	8003d26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d26:	f001 fc41 	bl	80055ac <vPortExitCritical>

	return xReturn;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d3c:	f001 fc04 	bl	8005548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d102      	bne.n	8003d52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e001      	b.n	8003d56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d56:	f001 fc29 	bl	80055ac <vPortExitCritical>

	return xReturn;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	e014      	b.n	8003d9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d74:	4a0f      	ldr	r2, [pc, #60]	@ (8003db4 <vQueueAddToRegistry+0x50>)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10b      	bne.n	8003d98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d80:	490c      	ldr	r1, [pc, #48]	@ (8003db4 <vQueueAddToRegistry+0x50>)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003db4 <vQueueAddToRegistry+0x50>)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d96:	e006      	b.n	8003da6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b07      	cmp	r3, #7
 8003da2:	d9e7      	bls.n	8003d74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	2000078c 	.word	0x2000078c

08003db8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003dc8:	f001 fbbe 	bl	8005548 <vPortEnterCritical>
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dd2:	b25b      	sxtb	r3, r3
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d103      	bne.n	8003de2 <vQueueWaitForMessageRestricted+0x2a>
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003de8:	b25b      	sxtb	r3, r3
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d103      	bne.n	8003df8 <vQueueWaitForMessageRestricted+0x40>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003df8:	f001 fbd8 	bl	80055ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3324      	adds	r3, #36	@ 0x24
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fc45 	bl	800469c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e12:	6978      	ldr	r0, [r7, #20]
 8003e14:	f7ff ff26 	bl	8003c64 <prvUnlockQueue>
	}
 8003e18:	bf00      	nop
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08e      	sub	sp, #56	@ 0x38
 8003e24:	af04      	add	r7, sp, #16
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10b      	bne.n	8003e4c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	623b      	str	r3, [r7, #32]
}
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	e7fd      	b.n	8003e48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10b      	bne.n	8003e6a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	61fb      	str	r3, [r7, #28]
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	e7fd      	b.n	8003e66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e6a:	235c      	movs	r3, #92	@ 0x5c
 8003e6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b5c      	cmp	r3, #92	@ 0x5c
 8003e72:	d00b      	beq.n	8003e8c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	61bb      	str	r3, [r7, #24]
}
 8003e86:	bf00      	nop
 8003e88:	bf00      	nop
 8003e8a:	e7fd      	b.n	8003e88 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01e      	beq.n	8003ed2 <xTaskCreateStatic+0xb2>
 8003e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01b      	beq.n	8003ed2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ea2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003eac:	2300      	movs	r3, #0
 8003eae:	9303      	str	r3, [sp, #12]
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	9302      	str	r3, [sp, #8]
 8003eb4:	f107 0314 	add.w	r3, r7, #20
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	68b9      	ldr	r1, [r7, #8]
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f850 	bl	8003f6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ecc:	f000 f8de 	bl	800408c <prvAddNewTaskToReadyList>
 8003ed0:	e001      	b.n	8003ed6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ed6:	697b      	ldr	r3, [r7, #20]
	}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3728      	adds	r7, #40	@ 0x28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08c      	sub	sp, #48	@ 0x30
 8003ee4:	af04      	add	r7, sp, #16
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 fc49 	bl	800578c <pvPortMalloc>
 8003efa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00e      	beq.n	8003f20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f02:	205c      	movs	r0, #92	@ 0x5c
 8003f04:	f001 fc42 	bl	800578c <pvPortMalloc>
 8003f08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f16:	e005      	b.n	8003f24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f18:	6978      	ldr	r0, [r7, #20]
 8003f1a:	f001 fd05 	bl	8005928 <vPortFree>
 8003f1e:	e001      	b.n	8003f24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d017      	beq.n	8003f5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f32:	88fa      	ldrh	r2, [r7, #6]
 8003f34:	2300      	movs	r3, #0
 8003f36:	9303      	str	r3, [sp, #12]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	9302      	str	r3, [sp, #8]
 8003f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f80e 	bl	8003f6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f4e:	69f8      	ldr	r0, [r7, #28]
 8003f50:	f000 f89c 	bl	800408c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f54:	2301      	movs	r3, #1
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	e002      	b.n	8003f60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f60:	69bb      	ldr	r3, [r7, #24]
	}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b088      	sub	sp, #32
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	461a      	mov	r2, r3
 8003f82:	21a5      	movs	r1, #165	@ 0xa5
 8003f84:	f001 fdf0 	bl	8005b68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f92:	3b01      	subs	r3, #1
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f023 0307 	bic.w	r3, r3, #7
 8003fa0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00b      	beq.n	8003fc4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	617b      	str	r3, [r7, #20]
}
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	e7fd      	b.n	8003fc0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01f      	beq.n	800400a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	e012      	b.n	8003ff6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	7819      	ldrb	r1, [r3, #0]
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	3334      	adds	r3, #52	@ 0x34
 8003fe0:	460a      	mov	r2, r1
 8003fe2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4413      	add	r3, r2
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d006      	beq.n	8003ffe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	2b0f      	cmp	r3, #15
 8003ffa:	d9e9      	bls.n	8003fd0 <prvInitialiseNewTask+0x66>
 8003ffc:	e000      	b.n	8004000 <prvInitialiseNewTask+0x96>
			{
				break;
 8003ffe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004008:	e003      	b.n	8004012 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004014:	2b37      	cmp	r3, #55	@ 0x37
 8004016:	d901      	bls.n	800401c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004018:	2337      	movs	r3, #55	@ 0x37
 800401a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004020:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004026:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	2200      	movs	r2, #0
 800402c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800402e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004030:	3304      	adds	r3, #4
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff f966 	bl	8003304 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	3318      	adds	r3, #24
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff f961 	bl	8003304 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004046:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004050:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004056:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405a:	2200      	movs	r2, #0
 800405c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	68f9      	ldr	r1, [r7, #12]
 800406a:	69b8      	ldr	r0, [r7, #24]
 800406c:	f001 f93e 	bl	80052ec <pxPortInitialiseStack>
 8004070:	4602      	mov	r2, r0
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800407c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004082:	bf00      	nop
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004094:	f001 fa58 	bl	8005548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004098:	4b2d      	ldr	r3, [pc, #180]	@ (8004150 <prvAddNewTaskToReadyList+0xc4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	4a2c      	ldr	r2, [pc, #176]	@ (8004150 <prvAddNewTaskToReadyList+0xc4>)
 80040a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004154 <prvAddNewTaskToReadyList+0xc8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004154 <prvAddNewTaskToReadyList+0xc8>)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040b0:	4b27      	ldr	r3, [pc, #156]	@ (8004150 <prvAddNewTaskToReadyList+0xc4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d110      	bne.n	80040da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040b8:	f000 fc1e 	bl	80048f8 <prvInitialiseTaskLists>
 80040bc:	e00d      	b.n	80040da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040be:	4b26      	ldr	r3, [pc, #152]	@ (8004158 <prvAddNewTaskToReadyList+0xcc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040c6:	4b23      	ldr	r3, [pc, #140]	@ (8004154 <prvAddNewTaskToReadyList+0xc8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d802      	bhi.n	80040da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004154 <prvAddNewTaskToReadyList+0xc8>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040da:	4b20      	ldr	r3, [pc, #128]	@ (800415c <prvAddNewTaskToReadyList+0xd0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3301      	adds	r3, #1
 80040e0:	4a1e      	ldr	r2, [pc, #120]	@ (800415c <prvAddNewTaskToReadyList+0xd0>)
 80040e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80040e4:	4b1d      	ldr	r3, [pc, #116]	@ (800415c <prvAddNewTaskToReadyList+0xd0>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <prvAddNewTaskToReadyList+0xd4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d903      	bls.n	8004100 <prvAddNewTaskToReadyList+0x74>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fc:	4a18      	ldr	r2, [pc, #96]	@ (8004160 <prvAddNewTaskToReadyList+0xd4>)
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4a15      	ldr	r2, [pc, #84]	@ (8004164 <prvAddNewTaskToReadyList+0xd8>)
 800410e:	441a      	add	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f7ff f901 	bl	800331e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800411c:	f001 fa46 	bl	80055ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004120:	4b0d      	ldr	r3, [pc, #52]	@ (8004158 <prvAddNewTaskToReadyList+0xcc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00e      	beq.n	8004146 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004128:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <prvAddNewTaskToReadyList+0xc8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	429a      	cmp	r2, r3
 8004134:	d207      	bcs.n	8004146 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004136:	4b0c      	ldr	r3, [pc, #48]	@ (8004168 <prvAddNewTaskToReadyList+0xdc>)
 8004138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000ca0 	.word	0x20000ca0
 8004154:	200007cc 	.word	0x200007cc
 8004158:	20000cac 	.word	0x20000cac
 800415c:	20000cbc 	.word	0x20000cbc
 8004160:	20000ca8 	.word	0x20000ca8
 8004164:	200007d0 	.word	0x200007d0
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d018      	beq.n	80041b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800417e:	4b14      	ldr	r3, [pc, #80]	@ (80041d0 <vTaskDelay+0x64>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <vTaskDelay+0x32>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60bb      	str	r3, [r7, #8]
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	e7fd      	b.n	800419a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800419e:	f000 f883 	bl	80042a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041a2:	2100      	movs	r1, #0
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fcf3 	bl	8004b90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041aa:	f000 f88b 	bl	80042c4 <xTaskResumeAll>
 80041ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d107      	bne.n	80041c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80041b6:	4b07      	ldr	r3, [pc, #28]	@ (80041d4 <vTaskDelay+0x68>)
 80041b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000cc8 	.word	0x20000cc8
 80041d4:	e000ed04 	.word	0xe000ed04

080041d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	@ 0x28
 80041dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041e6:	463a      	mov	r2, r7
 80041e8:	1d39      	adds	r1, r7, #4
 80041ea:	f107 0308 	add.w	r3, r7, #8
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff f834 	bl	800325c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041f4:	6839      	ldr	r1, [r7, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	9202      	str	r2, [sp, #8]
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	2300      	movs	r3, #0
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	2300      	movs	r3, #0
 8004204:	460a      	mov	r2, r1
 8004206:	4922      	ldr	r1, [pc, #136]	@ (8004290 <vTaskStartScheduler+0xb8>)
 8004208:	4822      	ldr	r0, [pc, #136]	@ (8004294 <vTaskStartScheduler+0xbc>)
 800420a:	f7ff fe09 	bl	8003e20 <xTaskCreateStatic>
 800420e:	4603      	mov	r3, r0
 8004210:	4a21      	ldr	r2, [pc, #132]	@ (8004298 <vTaskStartScheduler+0xc0>)
 8004212:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004214:	4b20      	ldr	r3, [pc, #128]	@ (8004298 <vTaskStartScheduler+0xc0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800421c:	2301      	movs	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	e001      	b.n	8004226 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d102      	bne.n	8004232 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800422c:	f000 fd04 	bl	8004c38 <xTimerCreateTimerTask>
 8004230:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d116      	bne.n	8004266 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	613b      	str	r3, [r7, #16]
}
 800424a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800424c:	4b13      	ldr	r3, [pc, #76]	@ (800429c <vTaskStartScheduler+0xc4>)
 800424e:	f04f 32ff 	mov.w	r2, #4294967295
 8004252:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004254:	4b12      	ldr	r3, [pc, #72]	@ (80042a0 <vTaskStartScheduler+0xc8>)
 8004256:	2201      	movs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800425a:	4b12      	ldr	r3, [pc, #72]	@ (80042a4 <vTaskStartScheduler+0xcc>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004260:	f001 f8ce 	bl	8005400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004264:	e00f      	b.n	8004286 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d10b      	bne.n	8004286 <vTaskStartScheduler+0xae>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	60fb      	str	r3, [r7, #12]
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	e7fd      	b.n	8004282 <vTaskStartScheduler+0xaa>
}
 8004286:	bf00      	nop
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	08005c00 	.word	0x08005c00
 8004294:	080048c9 	.word	0x080048c9
 8004298:	20000cc4 	.word	0x20000cc4
 800429c:	20000cc0 	.word	0x20000cc0
 80042a0:	20000cac 	.word	0x20000cac
 80042a4:	20000ca4 	.word	0x20000ca4

080042a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80042ac:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <vTaskSuspendAll+0x18>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3301      	adds	r3, #1
 80042b2:	4a03      	ldr	r2, [pc, #12]	@ (80042c0 <vTaskSuspendAll+0x18>)
 80042b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80042b6:	bf00      	nop
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	20000cc8 	.word	0x20000cc8

080042c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042d2:	4b42      	ldr	r3, [pc, #264]	@ (80043dc <xTaskResumeAll+0x118>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10b      	bne.n	80042f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	603b      	str	r3, [r7, #0]
}
 80042ec:	bf00      	nop
 80042ee:	bf00      	nop
 80042f0:	e7fd      	b.n	80042ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042f2:	f001 f929 	bl	8005548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042f6:	4b39      	ldr	r3, [pc, #228]	@ (80043dc <xTaskResumeAll+0x118>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	4a37      	ldr	r2, [pc, #220]	@ (80043dc <xTaskResumeAll+0x118>)
 80042fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004300:	4b36      	ldr	r3, [pc, #216]	@ (80043dc <xTaskResumeAll+0x118>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d162      	bne.n	80043ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004308:	4b35      	ldr	r3, [pc, #212]	@ (80043e0 <xTaskResumeAll+0x11c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05e      	beq.n	80043ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004310:	e02f      	b.n	8004372 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004312:	4b34      	ldr	r3, [pc, #208]	@ (80043e4 <xTaskResumeAll+0x120>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3318      	adds	r3, #24
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff f85a 	bl	80033d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3304      	adds	r3, #4
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff f855 	bl	80033d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004332:	4b2d      	ldr	r3, [pc, #180]	@ (80043e8 <xTaskResumeAll+0x124>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d903      	bls.n	8004342 <xTaskResumeAll+0x7e>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433e:	4a2a      	ldr	r2, [pc, #168]	@ (80043e8 <xTaskResumeAll+0x124>)
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4a27      	ldr	r2, [pc, #156]	@ (80043ec <xTaskResumeAll+0x128>)
 8004350:	441a      	add	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3304      	adds	r3, #4
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f7fe ffe0 	bl	800331e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004362:	4b23      	ldr	r3, [pc, #140]	@ (80043f0 <xTaskResumeAll+0x12c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	429a      	cmp	r2, r3
 800436a:	d302      	bcc.n	8004372 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800436c:	4b21      	ldr	r3, [pc, #132]	@ (80043f4 <xTaskResumeAll+0x130>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004372:	4b1c      	ldr	r3, [pc, #112]	@ (80043e4 <xTaskResumeAll+0x120>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1cb      	bne.n	8004312 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004380:	f000 fb58 	bl	8004a34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004384:	4b1c      	ldr	r3, [pc, #112]	@ (80043f8 <xTaskResumeAll+0x134>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d010      	beq.n	80043b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004390:	f000 f846 	bl	8004420 <xTaskIncrementTick>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800439a:	4b16      	ldr	r3, [pc, #88]	@ (80043f4 <xTaskResumeAll+0x130>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f1      	bne.n	8004390 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80043ac:	4b12      	ldr	r3, [pc, #72]	@ (80043f8 <xTaskResumeAll+0x134>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043b2:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <xTaskResumeAll+0x130>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043be:	4b0f      	ldr	r3, [pc, #60]	@ (80043fc <xTaskResumeAll+0x138>)
 80043c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043ce:	f001 f8ed 	bl	80055ac <vPortExitCritical>

	return xAlreadyYielded;
 80043d2:	68bb      	ldr	r3, [r7, #8]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000cc8 	.word	0x20000cc8
 80043e0:	20000ca0 	.word	0x20000ca0
 80043e4:	20000c60 	.word	0x20000c60
 80043e8:	20000ca8 	.word	0x20000ca8
 80043ec:	200007d0 	.word	0x200007d0
 80043f0:	200007cc 	.word	0x200007cc
 80043f4:	20000cb4 	.word	0x20000cb4
 80043f8:	20000cb0 	.word	0x20000cb0
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004406:	4b05      	ldr	r3, [pc, #20]	@ (800441c <xTaskGetTickCount+0x1c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800440c:	687b      	ldr	r3, [r7, #4]
}
 800440e:	4618      	mov	r0, r3
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000ca4 	.word	0x20000ca4

08004420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800442a:	4b4f      	ldr	r3, [pc, #316]	@ (8004568 <xTaskIncrementTick+0x148>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f040 8090 	bne.w	8004554 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004434:	4b4d      	ldr	r3, [pc, #308]	@ (800456c <xTaskIncrementTick+0x14c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3301      	adds	r3, #1
 800443a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800443c:	4a4b      	ldr	r2, [pc, #300]	@ (800456c <xTaskIncrementTick+0x14c>)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d121      	bne.n	800448c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004448:	4b49      	ldr	r3, [pc, #292]	@ (8004570 <xTaskIncrementTick+0x150>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	603b      	str	r3, [r7, #0]
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	e7fd      	b.n	8004466 <xTaskIncrementTick+0x46>
 800446a:	4b41      	ldr	r3, [pc, #260]	@ (8004570 <xTaskIncrementTick+0x150>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	4b40      	ldr	r3, [pc, #256]	@ (8004574 <xTaskIncrementTick+0x154>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a3e      	ldr	r2, [pc, #248]	@ (8004570 <xTaskIncrementTick+0x150>)
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	4a3e      	ldr	r2, [pc, #248]	@ (8004574 <xTaskIncrementTick+0x154>)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	4b3e      	ldr	r3, [pc, #248]	@ (8004578 <xTaskIncrementTick+0x158>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3301      	adds	r3, #1
 8004484:	4a3c      	ldr	r2, [pc, #240]	@ (8004578 <xTaskIncrementTick+0x158>)
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	f000 fad4 	bl	8004a34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800448c:	4b3b      	ldr	r3, [pc, #236]	@ (800457c <xTaskIncrementTick+0x15c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	429a      	cmp	r2, r3
 8004494:	d349      	bcc.n	800452a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004496:	4b36      	ldr	r3, [pc, #216]	@ (8004570 <xTaskIncrementTick+0x150>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a0:	4b36      	ldr	r3, [pc, #216]	@ (800457c <xTaskIncrementTick+0x15c>)
 80044a2:	f04f 32ff 	mov.w	r2, #4294967295
 80044a6:	601a      	str	r2, [r3, #0]
					break;
 80044a8:	e03f      	b.n	800452a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044aa:	4b31      	ldr	r3, [pc, #196]	@ (8004570 <xTaskIncrementTick+0x150>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d203      	bcs.n	80044ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044c2:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <xTaskIncrementTick+0x15c>)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044c8:	e02f      	b.n	800452a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	3304      	adds	r3, #4
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe ff82 	bl	80033d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d004      	beq.n	80044e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	3318      	adds	r3, #24
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe ff79 	bl	80033d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ea:	4b25      	ldr	r3, [pc, #148]	@ (8004580 <xTaskIncrementTick+0x160>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d903      	bls.n	80044fa <xTaskIncrementTick+0xda>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	4a22      	ldr	r2, [pc, #136]	@ (8004580 <xTaskIncrementTick+0x160>)
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4a1f      	ldr	r2, [pc, #124]	@ (8004584 <xTaskIncrementTick+0x164>)
 8004508:	441a      	add	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	3304      	adds	r3, #4
 800450e:	4619      	mov	r1, r3
 8004510:	4610      	mov	r0, r2
 8004512:	f7fe ff04 	bl	800331e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451a:	4b1b      	ldr	r3, [pc, #108]	@ (8004588 <xTaskIncrementTick+0x168>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	429a      	cmp	r2, r3
 8004522:	d3b8      	bcc.n	8004496 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004524:	2301      	movs	r3, #1
 8004526:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004528:	e7b5      	b.n	8004496 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800452a:	4b17      	ldr	r3, [pc, #92]	@ (8004588 <xTaskIncrementTick+0x168>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004530:	4914      	ldr	r1, [pc, #80]	@ (8004584 <xTaskIncrementTick+0x164>)
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d901      	bls.n	8004546 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004542:	2301      	movs	r3, #1
 8004544:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004546:	4b11      	ldr	r3, [pc, #68]	@ (800458c <xTaskIncrementTick+0x16c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800454e:	2301      	movs	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	e004      	b.n	800455e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004554:	4b0e      	ldr	r3, [pc, #56]	@ (8004590 <xTaskIncrementTick+0x170>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	4a0d      	ldr	r2, [pc, #52]	@ (8004590 <xTaskIncrementTick+0x170>)
 800455c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800455e:	697b      	ldr	r3, [r7, #20]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000cc8 	.word	0x20000cc8
 800456c:	20000ca4 	.word	0x20000ca4
 8004570:	20000c58 	.word	0x20000c58
 8004574:	20000c5c 	.word	0x20000c5c
 8004578:	20000cb8 	.word	0x20000cb8
 800457c:	20000cc0 	.word	0x20000cc0
 8004580:	20000ca8 	.word	0x20000ca8
 8004584:	200007d0 	.word	0x200007d0
 8004588:	200007cc 	.word	0x200007cc
 800458c:	20000cb4 	.word	0x20000cb4
 8004590:	20000cb0 	.word	0x20000cb0

08004594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800459a:	4b28      	ldr	r3, [pc, #160]	@ (800463c <vTaskSwitchContext+0xa8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045a2:	4b27      	ldr	r3, [pc, #156]	@ (8004640 <vTaskSwitchContext+0xac>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045a8:	e042      	b.n	8004630 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80045aa:	4b25      	ldr	r3, [pc, #148]	@ (8004640 <vTaskSwitchContext+0xac>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b0:	4b24      	ldr	r3, [pc, #144]	@ (8004644 <vTaskSwitchContext+0xb0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	e011      	b.n	80045dc <vTaskSwitchContext+0x48>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <vTaskSwitchContext+0x42>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	607b      	str	r3, [r7, #4]
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <vTaskSwitchContext+0x3e>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3b01      	subs	r3, #1
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	491a      	ldr	r1, [pc, #104]	@ (8004648 <vTaskSwitchContext+0xb4>)
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0e3      	beq.n	80045b8 <vTaskSwitchContext+0x24>
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4a13      	ldr	r2, [pc, #76]	@ (8004648 <vTaskSwitchContext+0xb4>)
 80045fc:	4413      	add	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	605a      	str	r2, [r3, #4]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	3308      	adds	r3, #8
 8004612:	429a      	cmp	r2, r3
 8004614:	d104      	bne.n	8004620 <vTaskSwitchContext+0x8c>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	605a      	str	r2, [r3, #4]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	4a09      	ldr	r2, [pc, #36]	@ (800464c <vTaskSwitchContext+0xb8>)
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	4a06      	ldr	r2, [pc, #24]	@ (8004644 <vTaskSwitchContext+0xb0>)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6013      	str	r3, [r2, #0]
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	20000cc8 	.word	0x20000cc8
 8004640:	20000cb4 	.word	0x20000cb4
 8004644:	20000ca8 	.word	0x20000ca8
 8004648:	200007d0 	.word	0x200007d0
 800464c:	200007cc 	.word	0x200007cc

08004650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	60fb      	str	r3, [r7, #12]
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	e7fd      	b.n	8004674 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004678:	4b07      	ldr	r3, [pc, #28]	@ (8004698 <vTaskPlaceOnEventList+0x48>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3318      	adds	r3, #24
 800467e:	4619      	mov	r1, r3
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7fe fe70 	bl	8003366 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004686:	2101      	movs	r1, #1
 8004688:	6838      	ldr	r0, [r7, #0]
 800468a:	f000 fa81 	bl	8004b90 <prvAddCurrentTaskToDelayedList>
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	200007cc 	.word	0x200007cc

0800469c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10b      	bne.n	80046c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	617b      	str	r3, [r7, #20]
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	e7fd      	b.n	80046c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046c6:	4b0a      	ldr	r3, [pc, #40]	@ (80046f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3318      	adds	r3, #24
 80046cc:	4619      	mov	r1, r3
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7fe fe25 	bl	800331e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80046da:	f04f 33ff 	mov.w	r3, #4294967295
 80046de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	68b8      	ldr	r0, [r7, #8]
 80046e4:	f000 fa54 	bl	8004b90 <prvAddCurrentTaskToDelayedList>
	}
 80046e8:	bf00      	nop
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	200007cc 	.word	0x200007cc

080046f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10b      	bne.n	8004722 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	60fb      	str	r3, [r7, #12]
}
 800471c:	bf00      	nop
 800471e:	bf00      	nop
 8004720:	e7fd      	b.n	800471e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	3318      	adds	r3, #24
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fe56 	bl	80033d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800472c:	4b1d      	ldr	r3, [pc, #116]	@ (80047a4 <xTaskRemoveFromEventList+0xb0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d11d      	bne.n	8004770 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	3304      	adds	r3, #4
 8004738:	4618      	mov	r0, r3
 800473a:	f7fe fe4d 	bl	80033d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004742:	4b19      	ldr	r3, [pc, #100]	@ (80047a8 <xTaskRemoveFromEventList+0xb4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d903      	bls.n	8004752 <xTaskRemoveFromEventList+0x5e>
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	4a16      	ldr	r2, [pc, #88]	@ (80047a8 <xTaskRemoveFromEventList+0xb4>)
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4a13      	ldr	r2, [pc, #76]	@ (80047ac <xTaskRemoveFromEventList+0xb8>)
 8004760:	441a      	add	r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3304      	adds	r3, #4
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f7fe fdd8 	bl	800331e <vListInsertEnd>
 800476e:	e005      	b.n	800477c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	3318      	adds	r3, #24
 8004774:	4619      	mov	r1, r3
 8004776:	480e      	ldr	r0, [pc, #56]	@ (80047b0 <xTaskRemoveFromEventList+0xbc>)
 8004778:	f7fe fdd1 	bl	800331e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004780:	4b0c      	ldr	r3, [pc, #48]	@ (80047b4 <xTaskRemoveFromEventList+0xc0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004786:	429a      	cmp	r2, r3
 8004788:	d905      	bls.n	8004796 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800478a:	2301      	movs	r3, #1
 800478c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800478e:	4b0a      	ldr	r3, [pc, #40]	@ (80047b8 <xTaskRemoveFromEventList+0xc4>)
 8004790:	2201      	movs	r2, #1
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	e001      	b.n	800479a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800479a:	697b      	ldr	r3, [r7, #20]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20000cc8 	.word	0x20000cc8
 80047a8:	20000ca8 	.word	0x20000ca8
 80047ac:	200007d0 	.word	0x200007d0
 80047b0:	20000c60 	.word	0x20000c60
 80047b4:	200007cc 	.word	0x200007cc
 80047b8:	20000cb4 	.word	0x20000cb4

080047bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047c4:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <vTaskInternalSetTimeOutState+0x24>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047cc:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <vTaskInternalSetTimeOutState+0x28>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	605a      	str	r2, [r3, #4]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	20000cb8 	.word	0x20000cb8
 80047e4:	20000ca4 	.word	0x20000ca4

080047e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10b      	bne.n	8004810 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	613b      	str	r3, [r7, #16]
}
 800480a:	bf00      	nop
 800480c:	bf00      	nop
 800480e:	e7fd      	b.n	800480c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10b      	bne.n	800482e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	60fb      	str	r3, [r7, #12]
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	e7fd      	b.n	800482a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800482e:	f000 fe8b 	bl	8005548 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004832:	4b1d      	ldr	r3, [pc, #116]	@ (80048a8 <xTaskCheckForTimeOut+0xc0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484a:	d102      	bne.n	8004852 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	e023      	b.n	800489a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b15      	ldr	r3, [pc, #84]	@ (80048ac <xTaskCheckForTimeOut+0xc4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d007      	beq.n	800486e <xTaskCheckForTimeOut+0x86>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	429a      	cmp	r2, r3
 8004866:	d302      	bcc.n	800486e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004868:	2301      	movs	r3, #1
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	e015      	b.n	800489a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	429a      	cmp	r2, r3
 8004876:	d20b      	bcs.n	8004890 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	1ad2      	subs	r2, r2, r3
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff ff99 	bl	80047bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	e004      	b.n	800489a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004896:	2301      	movs	r3, #1
 8004898:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800489a:	f000 fe87 	bl	80055ac <vPortExitCritical>

	return xReturn;
 800489e:	69fb      	ldr	r3, [r7, #28]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000ca4 	.word	0x20000ca4
 80048ac:	20000cb8 	.word	0x20000cb8

080048b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048b4:	4b03      	ldr	r3, [pc, #12]	@ (80048c4 <vTaskMissedYield+0x14>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
}
 80048ba:	bf00      	nop
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	20000cb4 	.word	0x20000cb4

080048c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048d0:	f000 f852 	bl	8004978 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048d4:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <prvIdleTask+0x28>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d9f9      	bls.n	80048d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <prvIdleTask+0x2c>)
 80048de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048ec:	e7f0      	b.n	80048d0 <prvIdleTask+0x8>
 80048ee:	bf00      	nop
 80048f0:	200007d0 	.word	0x200007d0
 80048f4:	e000ed04 	.word	0xe000ed04

080048f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048fe:	2300      	movs	r3, #0
 8004900:	607b      	str	r3, [r7, #4]
 8004902:	e00c      	b.n	800491e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4a12      	ldr	r2, [pc, #72]	@ (8004958 <prvInitialiseTaskLists+0x60>)
 8004910:	4413      	add	r3, r2
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe fcd6 	bl	80032c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3301      	adds	r3, #1
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b37      	cmp	r3, #55	@ 0x37
 8004922:	d9ef      	bls.n	8004904 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004924:	480d      	ldr	r0, [pc, #52]	@ (800495c <prvInitialiseTaskLists+0x64>)
 8004926:	f7fe fccd 	bl	80032c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800492a:	480d      	ldr	r0, [pc, #52]	@ (8004960 <prvInitialiseTaskLists+0x68>)
 800492c:	f7fe fcca 	bl	80032c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004930:	480c      	ldr	r0, [pc, #48]	@ (8004964 <prvInitialiseTaskLists+0x6c>)
 8004932:	f7fe fcc7 	bl	80032c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004936:	480c      	ldr	r0, [pc, #48]	@ (8004968 <prvInitialiseTaskLists+0x70>)
 8004938:	f7fe fcc4 	bl	80032c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800493c:	480b      	ldr	r0, [pc, #44]	@ (800496c <prvInitialiseTaskLists+0x74>)
 800493e:	f7fe fcc1 	bl	80032c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004942:	4b0b      	ldr	r3, [pc, #44]	@ (8004970 <prvInitialiseTaskLists+0x78>)
 8004944:	4a05      	ldr	r2, [pc, #20]	@ (800495c <prvInitialiseTaskLists+0x64>)
 8004946:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004948:	4b0a      	ldr	r3, [pc, #40]	@ (8004974 <prvInitialiseTaskLists+0x7c>)
 800494a:	4a05      	ldr	r2, [pc, #20]	@ (8004960 <prvInitialiseTaskLists+0x68>)
 800494c:	601a      	str	r2, [r3, #0]
}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	200007d0 	.word	0x200007d0
 800495c:	20000c30 	.word	0x20000c30
 8004960:	20000c44 	.word	0x20000c44
 8004964:	20000c60 	.word	0x20000c60
 8004968:	20000c74 	.word	0x20000c74
 800496c:	20000c8c 	.word	0x20000c8c
 8004970:	20000c58 	.word	0x20000c58
 8004974:	20000c5c 	.word	0x20000c5c

08004978 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800497e:	e019      	b.n	80049b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004980:	f000 fde2 	bl	8005548 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004984:	4b10      	ldr	r3, [pc, #64]	@ (80049c8 <prvCheckTasksWaitingTermination+0x50>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3304      	adds	r3, #4
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe fd21 	bl	80033d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004996:	4b0d      	ldr	r3, [pc, #52]	@ (80049cc <prvCheckTasksWaitingTermination+0x54>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3b01      	subs	r3, #1
 800499c:	4a0b      	ldr	r2, [pc, #44]	@ (80049cc <prvCheckTasksWaitingTermination+0x54>)
 800499e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049a0:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <prvCheckTasksWaitingTermination+0x58>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	4a0a      	ldr	r2, [pc, #40]	@ (80049d0 <prvCheckTasksWaitingTermination+0x58>)
 80049a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049aa:	f000 fdff 	bl	80055ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f810 	bl	80049d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049b4:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <prvCheckTasksWaitingTermination+0x58>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e1      	bne.n	8004980 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000c74 	.word	0x20000c74
 80049cc:	20000ca0 	.word	0x20000ca0
 80049d0:	20000c88 	.word	0x20000c88

080049d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d108      	bne.n	80049f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 ff9c 	bl	8005928 <vPortFree>
				vPortFree( pxTCB );
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 ff99 	bl	8005928 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049f6:	e019      	b.n	8004a2c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d103      	bne.n	8004a0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 ff90 	bl	8005928 <vPortFree>
	}
 8004a08:	e010      	b.n	8004a2c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d00b      	beq.n	8004a2c <prvDeleteTCB+0x58>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	60fb      	str	r3, [r7, #12]
}
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	e7fd      	b.n	8004a28 <prvDeleteTCB+0x54>
	}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a6c <prvResetNextTaskUnblockTime+0x38>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a44:	4b0a      	ldr	r3, [pc, #40]	@ (8004a70 <prvResetNextTaskUnblockTime+0x3c>)
 8004a46:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a4c:	e008      	b.n	8004a60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a4e:	4b07      	ldr	r3, [pc, #28]	@ (8004a6c <prvResetNextTaskUnblockTime+0x38>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4a04      	ldr	r2, [pc, #16]	@ (8004a70 <prvResetNextTaskUnblockTime+0x3c>)
 8004a5e:	6013      	str	r3, [r2, #0]
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	20000c58 	.word	0x20000c58
 8004a70:	20000cc0 	.word	0x20000cc0

08004a74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa8 <xTaskGetSchedulerState+0x34>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a82:	2301      	movs	r3, #1
 8004a84:	607b      	str	r3, [r7, #4]
 8004a86:	e008      	b.n	8004a9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a88:	4b08      	ldr	r3, [pc, #32]	@ (8004aac <xTaskGetSchedulerState+0x38>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a90:	2302      	movs	r3, #2
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	e001      	b.n	8004a9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a96:	2300      	movs	r3, #0
 8004a98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a9a:	687b      	ldr	r3, [r7, #4]
	}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	20000cac 	.word	0x20000cac
 8004aac:	20000cc8 	.word	0x20000cc8

08004ab0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d058      	beq.n	8004b78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8004b84 <xTaskPriorityDisinherit+0xd4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d00b      	beq.n	8004ae8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	60fb      	str	r3, [r7, #12]
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10b      	bne.n	8004b08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60bb      	str	r3, [r7, #8]
}
 8004b02:	bf00      	nop
 8004b04:	bf00      	nop
 8004b06:	e7fd      	b.n	8004b04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b0c:	1e5a      	subs	r2, r3, #1
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d02c      	beq.n	8004b78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d128      	bne.n	8004b78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fc54 	bl	80033d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b48:	4b0f      	ldr	r3, [pc, #60]	@ (8004b88 <xTaskPriorityDisinherit+0xd8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d903      	bls.n	8004b58 <xTaskPriorityDisinherit+0xa8>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b54:	4a0c      	ldr	r2, [pc, #48]	@ (8004b88 <xTaskPriorityDisinherit+0xd8>)
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4a09      	ldr	r2, [pc, #36]	@ (8004b8c <xTaskPriorityDisinherit+0xdc>)
 8004b66:	441a      	add	r2, r3
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	f7fe fbd5 	bl	800331e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b74:	2301      	movs	r3, #1
 8004b76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b78:	697b      	ldr	r3, [r7, #20]
	}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	200007cc 	.word	0x200007cc
 8004b88:	20000ca8 	.word	0x20000ca8
 8004b8c:	200007d0 	.word	0x200007d0

08004b90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b9a:	4b21      	ldr	r3, [pc, #132]	@ (8004c20 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ba0:	4b20      	ldr	r3, [pc, #128]	@ (8004c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fe fc16 	bl	80033d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d10a      	bne.n	8004bca <prvAddCurrentTaskToDelayedList+0x3a>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d007      	beq.n	8004bca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bba:	4b1a      	ldr	r3, [pc, #104]	@ (8004c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4819      	ldr	r0, [pc, #100]	@ (8004c28 <prvAddCurrentTaskToDelayedList+0x98>)
 8004bc4:	f7fe fbab 	bl	800331e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bc8:	e026      	b.n	8004c18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4413      	add	r3, r2
 8004bd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bd2:	4b14      	ldr	r3, [pc, #80]	@ (8004c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d209      	bcs.n	8004bf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004be2:	4b12      	ldr	r3, [pc, #72]	@ (8004c2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3304      	adds	r3, #4
 8004bec:	4619      	mov	r1, r3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	f7fe fbb9 	bl	8003366 <vListInsert>
}
 8004bf4:	e010      	b.n	8004c18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8004c30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4619      	mov	r1, r3
 8004c02:	4610      	mov	r0, r2
 8004c04:	f7fe fbaf 	bl	8003366 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c08:	4b0a      	ldr	r3, [pc, #40]	@ (8004c34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d202      	bcs.n	8004c18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c12:	4a08      	ldr	r2, [pc, #32]	@ (8004c34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	6013      	str	r3, [r2, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20000ca4 	.word	0x20000ca4
 8004c24:	200007cc 	.word	0x200007cc
 8004c28:	20000c8c 	.word	0x20000c8c
 8004c2c:	20000c5c 	.word	0x20000c5c
 8004c30:	20000c58 	.word	0x20000c58
 8004c34:	20000cc0 	.word	0x20000cc0

08004c38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	@ 0x28
 8004c3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c42:	f000 fb13 	bl	800526c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c46:	4b1d      	ldr	r3, [pc, #116]	@ (8004cbc <xTimerCreateTimerTask+0x84>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d021      	beq.n	8004c92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c56:	1d3a      	adds	r2, r7, #4
 8004c58:	f107 0108 	add.w	r1, r7, #8
 8004c5c:	f107 030c 	add.w	r3, r7, #12
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fe fb15 	bl	8003290 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	9202      	str	r2, [sp, #8]
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	2302      	movs	r3, #2
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	2300      	movs	r3, #0
 8004c76:	460a      	mov	r2, r1
 8004c78:	4911      	ldr	r1, [pc, #68]	@ (8004cc0 <xTimerCreateTimerTask+0x88>)
 8004c7a:	4812      	ldr	r0, [pc, #72]	@ (8004cc4 <xTimerCreateTimerTask+0x8c>)
 8004c7c:	f7ff f8d0 	bl	8003e20 <xTaskCreateStatic>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4a11      	ldr	r2, [pc, #68]	@ (8004cc8 <xTimerCreateTimerTask+0x90>)
 8004c84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c86:	4b10      	ldr	r3, [pc, #64]	@ (8004cc8 <xTimerCreateTimerTask+0x90>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10b      	bne.n	8004cb0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	613b      	str	r3, [r7, #16]
}
 8004caa:	bf00      	nop
 8004cac:	bf00      	nop
 8004cae:	e7fd      	b.n	8004cac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004cb0:	697b      	ldr	r3, [r7, #20]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000cfc 	.word	0x20000cfc
 8004cc0:	08005c08 	.word	0x08005c08
 8004cc4:	08004e05 	.word	0x08004e05
 8004cc8:	20000d00 	.word	0x20000d00

08004ccc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	@ 0x28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <xTimerGenericCommand+0x30>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	623b      	str	r3, [r7, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	bf00      	nop
 8004cfa:	e7fd      	b.n	8004cf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cfc:	4b19      	ldr	r3, [pc, #100]	@ (8004d64 <xTimerGenericCommand+0x98>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d02a      	beq.n	8004d5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b05      	cmp	r3, #5
 8004d14:	dc18      	bgt.n	8004d48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d16:	f7ff fead 	bl	8004a74 <xTaskGetSchedulerState>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d109      	bne.n	8004d34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d20:	4b10      	ldr	r3, [pc, #64]	@ (8004d64 <xTimerGenericCommand+0x98>)
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	f107 0110 	add.w	r1, r7, #16
 8004d28:	2300      	movs	r3, #0
 8004d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d2c:	f7fe fc88 	bl	8003640 <xQueueGenericSend>
 8004d30:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d32:	e012      	b.n	8004d5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d34:	4b0b      	ldr	r3, [pc, #44]	@ (8004d64 <xTimerGenericCommand+0x98>)
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	f107 0110 	add.w	r1, r7, #16
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f7fe fc7e 	bl	8003640 <xQueueGenericSend>
 8004d44:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d46:	e008      	b.n	8004d5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d48:	4b06      	ldr	r3, [pc, #24]	@ (8004d64 <xTimerGenericCommand+0x98>)
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	f107 0110 	add.w	r1, r7, #16
 8004d50:	2300      	movs	r3, #0
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	f7fe fd76 	bl	8003844 <xQueueGenericSendFromISR>
 8004d58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3728      	adds	r7, #40	@ 0x28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	20000cfc 	.word	0x20000cfc

08004d68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d72:	4b23      	ldr	r3, [pc, #140]	@ (8004e00 <prvProcessExpiredTimer+0x98>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fe fb29 	bl	80033d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d023      	beq.n	8004ddc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	18d1      	adds	r1, r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	6978      	ldr	r0, [r7, #20]
 8004da2:	f000 f8d5 	bl	8004f50 <prvInsertTimerInActiveList>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d020      	beq.n	8004dee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004dac:	2300      	movs	r3, #0
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	2300      	movs	r3, #0
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	2100      	movs	r1, #0
 8004db6:	6978      	ldr	r0, [r7, #20]
 8004db8:	f7ff ff88 	bl	8004ccc <xTimerGenericCommand>
 8004dbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d114      	bne.n	8004dee <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	60fb      	str	r3, [r7, #12]
}
 8004dd6:	bf00      	nop
 8004dd8:	bf00      	nop
 8004dda:	e7fd      	b.n	8004dd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004de2:	f023 0301 	bic.w	r3, r3, #1
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	6978      	ldr	r0, [r7, #20]
 8004df4:	4798      	blx	r3
}
 8004df6:	bf00      	nop
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000cf4 	.word	0x20000cf4

08004e04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e0c:	f107 0308 	add.w	r3, r7, #8
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 f859 	bl	8004ec8 <prvGetNextExpireTime>
 8004e16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f805 	bl	8004e2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e22:	f000 f8d7 	bl	8004fd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e26:	bf00      	nop
 8004e28:	e7f0      	b.n	8004e0c <prvTimerTask+0x8>
	...

08004e2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e36:	f7ff fa37 	bl	80042a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e3a:	f107 0308 	add.w	r3, r7, #8
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f866 	bl	8004f10 <prvSampleTimeNow>
 8004e44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d130      	bne.n	8004eae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <prvProcessTimerOrBlockTask+0x3c>
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d806      	bhi.n	8004e68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e5a:	f7ff fa33 	bl	80042c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e5e:	68f9      	ldr	r1, [r7, #12]
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff ff81 	bl	8004d68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e66:	e024      	b.n	8004eb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e6e:	4b13      	ldr	r3, [pc, #76]	@ (8004ebc <prvProcessTimerOrBlockTask+0x90>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <prvProcessTimerOrBlockTask+0x50>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <prvProcessTimerOrBlockTask+0x52>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e80:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec0 <prvProcessTimerOrBlockTask+0x94>)
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	f7fe ff93 	bl	8003db8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e92:	f7ff fa17 	bl	80042c4 <xTaskResumeAll>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <prvProcessTimerOrBlockTask+0x98>)
 8004e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	f3bf 8f6f 	isb	sy
}
 8004eac:	e001      	b.n	8004eb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004eae:	f7ff fa09 	bl	80042c4 <xTaskResumeAll>
}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000cf8 	.word	0x20000cf8
 8004ec0:	20000cfc 	.word	0x20000cfc
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8004f0c <prvGetNextExpireTime+0x44>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <prvGetNextExpireTime+0x16>
 8004eda:	2201      	movs	r2, #1
 8004edc:	e000      	b.n	8004ee0 <prvGetNextExpireTime+0x18>
 8004ede:	2200      	movs	r2, #0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d105      	bne.n	8004ef8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eec:	4b07      	ldr	r3, [pc, #28]	@ (8004f0c <prvGetNextExpireTime+0x44>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e001      	b.n	8004efc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004efc:	68fb      	ldr	r3, [r7, #12]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	20000cf4 	.word	0x20000cf4

08004f10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f18:	f7ff fa72 	bl	8004400 <xTaskGetTickCount>
 8004f1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <prvSampleTimeNow+0x3c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d205      	bcs.n	8004f34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f28:	f000 f93a 	bl	80051a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	e002      	b.n	8004f3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f3a:	4a04      	ldr	r2, [pc, #16]	@ (8004f4c <prvSampleTimeNow+0x3c>)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f40:	68fb      	ldr	r3, [r7, #12]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000d04 	.word	0x20000d04

08004f50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d812      	bhi.n	8004f9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	1ad2      	subs	r2, r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d302      	bcc.n	8004f8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f84:	2301      	movs	r3, #1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e01b      	b.n	8004fc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f8a:	4b10      	ldr	r3, [pc, #64]	@ (8004fcc <prvInsertTimerInActiveList+0x7c>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4610      	mov	r0, r2
 8004f96:	f7fe f9e6 	bl	8003366 <vListInsert>
 8004f9a:	e012      	b.n	8004fc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d206      	bcs.n	8004fb2 <prvInsertTimerInActiveList+0x62>
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d302      	bcc.n	8004fb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004fac:	2301      	movs	r3, #1
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	e007      	b.n	8004fc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fb2:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <prvInsertTimerInActiveList+0x80>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f7fe f9d2 	bl	8003366 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004fc2:	697b      	ldr	r3, [r7, #20]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000cf8 	.word	0x20000cf8
 8004fd0:	20000cf4 	.word	0x20000cf4

08004fd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08e      	sub	sp, #56	@ 0x38
 8004fd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fda:	e0ce      	b.n	800517a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	da19      	bge.n	8005016 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004fe2:	1d3b      	adds	r3, r7, #4
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10b      	bne.n	8005006 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	61fb      	str	r3, [r7, #28]
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	e7fd      	b.n	8005002 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800500c:	6850      	ldr	r0, [r2, #4]
 800500e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005010:	6892      	ldr	r2, [r2, #8]
 8005012:	4611      	mov	r1, r2
 8005014:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	f2c0 80ae 	blt.w	800517a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d004      	beq.n	8005034 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800502a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502c:	3304      	adds	r3, #4
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe f9d2 	bl	80033d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005034:	463b      	mov	r3, r7
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff ff6a 	bl	8004f10 <prvSampleTimeNow>
 800503c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b09      	cmp	r3, #9
 8005042:	f200 8097 	bhi.w	8005174 <prvProcessReceivedCommands+0x1a0>
 8005046:	a201      	add	r2, pc, #4	@ (adr r2, 800504c <prvProcessReceivedCommands+0x78>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	08005075 	.word	0x08005075
 8005050:	08005075 	.word	0x08005075
 8005054:	08005075 	.word	0x08005075
 8005058:	080050eb 	.word	0x080050eb
 800505c:	080050ff 	.word	0x080050ff
 8005060:	0800514b 	.word	0x0800514b
 8005064:	08005075 	.word	0x08005075
 8005068:	08005075 	.word	0x08005075
 800506c:	080050eb 	.word	0x080050eb
 8005070:	080050ff 	.word	0x080050ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005076:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	b2da      	uxtb	r2, r3
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	18d1      	adds	r1, r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005092:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005094:	f7ff ff5c 	bl	8004f50 <prvInsertTimerInActiveList>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d06c      	beq.n	8005178 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800509e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d061      	beq.n	8005178 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	441a      	add	r2, r3
 80050bc:	2300      	movs	r3, #0
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	2300      	movs	r3, #0
 80050c2:	2100      	movs	r1, #0
 80050c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050c6:	f7ff fe01 	bl	8004ccc <xTimerGenericCommand>
 80050ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d152      	bne.n	8005178 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	61bb      	str	r3, [r7, #24]
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
 80050e8:	e7fd      	b.n	80050e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050f0:	f023 0301 	bic.w	r3, r3, #1
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80050fc:	e03d      	b.n	800517a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	b2da      	uxtb	r2, r3
 800510a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005114:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10b      	bne.n	8005136 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	617b      	str	r3, [r7, #20]
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	e7fd      	b.n	8005132 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	18d1      	adds	r1, r2, r3
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005144:	f7ff ff04 	bl	8004f50 <prvInsertTimerInActiveList>
					break;
 8005148:	e017      	b.n	800517a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d103      	bne.n	8005160 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005158:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800515a:	f000 fbe5 	bl	8005928 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800515e:	e00c      	b.n	800517a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005162:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005166:	f023 0301 	bic.w	r3, r3, #1
 800516a:	b2da      	uxtb	r2, r3
 800516c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005172:	e002      	b.n	800517a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005174:	bf00      	nop
 8005176:	e000      	b.n	800517a <prvProcessReceivedCommands+0x1a6>
					break;
 8005178:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800517a:	4b08      	ldr	r3, [pc, #32]	@ (800519c <prvProcessReceivedCommands+0x1c8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	1d39      	adds	r1, r7, #4
 8005180:	2200      	movs	r2, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe fbfc 	bl	8003980 <xQueueReceive>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	f47f af26 	bne.w	8004fdc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	3730      	adds	r7, #48	@ 0x30
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000cfc 	.word	0x20000cfc

080051a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051a6:	e049      	b.n	800523c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005264 <prvSwitchTimerLists+0xc4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005264 <prvSwitchTimerLists+0xc4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3304      	adds	r3, #4
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe f909 	bl	80033d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d02f      	beq.n	800523c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d90e      	bls.n	800520c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005264 <prvSwitchTimerLists+0xc4>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3304      	adds	r3, #4
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f7fe f8ae 	bl	8003366 <vListInsert>
 800520a:	e017      	b.n	800523c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800520c:	2300      	movs	r3, #0
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	2300      	movs	r3, #0
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	2100      	movs	r1, #0
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7ff fd58 	bl	8004ccc <xTimerGenericCommand>
 800521c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	603b      	str	r3, [r7, #0]
}
 8005236:	bf00      	nop
 8005238:	bf00      	nop
 800523a:	e7fd      	b.n	8005238 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800523c:	4b09      	ldr	r3, [pc, #36]	@ (8005264 <prvSwitchTimerLists+0xc4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1b0      	bne.n	80051a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005246:	4b07      	ldr	r3, [pc, #28]	@ (8005264 <prvSwitchTimerLists+0xc4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800524c:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <prvSwitchTimerLists+0xc8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a04      	ldr	r2, [pc, #16]	@ (8005264 <prvSwitchTimerLists+0xc4>)
 8005252:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005254:	4a04      	ldr	r2, [pc, #16]	@ (8005268 <prvSwitchTimerLists+0xc8>)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	6013      	str	r3, [r2, #0]
}
 800525a:	bf00      	nop
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000cf4 	.word	0x20000cf4
 8005268:	20000cf8 	.word	0x20000cf8

0800526c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005272:	f000 f969 	bl	8005548 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005276:	4b15      	ldr	r3, [pc, #84]	@ (80052cc <prvCheckForValidListAndQueue+0x60>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d120      	bne.n	80052c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800527e:	4814      	ldr	r0, [pc, #80]	@ (80052d0 <prvCheckForValidListAndQueue+0x64>)
 8005280:	f7fe f820 	bl	80032c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005284:	4813      	ldr	r0, [pc, #76]	@ (80052d4 <prvCheckForValidListAndQueue+0x68>)
 8005286:	f7fe f81d 	bl	80032c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800528a:	4b13      	ldr	r3, [pc, #76]	@ (80052d8 <prvCheckForValidListAndQueue+0x6c>)
 800528c:	4a10      	ldr	r2, [pc, #64]	@ (80052d0 <prvCheckForValidListAndQueue+0x64>)
 800528e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005290:	4b12      	ldr	r3, [pc, #72]	@ (80052dc <prvCheckForValidListAndQueue+0x70>)
 8005292:	4a10      	ldr	r2, [pc, #64]	@ (80052d4 <prvCheckForValidListAndQueue+0x68>)
 8005294:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005296:	2300      	movs	r3, #0
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	4b11      	ldr	r3, [pc, #68]	@ (80052e0 <prvCheckForValidListAndQueue+0x74>)
 800529c:	4a11      	ldr	r2, [pc, #68]	@ (80052e4 <prvCheckForValidListAndQueue+0x78>)
 800529e:	2110      	movs	r1, #16
 80052a0:	200a      	movs	r0, #10
 80052a2:	f7fe f92d 	bl	8003500 <xQueueGenericCreateStatic>
 80052a6:	4603      	mov	r3, r0
 80052a8:	4a08      	ldr	r2, [pc, #32]	@ (80052cc <prvCheckForValidListAndQueue+0x60>)
 80052aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052ac:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <prvCheckForValidListAndQueue+0x60>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052b4:	4b05      	ldr	r3, [pc, #20]	@ (80052cc <prvCheckForValidListAndQueue+0x60>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	490b      	ldr	r1, [pc, #44]	@ (80052e8 <prvCheckForValidListAndQueue+0x7c>)
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fe fd52 	bl	8003d64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052c0:	f000 f974 	bl	80055ac <vPortExitCritical>
}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000cfc 	.word	0x20000cfc
 80052d0:	20000ccc 	.word	0x20000ccc
 80052d4:	20000ce0 	.word	0x20000ce0
 80052d8:	20000cf4 	.word	0x20000cf4
 80052dc:	20000cf8 	.word	0x20000cf8
 80052e0:	20000da8 	.word	0x20000da8
 80052e4:	20000d08 	.word	0x20000d08
 80052e8:	08005c10 	.word	0x08005c10

080052ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3b04      	subs	r3, #4
 80052fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3b04      	subs	r3, #4
 800530a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f023 0201 	bic.w	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3b04      	subs	r3, #4
 800531a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800531c:	4a0c      	ldr	r2, [pc, #48]	@ (8005350 <pxPortInitialiseStack+0x64>)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3b14      	subs	r3, #20
 8005326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3b04      	subs	r3, #4
 8005332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f06f 0202 	mvn.w	r2, #2
 800533a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3b20      	subs	r3, #32
 8005340:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005342:	68fb      	ldr	r3, [r7, #12]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	08005355 	.word	0x08005355

08005354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800535e:	4b13      	ldr	r3, [pc, #76]	@ (80053ac <prvTaskExitError+0x58>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005366:	d00b      	beq.n	8005380 <prvTaskExitError+0x2c>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	60fb      	str	r3, [r7, #12]
}
 800537a:	bf00      	nop
 800537c:	bf00      	nop
 800537e:	e7fd      	b.n	800537c <prvTaskExitError+0x28>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	60bb      	str	r3, [r7, #8]
}
 8005392:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005394:	bf00      	nop
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0fc      	beq.n	8005396 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	20000020 	.word	0x20000020

080053b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053b0:	4b07      	ldr	r3, [pc, #28]	@ (80053d0 <pxCurrentTCBConst2>)
 80053b2:	6819      	ldr	r1, [r3, #0]
 80053b4:	6808      	ldr	r0, [r1, #0]
 80053b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ba:	f380 8809 	msr	PSP, r0
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f380 8811 	msr	BASEPRI, r0
 80053ca:	4770      	bx	lr
 80053cc:	f3af 8000 	nop.w

080053d0 <pxCurrentTCBConst2>:
 80053d0:	200007cc 	.word	0x200007cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop

080053d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053d8:	4808      	ldr	r0, [pc, #32]	@ (80053fc <prvPortStartFirstTask+0x24>)
 80053da:	6800      	ldr	r0, [r0, #0]
 80053dc:	6800      	ldr	r0, [r0, #0]
 80053de:	f380 8808 	msr	MSP, r0
 80053e2:	f04f 0000 	mov.w	r0, #0
 80053e6:	f380 8814 	msr	CONTROL, r0
 80053ea:	b662      	cpsie	i
 80053ec:	b661      	cpsie	f
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	df00      	svc	0
 80053f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053fa:	bf00      	nop
 80053fc:	e000ed08 	.word	0xe000ed08

08005400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005406:	4b47      	ldr	r3, [pc, #284]	@ (8005524 <xPortStartScheduler+0x124>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a47      	ldr	r2, [pc, #284]	@ (8005528 <xPortStartScheduler+0x128>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d10b      	bne.n	8005428 <xPortStartScheduler+0x28>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	613b      	str	r3, [r7, #16]
}
 8005422:	bf00      	nop
 8005424:	bf00      	nop
 8005426:	e7fd      	b.n	8005424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005428:	4b3e      	ldr	r3, [pc, #248]	@ (8005524 <xPortStartScheduler+0x124>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a3f      	ldr	r2, [pc, #252]	@ (800552c <xPortStartScheduler+0x12c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d10b      	bne.n	800544a <xPortStartScheduler+0x4a>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	60fb      	str	r3, [r7, #12]
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop
 8005448:	e7fd      	b.n	8005446 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800544a:	4b39      	ldr	r3, [pc, #228]	@ (8005530 <xPortStartScheduler+0x130>)
 800544c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	22ff      	movs	r2, #255	@ 0xff
 800545a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800546c:	b2da      	uxtb	r2, r3
 800546e:	4b31      	ldr	r3, [pc, #196]	@ (8005534 <xPortStartScheduler+0x134>)
 8005470:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005472:	4b31      	ldr	r3, [pc, #196]	@ (8005538 <xPortStartScheduler+0x138>)
 8005474:	2207      	movs	r2, #7
 8005476:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005478:	e009      	b.n	800548e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800547a:	4b2f      	ldr	r3, [pc, #188]	@ (8005538 <xPortStartScheduler+0x138>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3b01      	subs	r3, #1
 8005480:	4a2d      	ldr	r2, [pc, #180]	@ (8005538 <xPortStartScheduler+0x138>)
 8005482:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	b2db      	uxtb	r3, r3
 800548c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005496:	2b80      	cmp	r3, #128	@ 0x80
 8005498:	d0ef      	beq.n	800547a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800549a:	4b27      	ldr	r3, [pc, #156]	@ (8005538 <xPortStartScheduler+0x138>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f1c3 0307 	rsb	r3, r3, #7
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d00b      	beq.n	80054be <xPortStartScheduler+0xbe>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	60bb      	str	r3, [r7, #8]
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	e7fd      	b.n	80054ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054be:	4b1e      	ldr	r3, [pc, #120]	@ (8005538 <xPortStartScheduler+0x138>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005538 <xPortStartScheduler+0x138>)
 80054c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005538 <xPortStartScheduler+0x138>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054d0:	4a19      	ldr	r2, [pc, #100]	@ (8005538 <xPortStartScheduler+0x138>)
 80054d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054dc:	4b17      	ldr	r3, [pc, #92]	@ (800553c <xPortStartScheduler+0x13c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a16      	ldr	r2, [pc, #88]	@ (800553c <xPortStartScheduler+0x13c>)
 80054e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054e8:	4b14      	ldr	r3, [pc, #80]	@ (800553c <xPortStartScheduler+0x13c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a13      	ldr	r2, [pc, #76]	@ (800553c <xPortStartScheduler+0x13c>)
 80054ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80054f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054f4:	f000 f8da 	bl	80056ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054f8:	4b11      	ldr	r3, [pc, #68]	@ (8005540 <xPortStartScheduler+0x140>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054fe:	f000 f8f9 	bl	80056f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005502:	4b10      	ldr	r3, [pc, #64]	@ (8005544 <xPortStartScheduler+0x144>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a0f      	ldr	r2, [pc, #60]	@ (8005544 <xPortStartScheduler+0x144>)
 8005508:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800550c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800550e:	f7ff ff63 	bl	80053d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005512:	f7ff f83f 	bl	8004594 <vTaskSwitchContext>
	prvTaskExitError();
 8005516:	f7ff ff1d 	bl	8005354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	e000ed00 	.word	0xe000ed00
 8005528:	410fc271 	.word	0x410fc271
 800552c:	410fc270 	.word	0x410fc270
 8005530:	e000e400 	.word	0xe000e400
 8005534:	20000df8 	.word	0x20000df8
 8005538:	20000dfc 	.word	0x20000dfc
 800553c:	e000ed20 	.word	0xe000ed20
 8005540:	20000020 	.word	0x20000020
 8005544:	e000ef34 	.word	0xe000ef34

08005548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	607b      	str	r3, [r7, #4]
}
 8005560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005562:	4b10      	ldr	r3, [pc, #64]	@ (80055a4 <vPortEnterCritical+0x5c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3301      	adds	r3, #1
 8005568:	4a0e      	ldr	r2, [pc, #56]	@ (80055a4 <vPortEnterCritical+0x5c>)
 800556a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800556c:	4b0d      	ldr	r3, [pc, #52]	@ (80055a4 <vPortEnterCritical+0x5c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d110      	bne.n	8005596 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005574:	4b0c      	ldr	r3, [pc, #48]	@ (80055a8 <vPortEnterCritical+0x60>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <vPortEnterCritical+0x4e>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	603b      	str	r3, [r7, #0]
}
 8005590:	bf00      	nop
 8005592:	bf00      	nop
 8005594:	e7fd      	b.n	8005592 <vPortEnterCritical+0x4a>
	}
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000020 	.word	0x20000020
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055b2:	4b12      	ldr	r3, [pc, #72]	@ (80055fc <vPortExitCritical+0x50>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10b      	bne.n	80055d2 <vPortExitCritical+0x26>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	607b      	str	r3, [r7, #4]
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	e7fd      	b.n	80055ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055d2:	4b0a      	ldr	r3, [pc, #40]	@ (80055fc <vPortExitCritical+0x50>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	4a08      	ldr	r2, [pc, #32]	@ (80055fc <vPortExitCritical+0x50>)
 80055da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055dc:	4b07      	ldr	r3, [pc, #28]	@ (80055fc <vPortExitCritical+0x50>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <vPortExitCritical+0x44>
 80055e4:	2300      	movs	r3, #0
 80055e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	f383 8811 	msr	BASEPRI, r3
}
 80055ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	20000020 	.word	0x20000020

08005600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005600:	f3ef 8009 	mrs	r0, PSP
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	4b15      	ldr	r3, [pc, #84]	@ (8005660 <pxCurrentTCBConst>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	f01e 0f10 	tst.w	lr, #16
 8005610:	bf08      	it	eq
 8005612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561a:	6010      	str	r0, [r2, #0]
 800561c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005620:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005624:	f380 8811 	msr	BASEPRI, r0
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f7fe ffb0 	bl	8004594 <vTaskSwitchContext>
 8005634:	f04f 0000 	mov.w	r0, #0
 8005638:	f380 8811 	msr	BASEPRI, r0
 800563c:	bc09      	pop	{r0, r3}
 800563e:	6819      	ldr	r1, [r3, #0]
 8005640:	6808      	ldr	r0, [r1, #0]
 8005642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005646:	f01e 0f10 	tst.w	lr, #16
 800564a:	bf08      	it	eq
 800564c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005650:	f380 8809 	msr	PSP, r0
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	f3af 8000 	nop.w

08005660 <pxCurrentTCBConst>:
 8005660:	200007cc 	.word	0x200007cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop

08005668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	607b      	str	r3, [r7, #4]
}
 8005680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005682:	f7fe fecd 	bl	8004420 <xTaskIncrementTick>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800568c:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <xPortSysTickHandler+0x40>)
 800568e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	2300      	movs	r3, #0
 8005696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f383 8811 	msr	BASEPRI, r3
}
 800569e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056b0:	4b0b      	ldr	r3, [pc, #44]	@ (80056e0 <vPortSetupTimerInterrupt+0x34>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056b6:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <vPortSetupTimerInterrupt+0x38>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056bc:	4b0a      	ldr	r3, [pc, #40]	@ (80056e8 <vPortSetupTimerInterrupt+0x3c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a0a      	ldr	r2, [pc, #40]	@ (80056ec <vPortSetupTimerInterrupt+0x40>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	099b      	lsrs	r3, r3, #6
 80056c8:	4a09      	ldr	r2, [pc, #36]	@ (80056f0 <vPortSetupTimerInterrupt+0x44>)
 80056ca:	3b01      	subs	r3, #1
 80056cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056ce:	4b04      	ldr	r3, [pc, #16]	@ (80056e0 <vPortSetupTimerInterrupt+0x34>)
 80056d0:	2207      	movs	r2, #7
 80056d2:	601a      	str	r2, [r3, #0]
}
 80056d4:	bf00      	nop
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	e000e010 	.word	0xe000e010
 80056e4:	e000e018 	.word	0xe000e018
 80056e8:	20000014 	.word	0x20000014
 80056ec:	10624dd3 	.word	0x10624dd3
 80056f0:	e000e014 	.word	0xe000e014

080056f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005704 <vPortEnableVFP+0x10>
 80056f8:	6801      	ldr	r1, [r0, #0]
 80056fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80056fe:	6001      	str	r1, [r0, #0]
 8005700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005702:	bf00      	nop
 8005704:	e000ed88 	.word	0xe000ed88

08005708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800570e:	f3ef 8305 	mrs	r3, IPSR
 8005712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b0f      	cmp	r3, #15
 8005718:	d915      	bls.n	8005746 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800571a:	4a18      	ldr	r2, [pc, #96]	@ (800577c <vPortValidateInterruptPriority+0x74>)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005724:	4b16      	ldr	r3, [pc, #88]	@ (8005780 <vPortValidateInterruptPriority+0x78>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	7afa      	ldrb	r2, [r7, #11]
 800572a:	429a      	cmp	r2, r3
 800572c:	d20b      	bcs.n	8005746 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	607b      	str	r3, [r7, #4]
}
 8005740:	bf00      	nop
 8005742:	bf00      	nop
 8005744:	e7fd      	b.n	8005742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005746:	4b0f      	ldr	r3, [pc, #60]	@ (8005784 <vPortValidateInterruptPriority+0x7c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800574e:	4b0e      	ldr	r3, [pc, #56]	@ (8005788 <vPortValidateInterruptPriority+0x80>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d90b      	bls.n	800576e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	603b      	str	r3, [r7, #0]
}
 8005768:	bf00      	nop
 800576a:	bf00      	nop
 800576c:	e7fd      	b.n	800576a <vPortValidateInterruptPriority+0x62>
	}
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	e000e3f0 	.word	0xe000e3f0
 8005780:	20000df8 	.word	0x20000df8
 8005784:	e000ed0c 	.word	0xe000ed0c
 8005788:	20000dfc 	.word	0x20000dfc

0800578c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	@ 0x28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005794:	2300      	movs	r3, #0
 8005796:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005798:	f7fe fd86 	bl	80042a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800579c:	4b5c      	ldr	r3, [pc, #368]	@ (8005910 <pvPortMalloc+0x184>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057a4:	f000 f924 	bl	80059f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005914 <pvPortMalloc+0x188>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f040 8095 	bne.w	80058e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01e      	beq.n	80057fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80057bc:	2208      	movs	r2, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d015      	beq.n	80057fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f023 0307 	bic.w	r3, r3, #7
 80057d4:	3308      	adds	r3, #8
 80057d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <pvPortMalloc+0x6e>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	617b      	str	r3, [r7, #20]
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop
 80057f8:	e7fd      	b.n	80057f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d06f      	beq.n	80058e0 <pvPortMalloc+0x154>
 8005800:	4b45      	ldr	r3, [pc, #276]	@ (8005918 <pvPortMalloc+0x18c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	429a      	cmp	r2, r3
 8005808:	d86a      	bhi.n	80058e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800580a:	4b44      	ldr	r3, [pc, #272]	@ (800591c <pvPortMalloc+0x190>)
 800580c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800580e:	4b43      	ldr	r3, [pc, #268]	@ (800591c <pvPortMalloc+0x190>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005814:	e004      	b.n	8005820 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	429a      	cmp	r2, r3
 8005828:	d903      	bls.n	8005832 <pvPortMalloc+0xa6>
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f1      	bne.n	8005816 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005832:	4b37      	ldr	r3, [pc, #220]	@ (8005910 <pvPortMalloc+0x184>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005838:	429a      	cmp	r2, r3
 800583a:	d051      	beq.n	80058e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2208      	movs	r2, #8
 8005842:	4413      	add	r3, r2
 8005844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	1ad2      	subs	r2, r2, r3
 8005856:	2308      	movs	r3, #8
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	429a      	cmp	r2, r3
 800585c:	d920      	bls.n	80058a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800585e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4413      	add	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00b      	beq.n	8005888 <pvPortMalloc+0xfc>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	613b      	str	r3, [r7, #16]
}
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	1ad2      	subs	r2, r2, r3
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800589a:	69b8      	ldr	r0, [r7, #24]
 800589c:	f000 f90a 	bl	8005ab4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005918 <pvPortMalloc+0x18c>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005918 <pvPortMalloc+0x18c>)
 80058ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005918 <pvPortMalloc+0x18c>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005920 <pvPortMalloc+0x194>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d203      	bcs.n	80058c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058ba:	4b17      	ldr	r3, [pc, #92]	@ (8005918 <pvPortMalloc+0x18c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a18      	ldr	r2, [pc, #96]	@ (8005920 <pvPortMalloc+0x194>)
 80058c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	4b13      	ldr	r3, [pc, #76]	@ (8005914 <pvPortMalloc+0x188>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058d6:	4b13      	ldr	r3, [pc, #76]	@ (8005924 <pvPortMalloc+0x198>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3301      	adds	r3, #1
 80058dc:	4a11      	ldr	r2, [pc, #68]	@ (8005924 <pvPortMalloc+0x198>)
 80058de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058e0:	f7fe fcf0 	bl	80042c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <pvPortMalloc+0x17a>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	60fb      	str	r3, [r7, #12]
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	e7fd      	b.n	8005902 <pvPortMalloc+0x176>
	return pvReturn;
 8005906:	69fb      	ldr	r3, [r7, #28]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3728      	adds	r7, #40	@ 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	200019c0 	.word	0x200019c0
 8005914:	200019d4 	.word	0x200019d4
 8005918:	200019c4 	.word	0x200019c4
 800591c:	200019b8 	.word	0x200019b8
 8005920:	200019c8 	.word	0x200019c8
 8005924:	200019cc 	.word	0x200019cc

08005928 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d04f      	beq.n	80059da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800593a:	2308      	movs	r3, #8
 800593c:	425b      	negs	r3, r3
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	4413      	add	r3, r2
 8005942:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	4b25      	ldr	r3, [pc, #148]	@ (80059e4 <vPortFree+0xbc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4013      	ands	r3, r2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10b      	bne.n	800596e <vPortFree+0x46>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	60fb      	str	r3, [r7, #12]
}
 8005968:	bf00      	nop
 800596a:	bf00      	nop
 800596c:	e7fd      	b.n	800596a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00b      	beq.n	800598e <vPortFree+0x66>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	60bb      	str	r3, [r7, #8]
}
 8005988:	bf00      	nop
 800598a:	bf00      	nop
 800598c:	e7fd      	b.n	800598a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	4b14      	ldr	r3, [pc, #80]	@ (80059e4 <vPortFree+0xbc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4013      	ands	r3, r2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01e      	beq.n	80059da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d11a      	bne.n	80059da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	4b0e      	ldr	r3, [pc, #56]	@ (80059e4 <vPortFree+0xbc>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	43db      	mvns	r3, r3
 80059ae:	401a      	ands	r2, r3
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059b4:	f7fe fc78 	bl	80042a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	4b0a      	ldr	r3, [pc, #40]	@ (80059e8 <vPortFree+0xc0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4413      	add	r3, r2
 80059c2:	4a09      	ldr	r2, [pc, #36]	@ (80059e8 <vPortFree+0xc0>)
 80059c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059c6:	6938      	ldr	r0, [r7, #16]
 80059c8:	f000 f874 	bl	8005ab4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059cc:	4b07      	ldr	r3, [pc, #28]	@ (80059ec <vPortFree+0xc4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3301      	adds	r3, #1
 80059d2:	4a06      	ldr	r2, [pc, #24]	@ (80059ec <vPortFree+0xc4>)
 80059d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059d6:	f7fe fc75 	bl	80042c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059da:	bf00      	nop
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200019d4 	.word	0x200019d4
 80059e8:	200019c4 	.word	0x200019c4
 80059ec:	200019d0 	.word	0x200019d0

080059f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059f6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80059fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059fc:	4b27      	ldr	r3, [pc, #156]	@ (8005a9c <prvHeapInit+0xac>)
 80059fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00c      	beq.n	8005a24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3307      	adds	r3, #7
 8005a0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0307 	bic.w	r3, r3, #7
 8005a16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005a9c <prvHeapInit+0xac>)
 8005a20:	4413      	add	r3, r2
 8005a22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a28:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa0 <prvHeapInit+0xb0>)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005aa0 <prvHeapInit+0xb0>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	4413      	add	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0307 	bic.w	r3, r3, #7
 8005a4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4a15      	ldr	r2, [pc, #84]	@ (8005aa4 <prvHeapInit+0xb4>)
 8005a50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a52:	4b14      	ldr	r3, [pc, #80]	@ (8005aa4 <prvHeapInit+0xb4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2200      	movs	r2, #0
 8005a58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a5a:	4b12      	ldr	r3, [pc, #72]	@ (8005aa4 <prvHeapInit+0xb4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	1ad2      	subs	r2, r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a70:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa4 <prvHeapInit+0xb4>)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa8 <prvHeapInit+0xb8>)
 8005a7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	4a09      	ldr	r2, [pc, #36]	@ (8005aac <prvHeapInit+0xbc>)
 8005a86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a88:	4b09      	ldr	r3, [pc, #36]	@ (8005ab0 <prvHeapInit+0xc0>)
 8005a8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005a8e:	601a      	str	r2, [r3, #0]
}
 8005a90:	bf00      	nop
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	20000e00 	.word	0x20000e00
 8005aa0:	200019b8 	.word	0x200019b8
 8005aa4:	200019c0 	.word	0x200019c0
 8005aa8:	200019c8 	.word	0x200019c8
 8005aac:	200019c4 	.word	0x200019c4
 8005ab0:	200019d4 	.word	0x200019d4

08005ab4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005abc:	4b28      	ldr	r3, [pc, #160]	@ (8005b60 <prvInsertBlockIntoFreeList+0xac>)
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	e002      	b.n	8005ac8 <prvInsertBlockIntoFreeList+0x14>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d8f7      	bhi.n	8005ac2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	4413      	add	r3, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d108      	bne.n	8005af6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	441a      	add	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	441a      	add	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d118      	bne.n	8005b3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	4b15      	ldr	r3, [pc, #84]	@ (8005b64 <prvInsertBlockIntoFreeList+0xb0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d00d      	beq.n	8005b32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	441a      	add	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	e008      	b.n	8005b44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b32:	4b0c      	ldr	r3, [pc, #48]	@ (8005b64 <prvInsertBlockIntoFreeList+0xb0>)
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	e003      	b.n	8005b44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d002      	beq.n	8005b52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b52:	bf00      	nop
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	200019b8 	.word	0x200019b8
 8005b64:	200019c0 	.word	0x200019c0

08005b68 <memset>:
 8005b68:	4402      	add	r2, r0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d100      	bne.n	8005b72 <memset+0xa>
 8005b70:	4770      	bx	lr
 8005b72:	f803 1b01 	strb.w	r1, [r3], #1
 8005b76:	e7f9      	b.n	8005b6c <memset+0x4>

08005b78 <__libc_init_array>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005bb0 <__libc_init_array+0x38>)
 8005b7c:	4c0d      	ldr	r4, [pc, #52]	@ (8005bb4 <__libc_init_array+0x3c>)
 8005b7e:	1b64      	subs	r4, r4, r5
 8005b80:	10a4      	asrs	r4, r4, #2
 8005b82:	2600      	movs	r6, #0
 8005b84:	42a6      	cmp	r6, r4
 8005b86:	d109      	bne.n	8005b9c <__libc_init_array+0x24>
 8005b88:	4d0b      	ldr	r5, [pc, #44]	@ (8005bb8 <__libc_init_array+0x40>)
 8005b8a:	4c0c      	ldr	r4, [pc, #48]	@ (8005bbc <__libc_init_array+0x44>)
 8005b8c:	f000 f826 	bl	8005bdc <_init>
 8005b90:	1b64      	subs	r4, r4, r5
 8005b92:	10a4      	asrs	r4, r4, #2
 8005b94:	2600      	movs	r6, #0
 8005b96:	42a6      	cmp	r6, r4
 8005b98:	d105      	bne.n	8005ba6 <__libc_init_array+0x2e>
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
 8005b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba0:	4798      	blx	r3
 8005ba2:	3601      	adds	r6, #1
 8005ba4:	e7ee      	b.n	8005b84 <__libc_init_array+0xc>
 8005ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005baa:	4798      	blx	r3
 8005bac:	3601      	adds	r6, #1
 8005bae:	e7f2      	b.n	8005b96 <__libc_init_array+0x1e>
 8005bb0:	08005c68 	.word	0x08005c68
 8005bb4:	08005c68 	.word	0x08005c68
 8005bb8:	08005c68 	.word	0x08005c68
 8005bbc:	08005c6c 	.word	0x08005c6c

08005bc0 <memcpy>:
 8005bc0:	440a      	add	r2, r1
 8005bc2:	4291      	cmp	r1, r2
 8005bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bc8:	d100      	bne.n	8005bcc <memcpy+0xc>
 8005bca:	4770      	bx	lr
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bd6:	4291      	cmp	r1, r2
 8005bd8:	d1f9      	bne.n	8005bce <memcpy+0xe>
 8005bda:	bd10      	pop	{r4, pc}

08005bdc <_init>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr

08005be8 <_fini>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	bf00      	nop
 8005bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bee:	bc08      	pop	{r3}
 8005bf0:	469e      	mov	lr, r3
 8005bf2:	4770      	bx	lr
