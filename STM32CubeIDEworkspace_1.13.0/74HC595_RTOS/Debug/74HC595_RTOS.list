
74HC595_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08007b80  08007b80  00008b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e60  08007e60  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007e60  08007e60  00008e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e68  08007e68  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e68  08007e68  00008e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e6c  08007e6c  00008e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007e70  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000090d8  20000064  08007ed4  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000913c  08007ed4  0000913c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ce0  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e2  00000000  00000000  0001ed74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00022058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e02  00000000  00000000  00023278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d59  00000000  00000000  0002407a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146ad  00000000  00000000  00027dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f275a  00000000  00000000  0003c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ebda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005098  00000000  00000000  0012ec20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00133cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b68 	.word	0x08007b68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007b68 	.word	0x08007b68

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <RingBuffer_WriteByte>:

/**
  * @brief  往环形缓冲写入 1 字节 (在中断回调中调用)
  */
static void RingBuffer_WriteByte(uint8_t data)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
    uint16_t next = (ringHead + 1) % RING_BUFFER_SIZE;
 80005d6:	4b16      	ldr	r3, [pc, #88]	@ (8000630 <RingBuffer_WriteByte+0x64>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	3301      	adds	r3, #1
 80005de:	425a      	negs	r2, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	bf58      	it	pl
 80005e6:	4253      	negpl	r3, r2
 80005e8:	81fb      	strh	r3, [r7, #14]

    // 如果 next == ringTail，说明缓冲满了 (队列将溢出)
    // 简单处理：覆盖最早的数据
    if (next == ringTail)
 80005ea:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <RingBuffer_WriteByte+0x68>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	89fa      	ldrh	r2, [r7, #14]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d10b      	bne.n	800060e <RingBuffer_WriteByte+0x42>
    {
        // 丢弃最旧字节
        ringTail = (ringTail + 1) % RING_BUFFER_SIZE;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <RingBuffer_WriteByte+0x68>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	3301      	adds	r3, #1
 80005fe:	425a      	negs	r2, r3
 8000600:	b2db      	uxtb	r3, r3
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	bf58      	it	pl
 8000606:	4253      	negpl	r3, r2
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <RingBuffer_WriteByte+0x68>)
 800060c:	801a      	strh	r2, [r3, #0]
    }

    ringBuffer[ringHead] = data;
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <RingBuffer_WriteByte+0x64>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	b29b      	uxth	r3, r3
 8000614:	4619      	mov	r1, r3
 8000616:	4a08      	ldr	r2, [pc, #32]	@ (8000638 <RingBuffer_WriteByte+0x6c>)
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	5453      	strb	r3, [r2, r1]
    ringHead = next;
 800061c:	4a04      	ldr	r2, [pc, #16]	@ (8000630 <RingBuffer_WriteByte+0x64>)
 800061e:	89fb      	ldrh	r3, [r7, #14]
 8000620:	8013      	strh	r3, [r2, #0]
}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000208 	.word	0x20000208
 8000634:	2000020a 	.word	0x2000020a
 8000638:	20000108 	.word	0x20000108

0800063c <RingBuffer_ReadByte>:
/**
  * @brief  从环形缓冲读 1 字节 (在任务里循环调用)
  * @retval >=0 读到的有效字节； -1 表示缓冲为空
  */
static int RingBuffer_ReadByte(void)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
    if (ringTail == ringHead)
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <RingBuffer_ReadByte+0x50>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <RingBuffer_ReadByte+0x54>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	b29b      	uxth	r3, r3
 800064e:	429a      	cmp	r2, r3
 8000650:	d102      	bne.n	8000658 <RingBuffer_ReadByte+0x1c>
    {
        // 缓冲为空
        return -1;
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	e013      	b.n	8000680 <RingBuffer_ReadByte+0x44>
    }
    else
    {
        uint8_t data = ringBuffer[ringTail];
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <RingBuffer_ReadByte+0x50>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	b29b      	uxth	r3, r3
 800065e:	461a      	mov	r2, r3
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <RingBuffer_ReadByte+0x58>)
 8000662:	5c9b      	ldrb	r3, [r3, r2]
 8000664:	71fb      	strb	r3, [r7, #7]
        ringTail = (ringTail + 1) % RING_BUFFER_SIZE;
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <RingBuffer_ReadByte+0x50>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	b29b      	uxth	r3, r3
 800066c:	3301      	adds	r3, #1
 800066e:	425a      	negs	r2, r3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	bf58      	it	pl
 8000676:	4253      	negpl	r3, r2
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b04      	ldr	r3, [pc, #16]	@ (800068c <RingBuffer_ReadByte+0x50>)
 800067c:	801a      	strh	r2, [r3, #0]
        return data;
 800067e:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	2000020a 	.word	0x2000020a
 8000690:	20000208 	.word	0x20000208
 8000694:	20000108 	.word	0x20000108

08000698 <main>:
/**
  * @brief  Main function to initialize RTOS and tasks.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b09e      	sub	sp, #120	@ 0x78
 800069c:	af00      	add	r7, sp, #0
    /* Initialize HAL library */
    HAL_Init();
 800069e:	f000 fc8d 	bl	8000fbc <HAL_Init>
    SystemClock_Config();
 80006a2:	f000 f9c3 	bl	8000a2c <SystemClock_Config>
    MX_GPIO_Init();
 80006a6:	f000 fa55 	bl	8000b54 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80006aa:	f000 fa11 	bl	8000ad0 <MX_USART2_UART_Init>

    /* 先启动一次中断接收，准备收第 1 个字节 */
    HAL_UART_Receive_IT(&huart2, &rxData, 1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	4936      	ldr	r1, [pc, #216]	@ (800078c <main+0xf4>)
 80006b2:	4837      	ldr	r0, [pc, #220]	@ (8000790 <main+0xf8>)
 80006b4:	f002 fc48 	bl	8002f48 <HAL_UART_Receive_IT>

    char *testMsg = "Bare-metal print before RTOS starts...\r\n";
 80006b8:	4b36      	ldr	r3, [pc, #216]	@ (8000794 <main+0xfc>)
 80006ba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_UART_Transmit(&huart2, (uint8_t*)testMsg, strlen(testMsg), 100);
 80006bc:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80006be:	f7ff fd91 	bl	80001e4 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	2364      	movs	r3, #100	@ 0x64
 80006c8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80006ca:	4831      	ldr	r0, [pc, #196]	@ (8000790 <main+0xf8>)
 80006cc:	f002 fbb2 	bl	8002e34 <HAL_UART_Transmit>

    /* Initialize SN74HC595 */
    SN74HC595_Init();
 80006d0:	f000 f876 	bl	80007c0 <SN74HC595_Init>

    /* Initialize FreeRTOS */
    osKernelInitialize();
 80006d4:	f003 ff7e 	bl	80045d4 <osKernelInitialize>

    /* Create the SN74HC595 display task */
    const osThreadAttr_t displayTask_attributes = {
 80006d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006dc:	2224      	movs	r2, #36	@ 0x24
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f006 fda3 	bl	800722c <memset>
 80006e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <main+0x100>)
 80006e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80006ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80006f0:	2330      	movs	r3, #48	@ 0x30
 80006f2:	667b      	str	r3, [r7, #100]	@ 0x64
        .name = "DisplayTask",
        .stack_size = 256 * 4,
        .priority = (osPriority_t) osPriorityRealtime,
    };
    displayTaskHandle = osThreadNew(vTaskSN74HC595, NULL, &displayTask_attributes);
 80006f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006f8:	461a      	mov	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	4827      	ldr	r0, [pc, #156]	@ (800079c <main+0x104>)
 80006fe:	f003 ffb3 	bl	8004668 <osThreadNew>
 8000702:	4603      	mov	r3, r0
 8000704:	4a26      	ldr	r2, [pc, #152]	@ (80007a0 <main+0x108>)
 8000706:	6013      	str	r3, [r2, #0]

    const osThreadAttr_t helloTask_attributes = {
 8000708:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800070c:	2224      	movs	r2, #36	@ 0x24
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f006 fd8b 	bl	800722c <memset>
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <main+0x10c>)
 8000718:	62bb      	str	r3, [r7, #40]	@ 0x28
 800071a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000720:	2318      	movs	r3, #24
 8000722:	643b      	str	r3, [r7, #64]	@ 0x40
        .name = "helloTask",
        .stack_size = 128 * 4,
        .priority = (osPriority_t) osPriorityNormal,
    };
    helloTaskHandle = osThreadNew(vTaskHello, NULL, &helloTask_attributes);
 8000724:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000728:	461a      	mov	r2, r3
 800072a:	2100      	movs	r1, #0
 800072c:	481e      	ldr	r0, [pc, #120]	@ (80007a8 <main+0x110>)
 800072e:	f003 ff9b 	bl	8004668 <osThreadNew>
 8000732:	4603      	mov	r3, r0
 8000734:	4a1d      	ldr	r2, [pc, #116]	@ (80007ac <main+0x114>)
 8000736:	6013      	str	r3, [r2, #0]

    const osThreadAttr_t Task_USART_Com_attributes = {
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2224      	movs	r2, #36	@ 0x24
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f006 fd74 	bl	800722c <memset>
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <main+0x118>)
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800074c:	61bb      	str	r3, [r7, #24]
 800074e:	2318      	movs	r3, #24
 8000750:	61fb      	str	r3, [r7, #28]
        .name = "vTask_USART_Com",
        .stack_size = 512 * 4,
        .priority = (osPriority_t) osPriorityNormal,
    };
    USARTComHandle = osThreadNew(vTask_USART_Com, NULL, &Task_USART_Com_attributes);
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	461a      	mov	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	4816      	ldr	r0, [pc, #88]	@ (80007b4 <main+0x11c>)
 800075a:	f003 ff85 	bl	8004668 <osThreadNew>
 800075e:	4603      	mov	r3, r0
 8000760:	4a15      	ldr	r2, [pc, #84]	@ (80007b8 <main+0x120>)
 8000762:	6013      	str	r3, [r2, #0]
    /* Start FreeRTOS scheduler */

    if (USARTComHandle == NULL)
 8000764:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <main+0x120>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10b      	bne.n	8000784 <main+0xec>
    {
        char *err = "Error: Failed to create vTask_USART_Com!\r\n";
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <main+0x124>)
 800076e:	673b      	str	r3, [r7, #112]	@ 0x70
        HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), 100);
 8000770:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000772:	f7ff fd37 	bl	80001e4 <strlen>
 8000776:	4603      	mov	r3, r0
 8000778:	b29a      	uxth	r2, r3
 800077a:	2364      	movs	r3, #100	@ 0x64
 800077c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800077e:	4804      	ldr	r0, [pc, #16]	@ (8000790 <main+0xf8>)
 8000780:	f002 fb58 	bl	8002e34 <HAL_UART_Transmit>
    }

    osKernelStart();
 8000784:	f003 ff4a 	bl	800461c <osKernelStart>

    /* Infinite loop (we should never reach here) */
    while (1) {}
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <main+0xf0>
 800078c:	2000020c 	.word	0x2000020c
 8000790:	20000080 	.word	0x20000080
 8000794:	08007b80 	.word	0x08007b80
 8000798:	08007bac 	.word	0x08007bac
 800079c:	080008e9 	.word	0x080008e9
 80007a0:	20000210 	.word	0x20000210
 80007a4:	08007bb8 	.word	0x08007bb8
 80007a8:	0800090d 	.word	0x0800090d
 80007ac:	20000214 	.word	0x20000214
 80007b0:	08007bc4 	.word	0x08007bc4
 80007b4:	08000945 	.word	0x08000945
 80007b8:	20000218 	.word	0x20000218
 80007bc:	08007bd4 	.word	0x08007bd4

080007c0 <SN74HC595_Init>:

/**
  * @brief SN74HC595 initialization.
  */
void SN74HC595_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SER_PORT, SER_PIN, GPIO_PIN_SET); // Disable output initially
 80007c4:	2201      	movs	r2, #1
 80007c6:	2140      	movs	r1, #64	@ 0x40
 80007c8:	4802      	ldr	r0, [pc, #8]	@ (80007d4 <SN74HC595_Init+0x14>)
 80007ca:	f000 ffad 	bl	8001728 <HAL_GPIO_WritePin>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	48000400 	.word	0x48000400

080007d8 <my_delay>:
  * @param data: 8-bit data to be sent
  */
/* 优化后的数据发送函数（确保唯一存在） */

void my_delay(int value)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

	for (int i=0; i<value; i++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	e003      	b.n	80007ee <my_delay+0x16>
	{
		__NOP();
 80007e6:	bf00      	nop
	for (int i=0; i<value; i++)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbf7      	blt.n	80007e6 <my_delay+0xe>
	}

}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SN74HC595_SendData>:
void SN74HC595_SendData(int16_t  data)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	80fb      	strh	r3, [r7, #6]

    // Initial values
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // SER
 800080e:	2200      	movs	r2, #0
 8000810:	2140      	movs	r1, #64	@ 0x40
 8000812:	4834      	ldr	r0, [pc, #208]	@ (80008e4 <SN74HC595_SendData+0xe0>)
 8000814:	f000 ff88 	bl	8001728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // RCLK
 8000818:	2200      	movs	r2, #0
 800081a:	2180      	movs	r1, #128	@ 0x80
 800081c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000820:	f000 ff82 	bl	8001728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // SRCLK
 8000824:	2200      	movs	r2, #0
 8000826:	2140      	movs	r1, #64	@ 0x40
 8000828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082c:	f000 ff7c 	bl	8001728 <HAL_GPIO_WritePin>

    // Loop through each bit in data (from LSB to MSB)
    for (int i=0; i<16; i++)
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	e02b      	b.n	800088e <SN74HC595_SendData+0x8a>
    {
        // Set SER pin based on the current bit
        if (data & (1<<i))
 8000836:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	fa42 f303 	asr.w	r3, r2, r3
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	2b00      	cmp	r3, #0
 8000846:	d005      	beq.n	8000854 <SN74HC595_SendData+0x50>
        {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // SER = 1
 8000848:	2201      	movs	r2, #1
 800084a:	2140      	movs	r1, #64	@ 0x40
 800084c:	4825      	ldr	r0, [pc, #148]	@ (80008e4 <SN74HC595_SendData+0xe0>)
 800084e:	f000 ff6b 	bl	8001728 <HAL_GPIO_WritePin>
 8000852:	e004      	b.n	800085e <SN74HC595_SendData+0x5a>
        } else
        {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // SER = 0
 8000854:	2200      	movs	r2, #0
 8000856:	2140      	movs	r1, #64	@ 0x40
 8000858:	4822      	ldr	r0, [pc, #136]	@ (80008e4 <SN74HC595_SendData+0xe0>)
 800085a:	f000 ff65 	bl	8001728 <HAL_GPIO_WritePin>
        }
        my_delay(MY_DELAY);
 800085e:	200a      	movs	r0, #10
 8000860:	f7ff ffba 	bl	80007d8 <my_delay>

        // Pulse the clock to shift in the bit
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // SRCLK rising edge
 8000864:	2201      	movs	r2, #1
 8000866:	2140      	movs	r1, #64	@ 0x40
 8000868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086c:	f000 ff5c 	bl	8001728 <HAL_GPIO_WritePin>
        my_delay(MY_DELAY);
 8000870:	200a      	movs	r0, #10
 8000872:	f7ff ffb1 	bl	80007d8 <my_delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // SRCLK falling edge
 8000876:	2200      	movs	r2, #0
 8000878:	2140      	movs	r1, #64	@ 0x40
 800087a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087e:	f000 ff53 	bl	8001728 <HAL_GPIO_WritePin>
        my_delay(MY_DELAY);
 8000882:	200a      	movs	r0, #10
 8000884:	f7ff ffa8 	bl	80007d8 <my_delay>
    for (int i=0; i<16; i++)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3301      	adds	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b0f      	cmp	r3, #15
 8000892:	ddd0      	ble.n	8000836 <SN74HC595_SendData+0x32>
    }

    // Latch the shifted data to the output
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // ST_CP (Latch) rising edge
 8000894:	2201      	movs	r2, #1
 8000896:	2180      	movs	r1, #128	@ 0x80
 8000898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089c:	f000 ff44 	bl	8001728 <HAL_GPIO_WritePin>
    my_delay(MY_DELAY);
 80008a0:	200a      	movs	r0, #10
 80008a2:	f7ff ff99 	bl	80007d8 <my_delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // ST_CP (Latch) falling edge
 80008a6:	2200      	movs	r2, #0
 80008a8:	2180      	movs	r1, #128	@ 0x80
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ae:	f000 ff3b 	bl	8001728 <HAL_GPIO_WritePin>

    // Final values
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // SER
 80008b2:	2200      	movs	r2, #0
 80008b4:	2140      	movs	r1, #64	@ 0x40
 80008b6:	480b      	ldr	r0, [pc, #44]	@ (80008e4 <SN74HC595_SendData+0xe0>)
 80008b8:	f000 ff36 	bl	8001728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // RCLK
 80008bc:	2200      	movs	r2, #0
 80008be:	2180      	movs	r1, #128	@ 0x80
 80008c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c4:	f000 ff30 	bl	8001728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // SRCLK
 80008c8:	2200      	movs	r2, #0
 80008ca:	2140      	movs	r1, #64	@ 0x40
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d0:	f000 ff2a 	bl	8001728 <HAL_GPIO_WritePin>

	my_delay(MY_DELAY);
 80008d4:	200a      	movs	r0, #10
 80008d6:	f7ff ff7f 	bl	80007d8 <my_delay>

}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	48000400 	.word	0x48000400

080008e8 <vTaskSN74HC595>:
/**
  * @brief  Task to manage the SN74HC595 shift register display.
  * @param  argument: Not used
  */
void vTaskSN74HC595(void *argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
    /* Infinite loop to update display */
    for (;;)
    {
        /* Send current count value to 74HC595 */
        SN74HC595_SendData(number);
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <vTaskSN74HC595+0x20>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff84 	bl	8000804 <SN74HC595_SendData>
        /* Delay for a while (replace HAL_Delay with FreeRTOS delay) */
        vTaskDelay(pdMS_TO_TICKS(10));
 80008fc:	200a      	movs	r0, #10
 80008fe:	f004 fee9 	bl	80056d4 <vTaskDelay>
        SN74HC595_SendData(number);
 8000902:	bf00      	nop
 8000904:	e7f4      	b.n	80008f0 <vTaskSN74HC595+0x8>
 8000906:	bf00      	nop
 8000908:	20000000 	.word	0x20000000

0800090c <vTaskHello>:

}

/* 这是我们要运行的任务函数 */
void vTaskHello(void *argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        /* 每隔 1s 通过串口打印一次 */
        char *msg = "Status Check: RTOS Running\r\n";
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <vTaskHello+0x30>)
 8000916:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f7ff fc63 	bl	80001e4 <strlen>
 800091e:	4603      	mov	r3, r0
 8000920:	b29a      	uxth	r2, r3
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	68f9      	ldr	r1, [r7, #12]
 8000928:	4805      	ldr	r0, [pc, #20]	@ (8000940 <vTaskHello+0x34>)
 800092a:	f002 fa83 	bl	8002e34 <HAL_UART_Transmit>

        /* 休眠 1000ms (FreeRTOS 写法) */
        osDelay(5000);
 800092e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000932:	f003 ff2b 	bl	800478c <osDelay>
    {
 8000936:	bf00      	nop
 8000938:	e7ec      	b.n	8000914 <vTaskHello+0x8>
 800093a:	bf00      	nop
 800093c:	08007c00 	.word	0x08007c00
 8000940:	20000080 	.word	0x20000080

08000944 <vTask_USART_Com>:
    }
}

void vTask_USART_Com(void *argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0b4      	sub	sp, #208	@ 0xd0
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
    char msg2[64];
    char lineBuffer[128];
    int lineIndex = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000952:	e000      	b.n	8000956 <vTask_USART_Com+0x12>
    static char lastLine[128] = {0};  // 保存上一条完整字符串

    for (;;)
    {
        while (1)
        {
 8000954:	bf00      	nop
            int c = RingBuffer_ReadByte();
 8000956:	f7ff fe71 	bl	800063c <RingBuffer_ReadByte>
 800095a:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
            if (c < 0) break;
 800095e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000962:	2b00      	cmp	r3, #0
 8000964:	db56      	blt.n	8000a14 <vTask_USART_Com+0xd0>

            // 如果你希望调试时能看到字符流，可启用以下语句：
            // sprintf(msg2, "[RX] Char: 0x%02X ('%c')\r\n", c, (c >= 32 && c <= 126) ? c : '.');
            // HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);

            if (c == ';')
 8000966:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800096a:	2b3b      	cmp	r3, #59	@ 0x3b
 800096c:	d13d      	bne.n	80009ea <vTask_USART_Com+0xa6>
            {
                if (lineIndex > 0)
 800096e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000972:	2b00      	cmp	r3, #0
 8000974:	ddee      	ble.n	8000954 <vTask_USART_Com+0x10>
                {
                    lineBuffer[lineIndex] = '\0';
 8000976:	f107 0208 	add.w	r2, r7, #8
 800097a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800097e:	4413      	add	r3, r2
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]

                    // 比较是否和上一条一样
                    if (strcmp(lineBuffer, lastLine) != 0)
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4925      	ldr	r1, [pc, #148]	@ (8000a20 <vTask_USART_Com+0xdc>)
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fc20 	bl	80001d0 <strcmp>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d025      	beq.n	80009e2 <vTask_USART_Com+0x9e>
                    {
                        sprintf(msg2, ">>> Complete line: '%s'\r\n", lineBuffer);
 8000996:	f107 0208 	add.w	r2, r7, #8
 800099a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800099e:	4921      	ldr	r1, [pc, #132]	@ (8000a24 <vTask_USART_Com+0xe0>)
 80009a0:	4618      	mov	r0, r3
 80009a2:	f006 fc21 	bl	80071e8 <siprintf>
                        HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 80009a6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fc1a 	bl	80001e4 <strlen>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
 80009bc:	481a      	ldr	r0, [pc, #104]	@ (8000a28 <vTask_USART_Com+0xe4>)
 80009be:	f002 fa39 	bl	8002e34 <HAL_UART_Transmit>

                        // 更新 lastLine
                        strncpy(lastLine, lineBuffer, sizeof(lastLine));
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	4619      	mov	r1, r3
 80009ca:	4815      	ldr	r0, [pc, #84]	@ (8000a20 <vTask_USART_Com+0xdc>)
 80009cc:	f006 fc43 	bl	8007256 <strncpy>
                        lastLine[sizeof(lastLine) - 1] = '\0'; // 保证结尾安全
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <vTask_USART_Com+0xdc>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

                        // 调用解析函数
                        parseDollarNumber(lineBuffer);
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f933 	bl	8000c48 <parseDollarNumber>
                    }

                    // 无论是否重复，都清空 lineIndex 准备下一轮
                    lineIndex = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        {
 80009e8:	e7b4      	b.n	8000954 <vTask_USART_Com+0x10>
                }
            }
            else
            {
                if (lineIndex < (int)sizeof(lineBuffer) - 1)
 80009ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80009ee:	2b7e      	cmp	r3, #126	@ 0x7e
 80009f0:	dc0c      	bgt.n	8000a0c <vTask_USART_Com+0xc8>
                {
                    lineBuffer[lineIndex++] = (char)c;
 80009f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80009fc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	33d0      	adds	r3, #208	@ 0xd0
 8000a04:	443b      	add	r3, r7
 8000a06:	f803 2cc8 	strb.w	r2, [r3, #-200]
        {
 8000a0a:	e7a3      	b.n	8000954 <vTask_USART_Com+0x10>
                }
                else
                {
                    lineIndex = 0; // 缓冲区溢出时重置
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        {
 8000a12:	e79f      	b.n	8000954 <vTask_USART_Com+0x10>
            if (c < 0) break;
 8000a14:	bf00      	nop
                }
            }
        }

        osDelay(50); // 减少空转
 8000a16:	2032      	movs	r0, #50	@ 0x32
 8000a18:	f003 feb8 	bl	800478c <osDelay>
    for (;;)
 8000a1c:	e79b      	b.n	8000956 <vTask_USART_Com+0x12>
 8000a1e:	bf00      	nop
 8000a20:	2000021c 	.word	0x2000021c
 8000a24:	08007c20 	.word	0x08007c20
 8000a28:	20000080 	.word	0x20000080

08000a2c <SystemClock_Config>:

/**
  * @brief  Configure the system clock.
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b096      	sub	sp, #88	@ 0x58
 8000a30:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	2244      	movs	r2, #68	@ 0x44
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f006 fbf6 	bl	800722c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a52:	f000 fe8f 	bl	8001774 <HAL_PWREx_ControlVoltageScaling>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x34>
    {
        Error_Handler();
 8000a5c:	f000 f98a 	bl	8000d74 <Error_Handler>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a60:	2310      	movs	r3, #16
 8000a62:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a64:	2301      	movs	r3, #1
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a6c:	2360      	movs	r3, #96	@ 0x60
 8000a6e:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a70:	2302      	movs	r3, #2
 8000a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a74:	2301      	movs	r3, #1
 8000a76:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 40;
 8000a7c:	2328      	movs	r3, #40	@ 0x28
 8000a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a80:	2307      	movs	r3, #7
 8000a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fec5 	bl	8001820 <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x74>
    {
        Error_Handler();
 8000a9c:	f000 f96a 	bl	8000d74 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	603b      	str	r3, [r7, #0]
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fa8d 	bl	8001fd8 <HAL_RCC_ClockConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x9c>
    {
        Error_Handler();
 8000ac4:	f000 f956 	bl	8000d74 <Error_Handler>
    }
}
 8000ac8:	bf00      	nop
 8000aca:	3758      	adds	r7, #88	@ 0x58
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <MX_USART2_UART_Init+0x68>)
 8000ad6:	4a19      	ldr	r2, [pc, #100]	@ (8000b3c <MX_USART2_UART_Init+0x6c>)
 8000ad8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000ada:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_USART2_UART_Init+0x68>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <MX_USART2_UART_Init+0x68>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <MX_USART2_UART_Init+0x68>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_USART2_UART_Init+0x68>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <MX_USART2_UART_Init+0x68>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_USART2_UART_Init+0x68>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <MX_USART2_UART_Init+0x68>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_USART2_UART_Init+0x68>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <MX_USART2_UART_Init+0x68>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b12:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <MX_USART2_UART_Init+0x68>)
 8000b14:	f002 f940 	bl	8002d98 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x52>
    {
        Error_Handler();
 8000b1e:	f000 f929 	bl	8000d74 <Error_Handler>
    }
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2105      	movs	r1, #5
 8000b26:	2026      	movs	r0, #38	@ 0x26
 8000b28:	f000 fb9f 	bl	800126a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b2c:	2026      	movs	r0, #38	@ 0x26
 8000b2e:	f000 fbb8 	bl	80012a2 <HAL_NVIC_EnableIRQ>
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000080 	.word	0x20000080
 8000b3c:	40004400 	.word	0x40004400

08000b40 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart2); // 这一句很关键！必须调用 HAL 的处理逻辑
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <USART2_IRQHandler+0x10>)
 8000b46:	f002 fa4b 	bl	8002fe0 <HAL_UART_IRQHandler>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000080 	.word	0x20000080

08000b54 <MX_GPIO_Init>:
#define SRCLK_PORT GPIOA
#define RCLK_PORT  GPIOA

/* 修改后的GPIO初始化 */
void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b26      	ldr	r3, [pc, #152]	@ (8000c04 <MX_GPIO_Init+0xb0>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	4a25      	ldr	r2, [pc, #148]	@ (8000c04 <MX_GPIO_Init+0xb0>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b76:	4b23      	ldr	r3, [pc, #140]	@ (8000c04 <MX_GPIO_Init+0xb0>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4b20      	ldr	r3, [pc, #128]	@ (8000c04 <MX_GPIO_Init+0xb0>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	4a1f      	ldr	r2, [pc, #124]	@ (8000c04 <MX_GPIO_Init+0xb0>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <MX_GPIO_Init+0xb0>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

    /*-- 统一配置所有控制引脚 --*/
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]

    /* SER (PB6) */
    GPIO_InitStruct.Pin = SER_PIN;
 8000ba6:	2340      	movs	r3, #64	@ 0x40
 8000ba8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SER_PORT, &GPIO_InitStruct);
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4815      	ldr	r0, [pc, #84]	@ (8000c08 <MX_GPIO_Init+0xb4>)
 8000bb2:	f000 fc0f 	bl	80013d4 <HAL_GPIO_Init>

    /* SRCLK (PA6) */
    GPIO_InitStruct.Pin = SRCLK_PIN;
 8000bb6:	2340      	movs	r3, #64	@ 0x40
 8000bb8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SRCLK_PORT, &GPIO_InitStruct);
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc4:	f000 fc06 	bl	80013d4 <HAL_GPIO_Init>

    /* RCLK (PA7) */
    GPIO_InitStruct.Pin = RCLK_PIN;
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(RCLK_PORT, &GPIO_InitStruct);
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd6:	f000 fbfd 	bl	80013d4 <HAL_GPIO_Init>

    /* 初始状态设置 */
    HAL_GPIO_WritePin(SER_PORT, SER_PIN, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2140      	movs	r1, #64	@ 0x40
 8000bde:	480a      	ldr	r0, [pc, #40]	@ (8000c08 <MX_GPIO_Init+0xb4>)
 8000be0:	f000 fda2 	bl	8001728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SRCLK_PORT, SRCLK_PIN, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2140      	movs	r1, #64	@ 0x40
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bec:	f000 fd9c 	bl	8001728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RCLK_PORT, RCLK_PIN, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2180      	movs	r1, #128	@ 0x80
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf8:	f000 fd96 	bl	8001728 <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40021000 	.word	0x40021000
 8000c08:	48000400 	.word	0x48000400

08000c0c <HAL_UART_RxCpltCallback>:
/**
  * @brief  UART 接收完成回调
  * @note   每收到 1 个字节就会进这个函数 (若 HAL_UART_Receive_IT 配置为1字节)
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <HAL_UART_RxCpltCallback+0x30>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d109      	bne.n	8000c32 <HAL_UART_RxCpltCallback+0x26>
    {
        RingBuffer_WriteByte(rxData); // 写入环形缓冲区
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <HAL_UART_RxCpltCallback+0x34>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fcd2 	bl	80005cc <RingBuffer_WriteByte>
        HAL_UART_Receive_IT(&huart2, &rxData, 1); // 重新启用中断
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4905      	ldr	r1, [pc, #20]	@ (8000c40 <HAL_UART_RxCpltCallback+0x34>)
 8000c2c:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <HAL_UART_RxCpltCallback+0x38>)
 8000c2e:	f002 f98b 	bl	8002f48 <HAL_UART_Receive_IT>
    }
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	2000020c 	.word	0x2000020c
 8000c44:	20000080 	.word	0x20000080

08000c48 <parseDollarNumber>:
/**
  * @brief  在给定字符串中搜索 '$' 成对出现的片段，将其转为整数，存到全局 number
  *         若找到多段，也可以只取第一段，或循环处理。
  */
void parseDollarNumber(const char *str)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b09e      	sub	sp, #120	@ 0x78
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    char debugMsg[64];
    sprintf(debugMsg, "[parseDollarNumber] Input: '%s'\r\n", str);
 8000c50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	493f      	ldr	r1, [pc, #252]	@ (8000d54 <parseDollarNumber+0x10c>)
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f006 fac5 	bl	80071e8 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
 8000c5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fabe 	bl	80001e4 <strlen>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	4838      	ldr	r0, [pc, #224]	@ (8000d58 <parseDollarNumber+0x110>)
 8000c76:	f002 f8dd 	bl	8002e34 <HAL_UART_Transmit>

    const char *start = strchr(str, '$');
 8000c7a:	2124      	movs	r1, #36	@ 0x24
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f006 fadd 	bl	800723c <strchr>
 8000c82:	6778      	str	r0, [r7, #116]	@ 0x74
    if (!start) {
 8000c84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d107      	bne.n	8000c9a <parseDollarNumber+0x52>
        HAL_UART_Transmit(&huart2, (uint8_t*)"No start $ found\r\n", 17, HAL_MAX_DELAY);
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	2211      	movs	r2, #17
 8000c90:	4932      	ldr	r1, [pc, #200]	@ (8000d5c <parseDollarNumber+0x114>)
 8000c92:	4831      	ldr	r0, [pc, #196]	@ (8000d58 <parseDollarNumber+0x110>)
 8000c94:	f002 f8ce 	bl	8002e34 <HAL_UART_Transmit>
        return;
 8000c98:	e059      	b.n	8000d4e <parseDollarNumber+0x106>
    }

    const char *end = strchr(start + 1, '$');
 8000c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	2124      	movs	r1, #36	@ 0x24
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f006 facb 	bl	800723c <strchr>
 8000ca6:	6738      	str	r0, [r7, #112]	@ 0x70
    if (!end) {
 8000ca8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d107      	bne.n	8000cbe <parseDollarNumber+0x76>
        HAL_UART_Transmit(&huart2, (uint8_t*)"No end $ found\r\n", 16, HAL_MAX_DELAY);
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	2210      	movs	r2, #16
 8000cb4:	492a      	ldr	r1, [pc, #168]	@ (8000d60 <parseDollarNumber+0x118>)
 8000cb6:	4828      	ldr	r0, [pc, #160]	@ (8000d58 <parseDollarNumber+0x110>)
 8000cb8:	f002 f8bc 	bl	8002e34 <HAL_UART_Transmit>
        return;
 8000cbc:	e047      	b.n	8000d4e <parseDollarNumber+0x106>
    }

    int length = end - (start + 1);
 8000cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (length <= 0) {
 8000cc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	dc07      	bgt.n	8000cde <parseDollarNumber+0x96>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Invalid length\r\n", 16, HAL_MAX_DELAY);
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	2210      	movs	r2, #16
 8000cd4:	4923      	ldr	r1, [pc, #140]	@ (8000d64 <parseDollarNumber+0x11c>)
 8000cd6:	4820      	ldr	r0, [pc, #128]	@ (8000d58 <parseDollarNumber+0x110>)
 8000cd8:	f002 f8ac 	bl	8002e34 <HAL_UART_Transmit>
        return;
 8000cdc:	e037      	b.n	8000d4e <parseDollarNumber+0x106>
    }

    char temp[32];
    if (length >= (int)sizeof(temp)) {
 8000cde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ce0:	2b1f      	cmp	r3, #31
 8000ce2:	dd07      	ble.n	8000cf4 <parseDollarNumber+0xac>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Temp buffer overflow\r\n", 21, HAL_MAX_DELAY);
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce8:	2215      	movs	r2, #21
 8000cea:	491f      	ldr	r1, [pc, #124]	@ (8000d68 <parseDollarNumber+0x120>)
 8000cec:	481a      	ldr	r0, [pc, #104]	@ (8000d58 <parseDollarNumber+0x110>)
 8000cee:	f002 f8a1 	bl	8002e34 <HAL_UART_Transmit>
        return;
 8000cf2:	e02c      	b.n	8000d4e <parseDollarNumber+0x106>
    }

    memcpy(temp, start + 1, length);
 8000cf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cf6:	1c59      	adds	r1, r3, #1
 8000cf8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f006 fae8 	bl	80072d4 <memcpy>
    temp[length] = '\0';
 8000d04:	f107 0208 	add.w	r2, r7, #8
 8000d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d0a:	4413      	add	r3, r2
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]

    int val = atoi(temp);
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	4618      	mov	r0, r3
 8000d16:	f006 f9df 	bl	80070d8 <atoi>
 8000d1a:	66b8      	str	r0, [r7, #104]	@ 0x68
    sprintf(debugMsg, "Extracted: '%s' -> %d\r\n", temp, val);
 8000d1c:	f107 0208 	add.w	r2, r7, #8
 8000d20:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000d24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d26:	4911      	ldr	r1, [pc, #68]	@ (8000d6c <parseDollarNumber+0x124>)
 8000d28:	f006 fa5e 	bl	80071e8 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
 8000d2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fa57 	bl	80001e4 <strlen>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <parseDollarNumber+0x110>)
 8000d44:	f002 f876 	bl	8002e34 <HAL_UART_Transmit>

    number = val;
 8000d48:	4a09      	ldr	r2, [pc, #36]	@ (8000d70 <parseDollarNumber+0x128>)
 8000d4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d4c:	6013      	str	r3, [r2, #0]
}
 8000d4e:	3778      	adds	r7, #120	@ 0x78
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	08007c3c 	.word	0x08007c3c
 8000d58:	20000080 	.word	0x20000080
 8000d5c:	08007c60 	.word	0x08007c60
 8000d60:	08007c74 	.word	0x08007c74
 8000d64:	08007c88 	.word	0x08007c88
 8000d68:	08007c9c 	.word	0x08007c9c
 8000d6c:	08007cb4 	.word	0x08007cb4
 8000d70:	20000000 	.word	0x20000000

08000d74 <Error_Handler>:

/**
  * @brief Error Handler
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
    __disable_irq();
    while (1) {}
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <Error_Handler+0x8>

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8a:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	210f      	movs	r1, #15
 8000dba:	f06f 0001 	mvn.w	r0, #1
 8000dbe:	f000 fa54 	bl	800126a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0ac      	sub	sp, #176	@ 0xb0
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2288      	movs	r2, #136	@ 0x88
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f006 fa1b 	bl	800722c <memset>
  if(huart->Instance==USART2)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a21      	ldr	r2, [pc, #132]	@ (8000e80 <HAL_UART_MspInit+0xb0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d13b      	bne.n	8000e78 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 fb07 	bl	8002420 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e18:	f7ff ffac 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e1c:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <HAL_UART_MspInit+0xb4>)
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e20:	4a18      	ldr	r2, [pc, #96]	@ (8000e84 <HAL_UART_MspInit+0xb4>)
 8000e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e28:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <HAL_UART_MspInit+0xb4>)
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <HAL_UART_MspInit+0xb4>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e38:	4a12      	ldr	r2, [pc, #72]	@ (8000e84 <HAL_UART_MspInit+0xb4>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e40:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <HAL_UART_MspInit+0xb4>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e64:	2307      	movs	r3, #7
 8000e66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e74:	f000 faae 	bl	80013d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	37b0      	adds	r7, #176	@ 0xb0
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40004400 	.word	0x40004400
 8000e84:	40021000 	.word	0x40021000

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <NMI_Handler+0x4>

08000e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <MemManage_Handler+0x4>

08000ea0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <UsageFault_Handler+0x4>

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec2:	f000 f8d7 	bl	8001074 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ec6:	f005 f889 	bl	8005fdc <xTaskGetSchedulerState>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d001      	beq.n	8000ed4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ed0:	f005 fe82 	bl	8006bd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee0:	4a14      	ldr	r2, [pc, #80]	@ (8000f34 <_sbrk+0x5c>)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <_sbrk+0x60>)
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <_sbrk+0x64>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <_sbrk+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d207      	bcs.n	8000f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f08:	f006 f9b8 	bl	800727c <__errno>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	e009      	b.n	8000f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <_sbrk+0x64>)
 8000f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20018000 	.word	0x20018000
 8000f38:	00000400 	.word	0x00000400
 8000f3c:	2000029c 	.word	0x2000029c
 8000f40:	20009140 	.word	0x20009140

08000f44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f6c:	f7ff ffea 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	@ (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f006 f977 	bl	8007288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f9a:	f7ff fb7d 	bl	8000698 <main>

08000f9e <LoopForever>:

LoopForever:
    b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fa0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000fac:	08007e70 	.word	0x08007e70
  ldr r2, =_sbss
 8000fb0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000fb4:	2000913c 	.word	0x2000913c

08000fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_2_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <HAL_Init+0x3c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <HAL_Init+0x3c>)
 8000fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f000 f93e 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd8:	200f      	movs	r0, #15
 8000fda:	f000 f80f 	bl	8000ffc <HAL_InitTick>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	e001      	b.n	8000fee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fea:	f7ff fec9 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fee:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40022000 	.word	0x40022000

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001008:	4b17      	ldr	r3, [pc, #92]	@ (8001068 <HAL_InitTick+0x6c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d023      	beq.n	8001058 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001010:	4b16      	ldr	r3, [pc, #88]	@ (800106c <HAL_InitTick+0x70>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <HAL_InitTick+0x6c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f949 	bl	80012be <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10f      	bne.n	8001052 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d809      	bhi.n	800104c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f000 f913 	bl	800126a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001044:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <HAL_InitTick+0x74>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e007      	b.n	800105c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e004      	b.n	800105c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
 8001056:	e001      	b.n	800105c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000000c 	.word	0x2000000c
 800106c:	20000004 	.word	0x20000004
 8001070:	20000008 	.word	0x20000008

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2000000c 	.word	0x2000000c
 8001098:	200002a0 	.word	0x200002a0

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	200002a0 	.word	0x200002a0

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4907      	ldr	r1, [pc, #28]	@ (8001150 <__NVIC_EnableIRQ+0x38>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	@ (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	@ 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	@ 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff29 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff3e 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff8e 	bl	80011a8 <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff31 	bl	8001118 <__NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffa2 	bl	8001210 <SysTick_Config>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d008      	beq.n	8001300 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2204      	movs	r2, #4
 80012f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e022      	b.n	8001346 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 020e 	bic.w	r2, r2, #14
 800130e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001324:	f003 021c 	and.w	r2, r3, #28
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	2101      	movs	r1, #1
 800132e:	fa01 f202 	lsl.w	r2, r1, r2
 8001332:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001346:	4618      	mov	r0, r3
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d005      	beq.n	8001376 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2204      	movs	r2, #4
 800136e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	e029      	b.n	80013ca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 020e 	bic.w	r2, r2, #14
 8001384:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0201 	bic.w	r2, r2, #1
 8001394:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	f003 021c 	and.w	r2, r3, #28
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	4798      	blx	r3
    }
  }
  return status;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e2:	e17f      	b.n	80016e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2101      	movs	r1, #1
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	4013      	ands	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8171 	beq.w	80016de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b01      	cmp	r3, #1
 8001406:	d005      	beq.n	8001414 <HAL_GPIO_Init+0x40>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d130      	bne.n	8001476 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800144a:	2201      	movs	r2, #1
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	091b      	lsrs	r3, r3, #4
 8001460:	f003 0201 	and.w	r2, r3, #1
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b03      	cmp	r3, #3
 8001480:	d118      	bne.n	80014b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001488:	2201      	movs	r2, #1
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	08db      	lsrs	r3, r3, #3
 800149e:	f003 0201 	and.w	r2, r3, #1
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d017      	beq.n	80014f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d123      	bne.n	8001544 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	08da      	lsrs	r2, r3, #3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3208      	adds	r2, #8
 8001504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	6939      	ldr	r1, [r7, #16]
 8001540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0203 	and.w	r2, r3, #3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80ac 	beq.w	80016de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	4b5f      	ldr	r3, [pc, #380]	@ (8001704 <HAL_GPIO_Init+0x330>)
 8001588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158a:	4a5e      	ldr	r2, [pc, #376]	@ (8001704 <HAL_GPIO_Init+0x330>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6613      	str	r3, [r2, #96]	@ 0x60
 8001592:	4b5c      	ldr	r3, [pc, #368]	@ (8001704 <HAL_GPIO_Init+0x330>)
 8001594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800159e:	4a5a      	ldr	r2, [pc, #360]	@ (8001708 <HAL_GPIO_Init+0x334>)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	3302      	adds	r3, #2
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	220f      	movs	r2, #15
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015c8:	d025      	beq.n	8001616 <HAL_GPIO_Init+0x242>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4f      	ldr	r2, [pc, #316]	@ (800170c <HAL_GPIO_Init+0x338>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01f      	beq.n	8001612 <HAL_GPIO_Init+0x23e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001710 <HAL_GPIO_Init+0x33c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d019      	beq.n	800160e <HAL_GPIO_Init+0x23a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001714 <HAL_GPIO_Init+0x340>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_GPIO_Init+0x236>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001718 <HAL_GPIO_Init+0x344>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00d      	beq.n	8001606 <HAL_GPIO_Init+0x232>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4b      	ldr	r2, [pc, #300]	@ (800171c <HAL_GPIO_Init+0x348>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d007      	beq.n	8001602 <HAL_GPIO_Init+0x22e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001720 <HAL_GPIO_Init+0x34c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d101      	bne.n	80015fe <HAL_GPIO_Init+0x22a>
 80015fa:	2306      	movs	r3, #6
 80015fc:	e00c      	b.n	8001618 <HAL_GPIO_Init+0x244>
 80015fe:	2307      	movs	r3, #7
 8001600:	e00a      	b.n	8001618 <HAL_GPIO_Init+0x244>
 8001602:	2305      	movs	r3, #5
 8001604:	e008      	b.n	8001618 <HAL_GPIO_Init+0x244>
 8001606:	2304      	movs	r3, #4
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x244>
 800160a:	2303      	movs	r3, #3
 800160c:	e004      	b.n	8001618 <HAL_GPIO_Init+0x244>
 800160e:	2302      	movs	r3, #2
 8001610:	e002      	b.n	8001618 <HAL_GPIO_Init+0x244>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_GPIO_Init+0x244>
 8001616:	2300      	movs	r3, #0
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	f002 0203 	and.w	r2, r2, #3
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	4093      	lsls	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001628:	4937      	ldr	r1, [pc, #220]	@ (8001708 <HAL_GPIO_Init+0x334>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3302      	adds	r3, #2
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001636:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <HAL_GPIO_Init+0x350>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800165a:	4a32      	ldr	r2, [pc, #200]	@ (8001724 <HAL_GPIO_Init+0x350>)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001660:	4b30      	ldr	r3, [pc, #192]	@ (8001724 <HAL_GPIO_Init+0x350>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001684:	4a27      	ldr	r2, [pc, #156]	@ (8001724 <HAL_GPIO_Init+0x350>)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800168a:	4b26      	ldr	r3, [pc, #152]	@ (8001724 <HAL_GPIO_Init+0x350>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001724 <HAL_GPIO_Init+0x350>)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <HAL_GPIO_Init+0x350>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016d8:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <HAL_GPIO_Init+0x350>)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f47f ae78 	bne.w	80013e4 <HAL_GPIO_Init+0x10>
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	371c      	adds	r7, #28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	40010000 	.word	0x40010000
 800170c:	48000400 	.word	0x48000400
 8001710:	48000800 	.word	0x48000800
 8001714:	48000c00 	.word	0x48000c00
 8001718:	48001000 	.word	0x48001000
 800171c:	48001400 	.word	0x48001400
 8001720:	48001800 	.word	0x48001800
 8001724:	40010400 	.word	0x40010400

08001728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
 8001734:	4613      	mov	r3, r2
 8001736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001738:	787b      	ldrb	r3, [r7, #1]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001744:	e002      	b.n	800174c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800175c:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <HAL_PWREx_GetVoltageRange+0x18>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40007000 	.word	0x40007000

08001774 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001782:	d130      	bne.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001784:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800178c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001790:	d038      	beq.n	8001804 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800179a:	4a1e      	ldr	r2, [pc, #120]	@ (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2232      	movs	r2, #50	@ 0x32
 80017a8:	fb02 f303 	mul.w	r3, r2, r3
 80017ac:	4a1b      	ldr	r2, [pc, #108]	@ (800181c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0c9b      	lsrs	r3, r3, #18
 80017b4:	3301      	adds	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017b8:	e002      	b.n	80017c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	3b01      	subs	r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c0:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017cc:	d102      	bne.n	80017d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f2      	bne.n	80017ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017e0:	d110      	bne.n	8001804 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e00f      	b.n	8001806 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017f2:	d007      	beq.n	8001804 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017f4:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017fc:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001802:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40007000 	.word	0x40007000
 8001818:	20000004 	.word	0x20000004
 800181c:	431bde83 	.word	0x431bde83

08001820 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e3ca      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001832:	4b97      	ldr	r3, [pc, #604]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800183c:	4b94      	ldr	r3, [pc, #592]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80e4 	beq.w	8001a1c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <HAL_RCC_OscConfig+0x4a>
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b0c      	cmp	r3, #12
 800185e:	f040 808b 	bne.w	8001978 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b01      	cmp	r3, #1
 8001866:	f040 8087 	bne.w	8001978 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800186a:	4b89      	ldr	r3, [pc, #548]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <HAL_RCC_OscConfig+0x62>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e3a2      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1a      	ldr	r2, [r3, #32]
 8001886:	4b82      	ldr	r3, [pc, #520]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <HAL_RCC_OscConfig+0x7c>
 8001892:	4b7f      	ldr	r3, [pc, #508]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800189a:	e005      	b.n	80018a8 <HAL_RCC_OscConfig+0x88>
 800189c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 800189e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d223      	bcs.n	80018f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fd55 	bl	8002360 <RCC_SetFlashLatencyFromMSIRange>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e383      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c0:	4b73      	ldr	r3, [pc, #460]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a72      	ldr	r2, [pc, #456]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b70      	ldr	r3, [pc, #448]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	496d      	ldr	r1, [pc, #436]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018de:	4b6c      	ldr	r3, [pc, #432]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	4968      	ldr	r1, [pc, #416]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
 80018f2:	e025      	b.n	8001940 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f4:	4b66      	ldr	r3, [pc, #408]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a65      	ldr	r2, [pc, #404]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80018fa:	f043 0308 	orr.w	r3, r3, #8
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	4b63      	ldr	r3, [pc, #396]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4960      	ldr	r1, [pc, #384]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001912:	4b5f      	ldr	r3, [pc, #380]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	495b      	ldr	r1, [pc, #364]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001922:	4313      	orrs	r3, r2
 8001924:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d109      	bne.n	8001940 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4618      	mov	r0, r3
 8001932:	f000 fd15 	bl	8002360 <RCC_SetFlashLatencyFromMSIRange>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e343      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001940:	f000 fc4a 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8001944:	4602      	mov	r2, r0
 8001946:	4b52      	ldr	r3, [pc, #328]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	f003 030f 	and.w	r3, r3, #15
 8001950:	4950      	ldr	r1, [pc, #320]	@ (8001a94 <HAL_RCC_OscConfig+0x274>)
 8001952:	5ccb      	ldrb	r3, [r1, r3]
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
 800195c:	4a4e      	ldr	r2, [pc, #312]	@ (8001a98 <HAL_RCC_OscConfig+0x278>)
 800195e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001960:	4b4e      	ldr	r3, [pc, #312]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fb49 	bl	8000ffc <HAL_InitTick>
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d052      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	e327      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d032      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001980:	4b43      	ldr	r3, [pc, #268]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a42      	ldr	r2, [pc, #264]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800198c:	f7ff fb86 	bl	800109c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001994:	f7ff fb82 	bl	800109c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e310      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b2:	4b37      	ldr	r3, [pc, #220]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a36      	ldr	r2, [pc, #216]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019b8:	f043 0308 	orr.w	r3, r3, #8
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b34      	ldr	r3, [pc, #208]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4931      	ldr	r1, [pc, #196]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	492c      	ldr	r1, [pc, #176]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
 80019e4:	e01a      	b.n	8001a1c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a29      	ldr	r2, [pc, #164]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fb53 	bl	800109c <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019fa:	f7ff fb4f 	bl	800109c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e2dd      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a0c:	4b20      	ldr	r3, [pc, #128]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x1da>
 8001a18:	e000      	b.n	8001a1c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d074      	beq.n	8001b12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x21a>
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b0c      	cmp	r3, #12
 8001a32:	d10e      	bne.n	8001a52 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d10b      	bne.n	8001a52 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d064      	beq.n	8001b10 <HAL_RCC_OscConfig+0x2f0>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d160      	bne.n	8001b10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e2ba      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x24a>
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e026      	b.n	8001ab8 <HAL_RCC_OscConfig+0x298>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a72:	d115      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x280>
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a05      	ldr	r2, [pc, #20]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001a7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a02      	ldr	r2, [pc, #8]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 8001a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x298>
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08007ce4 	.word	0x08007ce4
 8001a98:	20000004 	.word	0x20000004
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	4ba0      	ldr	r3, [pc, #640]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a9f      	ldr	r2, [pc, #636]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b9d      	ldr	r3, [pc, #628]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a9c      	ldr	r2, [pc, #624]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d013      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff faec 	bl	800109c <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fae8 	bl	800109c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	@ 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e276      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ada:	4b92      	ldr	r3, [pc, #584]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x2a8>
 8001ae6:	e014      	b.n	8001b12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fad8 	bl	800109c <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fad4 	bl	800109c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	@ 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e262      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b02:	4b88      	ldr	r3, [pc, #544]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2d0>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d060      	beq.n	8001be0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_OscConfig+0x310>
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d119      	bne.n	8001b5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d116      	bne.n	8001b5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b30:	4b7c      	ldr	r3, [pc, #496]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_OscConfig+0x328>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e23f      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b76      	ldr	r3, [pc, #472]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	4973      	ldr	r1, [pc, #460]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b5c:	e040      	b.n	8001be0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d023      	beq.n	8001bae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b66:	4b6f      	ldr	r3, [pc, #444]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff fa93 	bl	800109c <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa8f 	bl	800109c <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e21d      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8c:	4b65      	ldr	r3, [pc, #404]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b62      	ldr	r3, [pc, #392]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	495f      	ldr	r1, [pc, #380]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
 8001bac:	e018      	b.n	8001be0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bae:	4b5d      	ldr	r3, [pc, #372]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a5c      	ldr	r2, [pc, #368]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bba:	f7ff fa6f 	bl	800109c <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc2:	f7ff fa6b 	bl	800109c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1f9      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bd4:	4b53      	ldr	r3, [pc, #332]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f0      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d03c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bfa:	4a4a      	ldr	r2, [pc, #296]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7ff fa4a 	bl	800109c <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fa46 	bl	800109c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1d4      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c1e:	4b41      	ldr	r3, [pc, #260]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ef      	beq.n	8001c0c <HAL_RCC_OscConfig+0x3ec>
 8001c2c:	e01b      	b.n	8001c66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c34:	4a3b      	ldr	r2, [pc, #236]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3e:	f7ff fa2d 	bl	800109c <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c46:	f7ff fa29 	bl	800109c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e1b7      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c58:	4b32      	ldr	r3, [pc, #200]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ef      	bne.n	8001c46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80a6 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c78:	4b2a      	ldr	r3, [pc, #168]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10d      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	4b27      	ldr	r3, [pc, #156]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c88:	4a26      	ldr	r2, [pc, #152]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c90:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca0:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <HAL_RCC_OscConfig+0x508>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d118      	bne.n	8001cde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cac:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <HAL_RCC_OscConfig+0x508>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d28 <HAL_RCC_OscConfig+0x508>)
 8001cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f9f0 	bl	800109c <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc0:	f7ff f9ec 	bl	800109c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e17a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd2:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <HAL_RCC_OscConfig+0x508>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d108      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4d8>
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cec:	4a0d      	ldr	r2, [pc, #52]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cf6:	e029      	b.n	8001d4c <HAL_RCC_OscConfig+0x52c>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d115      	bne.n	8001d2c <HAL_RCC_OscConfig+0x50c>
 8001d00:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d06:	4a07      	ldr	r2, [pc, #28]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d10:	4b04      	ldr	r3, [pc, #16]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d16:	4a03      	ldr	r2, [pc, #12]	@ (8001d24 <HAL_RCC_OscConfig+0x504>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d20:	e014      	b.n	8001d4c <HAL_RCC_OscConfig+0x52c>
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40007000 	.word	0x40007000
 8001d2c:	4b9c      	ldr	r3, [pc, #624]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d32:	4a9b      	ldr	r2, [pc, #620]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d3c:	4b98      	ldr	r3, [pc, #608]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d42:	4a97      	ldr	r2, [pc, #604]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001d44:	f023 0304 	bic.w	r3, r3, #4
 8001d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d016      	beq.n	8001d82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff f9a2 	bl	800109c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7ff f99e 	bl	800109c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e12a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d72:	4b8b      	ldr	r3, [pc, #556]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ed      	beq.n	8001d5c <HAL_RCC_OscConfig+0x53c>
 8001d80:	e015      	b.n	8001dae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d82:	f7ff f98b 	bl	800109c <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff f987 	bl	800109c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e113      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da0:	4b7f      	ldr	r3, [pc, #508]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1ed      	bne.n	8001d8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dae:	7ffb      	ldrb	r3, [r7, #31]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db4:	4b7a      	ldr	r3, [pc, #488]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db8:	4a79      	ldr	r2, [pc, #484]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80fe 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	f040 80d0 	bne.w	8001f74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dd4:	4b72      	ldr	r3, [pc, #456]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d130      	bne.n	8001e4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	3b01      	subs	r3, #1
 8001df4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d127      	bne.n	8001e4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d11f      	bne.n	8001e4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e14:	2a07      	cmp	r2, #7
 8001e16:	bf14      	ite	ne
 8001e18:	2201      	movne	r2, #1
 8001e1a:	2200      	moveq	r2, #0
 8001e1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d113      	bne.n	8001e4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	085b      	lsrs	r3, r3, #1
 8001e42:	3b01      	subs	r3, #1
 8001e44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d06e      	beq.n	8001f28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d069      	beq.n	8001f24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e50:	4b53      	ldr	r3, [pc, #332]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d105      	bne.n	8001e68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e5c:	4b50      	ldr	r3, [pc, #320]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0ad      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e6c:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a4b      	ldr	r2, [pc, #300]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001e72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e78:	f7ff f910 	bl	800109c <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff f90c 	bl	800109c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e09a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e92:	4b43      	ldr	r3, [pc, #268]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9e:	4b40      	ldr	r3, [pc, #256]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	4b40      	ldr	r3, [pc, #256]	@ (8001fa4 <HAL_RCC_OscConfig+0x784>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001eae:	3a01      	subs	r2, #1
 8001eb0:	0112      	lsls	r2, r2, #4
 8001eb2:	4311      	orrs	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001eb8:	0212      	lsls	r2, r2, #8
 8001eba:	4311      	orrs	r1, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ec0:	0852      	lsrs	r2, r2, #1
 8001ec2:	3a01      	subs	r2, #1
 8001ec4:	0552      	lsls	r2, r2, #21
 8001ec6:	4311      	orrs	r1, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ecc:	0852      	lsrs	r2, r2, #1
 8001ece:	3a01      	subs	r2, #1
 8001ed0:	0652      	lsls	r2, r2, #25
 8001ed2:	4311      	orrs	r1, r2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ed8:	0912      	lsrs	r2, r2, #4
 8001eda:	0452      	lsls	r2, r2, #17
 8001edc:	430a      	orrs	r2, r1
 8001ede:	4930      	ldr	r1, [pc, #192]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001efa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001efc:	f7ff f8ce 	bl	800109c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff f8ca 	bl	800109c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e058      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f16:	4b22      	ldr	r3, [pc, #136]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f22:	e050      	b.n	8001fc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e04f      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f28:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d148      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f34:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a19      	ldr	r2, [pc, #100]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001f3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f40:	4b17      	ldr	r3, [pc, #92]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4a16      	ldr	r2, [pc, #88]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001f46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f4c:	f7ff f8a6 	bl	800109c <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f54:	f7ff f8a2 	bl	800109c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e030      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f66:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x734>
 8001f72:	e028      	b.n	8001fc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	d023      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a08      	ldr	r2, [pc, #32]	@ (8001fa0 <HAL_RCC_OscConfig+0x780>)
 8001f80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff f889 	bl	800109c <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f8c:	e00c      	b.n	8001fa8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8e:	f7ff f885 	bl	800109c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d905      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e013      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa8:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <HAL_RCC_OscConfig+0x7b0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ec      	bne.n	8001f8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_RCC_OscConfig+0x7b0>)
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	4905      	ldr	r1, [pc, #20]	@ (8001fd0 <HAL_RCC_OscConfig+0x7b0>)
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_RCC_OscConfig+0x7b4>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60cb      	str	r3, [r1, #12]
 8001fc0:	e001      	b.n	8001fc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3720      	adds	r7, #32
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	feeefffc 	.word	0xfeeefffc

08001fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0e7      	b.n	80021bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b75      	ldr	r3, [pc, #468]	@ (80021c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d910      	bls.n	800201c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b72      	ldr	r3, [pc, #456]	@ (80021c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 0207 	bic.w	r2, r3, #7
 8002002:	4970      	ldr	r1, [pc, #448]	@ (80021c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b6e      	ldr	r3, [pc, #440]	@ (80021c4 <HAL_RCC_ClockConfig+0x1ec>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0cf      	b.n	80021bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d010      	beq.n	800204a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	4b66      	ldr	r3, [pc, #408]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002034:	429a      	cmp	r2, r3
 8002036:	d908      	bls.n	800204a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b63      	ldr	r3, [pc, #396]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4960      	ldr	r1, [pc, #384]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d04c      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205e:	4b5a      	ldr	r3, [pc, #360]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d121      	bne.n	80020ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0a6      	b.n	80021bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002076:	4b54      	ldr	r3, [pc, #336]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d115      	bne.n	80020ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e09a      	b.n	80021bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800208e:	4b4e      	ldr	r3, [pc, #312]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e08e      	b.n	80021bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209e:	4b4a      	ldr	r3, [pc, #296]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e086      	b.n	80021bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ae:	4b46      	ldr	r3, [pc, #280]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f023 0203 	bic.w	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4943      	ldr	r1, [pc, #268]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c0:	f7fe ffec 	bl	800109c <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	e00a      	b.n	80020de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c8:	f7fe ffe8 	bl	800109c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e06e      	b.n	80021bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	4b3a      	ldr	r3, [pc, #232]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 020c 	and.w	r2, r3, #12
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1eb      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d010      	beq.n	800211e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4b31      	ldr	r3, [pc, #196]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002108:	429a      	cmp	r2, r3
 800210a:	d208      	bcs.n	800211e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210c:	4b2e      	ldr	r3, [pc, #184]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	492b      	ldr	r1, [pc, #172]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b29      	ldr	r3, [pc, #164]	@ (80021c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d210      	bcs.n	800214e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b25      	ldr	r3, [pc, #148]	@ (80021c4 <HAL_RCC_ClockConfig+0x1ec>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 0207 	bic.w	r2, r3, #7
 8002134:	4923      	ldr	r1, [pc, #140]	@ (80021c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213c:	4b21      	ldr	r3, [pc, #132]	@ (80021c4 <HAL_RCC_ClockConfig+0x1ec>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e036      	b.n	80021bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800215a:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	4918      	ldr	r1, [pc, #96]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d009      	beq.n	800218c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002178:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4910      	ldr	r1, [pc, #64]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800218c:	f000 f824 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002190:	4602      	mov	r2, r0
 8002192:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	490b      	ldr	r1, [pc, #44]	@ (80021cc <HAL_RCC_ClockConfig+0x1f4>)
 800219e:	5ccb      	ldrb	r3, [r1, r3]
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
 80021a8:	4a09      	ldr	r2, [pc, #36]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 80021aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021ac:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_RCC_ClockConfig+0x1fc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe ff23 	bl	8000ffc <HAL_InitTick>
 80021b6:	4603      	mov	r3, r0
 80021b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80021ba:	7afb      	ldrb	r3, [r7, #11]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08007ce4 	.word	0x08007ce4
 80021d0:	20000004 	.word	0x20000004
 80021d4:	20000008 	.word	0x20000008

080021d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	@ 0x24
 80021dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e6:	4b3e      	ldr	r3, [pc, #248]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f0:	4b3b      	ldr	r3, [pc, #236]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x34>
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b0c      	cmp	r3, #12
 8002204:	d121      	bne.n	800224a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d11e      	bne.n	800224a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800220c:	4b34      	ldr	r3, [pc, #208]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d107      	bne.n	8002228 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002218:	4b31      	ldr	r3, [pc, #196]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800221a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	e005      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002228:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002234:	4a2b      	ldr	r2, [pc, #172]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10d      	bne.n	8002260 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d102      	bne.n	8002256 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002250:	4b25      	ldr	r3, [pc, #148]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	e004      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b08      	cmp	r3, #8
 800225a:	d101      	bne.n	8002260 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800225c:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x114>)
 800225e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2b0c      	cmp	r3, #12
 8002264:	d134      	bne.n	80022d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002266:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d003      	beq.n	800227e <HAL_RCC_GetSysClockFreq+0xa6>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d003      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0xac>
 800227c:	e005      	b.n	800228a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800227e:	4b1a      	ldr	r3, [pc, #104]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002280:	617b      	str	r3, [r7, #20]
      break;
 8002282:	e005      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002284:	4b19      	ldr	r3, [pc, #100]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002286:	617b      	str	r3, [r7, #20]
      break;
 8002288:	e002      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	617b      	str	r3, [r7, #20]
      break;
 800228e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002290:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	3301      	adds	r3, #1
 800229c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	fb03 f202 	mul.w	r2, r3, r2
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	0e5b      	lsrs	r3, r3, #25
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	3301      	adds	r3, #1
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022d0:	69bb      	ldr	r3, [r7, #24]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	@ 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	08007cfc 	.word	0x08007cfc
 80022e8:	00f42400 	.word	0x00f42400
 80022ec:	007a1200 	.word	0x007a1200

080022f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f4:	4b03      	ldr	r3, [pc, #12]	@ (8002304 <HAL_RCC_GetHCLKFreq+0x14>)
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000004 	.word	0x20000004

08002308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800230c:	f7ff fff0 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 8002310:	4602      	mov	r2, r0
 8002312:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	4904      	ldr	r1, [pc, #16]	@ (8002330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800231e:	5ccb      	ldrb	r3, [r1, r3]
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002328:	4618      	mov	r0, r3
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000
 8002330:	08007cf4 	.word	0x08007cf4

08002334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002338:	f7ff ffda 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	0adb      	lsrs	r3, r3, #11
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4904      	ldr	r1, [pc, #16]	@ (800235c <HAL_RCC_GetPCLK2Freq+0x28>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	08007cf4 	.word	0x08007cf4

08002360 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800236c:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002378:	f7ff f9ee 	bl	8001758 <HAL_PWREx_GetVoltageRange>
 800237c:	6178      	str	r0, [r7, #20]
 800237e:	e014      	b.n	80023aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002380:	4b25      	ldr	r3, [pc, #148]	@ (8002418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002384:	4a24      	ldr	r2, [pc, #144]	@ (8002418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800238a:	6593      	str	r3, [r2, #88]	@ 0x58
 800238c:	4b22      	ldr	r3, [pc, #136]	@ (8002418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002398:	f7ff f9de 	bl	8001758 <HAL_PWREx_GetVoltageRange>
 800239c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4b1e      	ldr	r3, [pc, #120]	@ (8002418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023b0:	d10b      	bne.n	80023ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b80      	cmp	r3, #128	@ 0x80
 80023b6:	d919      	bls.n	80023ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80023bc:	d902      	bls.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023be:	2302      	movs	r3, #2
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	e013      	b.n	80023ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023c4:	2301      	movs	r3, #1
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	e010      	b.n	80023ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b80      	cmp	r3, #128	@ 0x80
 80023ce:	d902      	bls.n	80023d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023d0:	2303      	movs	r3, #3
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	e00a      	b.n	80023ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b80      	cmp	r3, #128	@ 0x80
 80023da:	d102      	bne.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023dc:	2302      	movs	r3, #2
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	e004      	b.n	80023ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b70      	cmp	r3, #112	@ 0x70
 80023e6:	d101      	bne.n	80023ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023e8:	2301      	movs	r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 0207 	bic.w	r2, r3, #7
 80023f4:	4909      	ldr	r1, [pc, #36]	@ (800241c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023fc:	4b07      	ldr	r3, [pc, #28]	@ (800241c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	429a      	cmp	r2, r3
 8002408:	d001      	beq.n	800240e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	40022000 	.word	0x40022000

08002420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002428:	2300      	movs	r3, #0
 800242a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800242c:	2300      	movs	r3, #0
 800242e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002438:	2b00      	cmp	r3, #0
 800243a:	d041      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002440:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002444:	d02a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002446:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800244a:	d824      	bhi.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800244c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002450:	d008      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002452:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002456:	d81e      	bhi.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800245c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002460:	d010      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002462:	e018      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002464:	4b86      	ldr	r3, [pc, #536]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a85      	ldr	r2, [pc, #532]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002470:	e015      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3304      	adds	r3, #4
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fabb 	bl	80029f4 <RCCEx_PLLSAI1_Config>
 800247e:	4603      	mov	r3, r0
 8002480:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002482:	e00c      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3320      	adds	r3, #32
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fba6 	bl	8002bdc <RCCEx_PLLSAI2_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002494:	e003      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	74fb      	strb	r3, [r7, #19]
      break;
 800249a:	e000      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800249c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024a4:	4b76      	ldr	r3, [pc, #472]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024b2:	4973      	ldr	r1, [pc, #460]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024ba:	e001      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d041      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024d4:	d02a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024da:	d824      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024e0:	d008      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024e6:	d81e      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f0:	d010      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024f2:	e018      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024f4:	4b62      	ldr	r3, [pc, #392]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a61      	ldr	r2, [pc, #388]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002500:	e015      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3304      	adds	r3, #4
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fa73 	bl	80029f4 <RCCEx_PLLSAI1_Config>
 800250e:	4603      	mov	r3, r0
 8002510:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002512:	e00c      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3320      	adds	r3, #32
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fb5e 	bl	8002bdc <RCCEx_PLLSAI2_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002524:	e003      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	74fb      	strb	r3, [r7, #19]
      break;
 800252a:	e000      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800252c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800252e:	7cfb      	ldrb	r3, [r7, #19]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002534:	4b52      	ldr	r3, [pc, #328]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002542:	494f      	ldr	r1, [pc, #316]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800254a:	e001      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80a0 	beq.w	800269e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002562:	4b47      	ldr	r3, [pc, #284]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002572:	2300      	movs	r3, #0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00d      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002578:	4b41      	ldr	r3, [pc, #260]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257c:	4a40      	ldr	r2, [pc, #256]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002582:	6593      	str	r3, [r2, #88]	@ 0x58
 8002584:	4b3e      	ldr	r3, [pc, #248]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002590:	2301      	movs	r3, #1
 8002592:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002594:	4b3b      	ldr	r3, [pc, #236]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a3a      	ldr	r2, [pc, #232]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800259a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800259e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025a0:	f7fe fd7c 	bl	800109c <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025a6:	e009      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a8:	f7fe fd78 	bl	800109c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d902      	bls.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	74fb      	strb	r3, [r7, #19]
        break;
 80025ba:	e005      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025bc:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ef      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d15c      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01f      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d019      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025ec:	4b24      	ldr	r3, [pc, #144]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025f8:	4b21      	ldr	r3, [pc, #132]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fe:	4a20      	ldr	r2, [pc, #128]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002608:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260e:	4a1c      	ldr	r2, [pc, #112]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002618:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7fe fd37 	bl	800109c <HAL_GetTick>
 800262e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002630:	e00b      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7fe fd33 	bl	800109c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d902      	bls.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	74fb      	strb	r3, [r7, #19]
            break;
 8002648:	e006      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264a:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0ec      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800265e:	4b08      	ldr	r3, [pc, #32]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002664:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800266e:	4904      	ldr	r1, [pc, #16]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002676:	e009      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	74bb      	strb	r3, [r7, #18]
 800267c:	e006      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268c:	7c7b      	ldrb	r3, [r7, #17]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002692:	4b9e      	ldr	r3, [pc, #632]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002696:	4a9d      	ldr	r2, [pc, #628]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800269c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026aa:	4b98      	ldr	r3, [pc, #608]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b0:	f023 0203 	bic.w	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b8:	4994      	ldr	r1, [pc, #592]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026cc:	4b8f      	ldr	r3, [pc, #572]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d2:	f023 020c 	bic.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026da:	498c      	ldr	r1, [pc, #560]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ee:	4b87      	ldr	r3, [pc, #540]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	4983      	ldr	r1, [pc, #524]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002710:	4b7e      	ldr	r3, [pc, #504]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002716:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271e:	497b      	ldr	r1, [pc, #492]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002732:	4b76      	ldr	r3, [pc, #472]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002740:	4972      	ldr	r1, [pc, #456]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002754:	4b6d      	ldr	r3, [pc, #436]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002762:	496a      	ldr	r1, [pc, #424]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002776:	4b65      	ldr	r3, [pc, #404]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002784:	4961      	ldr	r1, [pc, #388]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002798:	4b5c      	ldr	r3, [pc, #368]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a6:	4959      	ldr	r1, [pc, #356]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ba:	4b54      	ldr	r3, [pc, #336]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c8:	4950      	ldr	r1, [pc, #320]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027dc:	4b4b      	ldr	r3, [pc, #300]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ea:	4948      	ldr	r1, [pc, #288]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027fe:	4b43      	ldr	r3, [pc, #268]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002804:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280c:	493f      	ldr	r1, [pc, #252]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d028      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002820:	4b3a      	ldr	r3, [pc, #232]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002826:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800282e:	4937      	ldr	r1, [pc, #220]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800283a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800283e:	d106      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002840:	4b32      	ldr	r3, [pc, #200]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a31      	ldr	r2, [pc, #196]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800284a:	60d3      	str	r3, [r2, #12]
 800284c:	e011      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002852:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002856:	d10c      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3304      	adds	r3, #4
 800285c:	2101      	movs	r1, #1
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f8c8 	bl	80029f4 <RCCEx_PLLSAI1_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d028      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800287e:	4b23      	ldr	r3, [pc, #140]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002884:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288c:	491f      	ldr	r1, [pc, #124]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800289c:	d106      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800289e:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4a1a      	ldr	r2, [pc, #104]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028a8:	60d3      	str	r3, [r2, #12]
 80028aa:	e011      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2101      	movs	r1, #1
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f899 	bl	80029f4 <RCCEx_PLLSAI1_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d02b      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ea:	4908      	ldr	r1, [pc, #32]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028fa:	d109      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028fc:	4b03      	ldr	r3, [pc, #12]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a02      	ldr	r2, [pc, #8]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002906:	60d3      	str	r3, [r2, #12]
 8002908:	e014      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002914:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002918:	d10c      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	2101      	movs	r1, #1
 8002920:	4618      	mov	r0, r3
 8002922:	f000 f867 	bl	80029f4 <RCCEx_PLLSAI1_Config>
 8002926:	4603      	mov	r3, r0
 8002928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800292a:	7cfb      	ldrb	r3, [r7, #19]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d02f      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002940:	4b2b      	ldr	r3, [pc, #172]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002946:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800294e:	4928      	ldr	r1, [pc, #160]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800295a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800295e:	d10d      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	2102      	movs	r1, #2
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f844 	bl	80029f4 <RCCEx_PLLSAI1_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d014      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002976:	7cfb      	ldrb	r3, [r7, #19]
 8002978:	74bb      	strb	r3, [r7, #18]
 800297a:	e011      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3320      	adds	r3, #32
 800298a:	2102      	movs	r1, #2
 800298c:	4618      	mov	r0, r3
 800298e:	f000 f925 	bl	8002bdc <RCCEx_PLLSAI2_Config>
 8002992:	4603      	mov	r3, r0
 8002994:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002996:	7cfb      	ldrb	r3, [r7, #19]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029ac:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029ba:	490d      	ldr	r1, [pc, #52]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029ce:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029de:	4904      	ldr	r1, [pc, #16]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000

080029f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a02:	4b75      	ldr	r3, [pc, #468]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d018      	beq.n	8002a40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a0e:	4b72      	ldr	r3, [pc, #456]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0203 	and.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d10d      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
       ||
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a26:	4b6c      	ldr	r3, [pc, #432]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
       ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d047      	beq.n	8002aca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
 8002a3e:	e044      	b.n	8002aca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d018      	beq.n	8002a7a <RCCEx_PLLSAI1_Config+0x86>
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d825      	bhi.n	8002a98 <RCCEx_PLLSAI1_Config+0xa4>
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d002      	beq.n	8002a56 <RCCEx_PLLSAI1_Config+0x62>
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d009      	beq.n	8002a68 <RCCEx_PLLSAI1_Config+0x74>
 8002a54:	e020      	b.n	8002a98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a56:	4b60      	ldr	r3, [pc, #384]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d11d      	bne.n	8002a9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a66:	e01a      	b.n	8002a9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a68:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d116      	bne.n	8002aa2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a78:	e013      	b.n	8002aa2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a7a:	4b57      	ldr	r3, [pc, #348]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10f      	bne.n	8002aa6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a86:	4b54      	ldr	r3, [pc, #336]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a96:	e006      	b.n	8002aa6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9c:	e004      	b.n	8002aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e002      	b.n	8002aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e000      	b.n	8002aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aae:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	4944      	ldr	r1, [pc, #272]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d17d      	bne.n	8002bcc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ad0:	4b41      	ldr	r3, [pc, #260]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a40      	ldr	r2, [pc, #256]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002adc:	f7fe fade 	bl	800109c <HAL_GetTick>
 8002ae0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ae2:	e009      	b.n	8002af8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ae4:	f7fe fada 	bl	800109c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d902      	bls.n	8002af8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	73fb      	strb	r3, [r7, #15]
        break;
 8002af6:	e005      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002af8:	4b37      	ldr	r3, [pc, #220]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1ef      	bne.n	8002ae4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d160      	bne.n	8002bcc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d111      	bne.n	8002b34 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b10:	4b31      	ldr	r3, [pc, #196]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6892      	ldr	r2, [r2, #8]
 8002b20:	0211      	lsls	r1, r2, #8
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68d2      	ldr	r2, [r2, #12]
 8002b26:	0912      	lsrs	r2, r2, #4
 8002b28:	0452      	lsls	r2, r2, #17
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	492a      	ldr	r1, [pc, #168]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	610b      	str	r3, [r1, #16]
 8002b32:	e027      	b.n	8002b84 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d112      	bne.n	8002b60 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b3a:	4b27      	ldr	r3, [pc, #156]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b42:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6892      	ldr	r2, [r2, #8]
 8002b4a:	0211      	lsls	r1, r2, #8
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6912      	ldr	r2, [r2, #16]
 8002b50:	0852      	lsrs	r2, r2, #1
 8002b52:	3a01      	subs	r2, #1
 8002b54:	0552      	lsls	r2, r2, #21
 8002b56:	430a      	orrs	r2, r1
 8002b58:	491f      	ldr	r1, [pc, #124]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	610b      	str	r3, [r1, #16]
 8002b5e:	e011      	b.n	8002b84 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b60:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6892      	ldr	r2, [r2, #8]
 8002b70:	0211      	lsls	r1, r2, #8
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6952      	ldr	r2, [r2, #20]
 8002b76:	0852      	lsrs	r2, r2, #1
 8002b78:	3a01      	subs	r2, #1
 8002b7a:	0652      	lsls	r2, r2, #25
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	4916      	ldr	r1, [pc, #88]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b84:	4b14      	ldr	r3, [pc, #80]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a13      	ldr	r2, [pc, #76]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7fe fa84 	bl	800109c <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b96:	e009      	b.n	8002bac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b98:	f7fe fa80 	bl	800109c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d902      	bls.n	8002bac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	73fb      	strb	r3, [r7, #15]
          break;
 8002baa:	e005      	b.n	8002bb8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bac:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ef      	beq.n	8002b98 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	4904      	ldr	r1, [pc, #16]	@ (8002bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000

08002bdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bea:	4b6a      	ldr	r3, [pc, #424]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d018      	beq.n	8002c28 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bf6:	4b67      	ldr	r3, [pc, #412]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 0203 	and.w	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d10d      	bne.n	8002c22 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
       ||
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c0e:	4b61      	ldr	r3, [pc, #388]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d047      	beq.n	8002cb2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	e044      	b.n	8002cb2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d018      	beq.n	8002c62 <RCCEx_PLLSAI2_Config+0x86>
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d825      	bhi.n	8002c80 <RCCEx_PLLSAI2_Config+0xa4>
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d002      	beq.n	8002c3e <RCCEx_PLLSAI2_Config+0x62>
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d009      	beq.n	8002c50 <RCCEx_PLLSAI2_Config+0x74>
 8002c3c:	e020      	b.n	8002c80 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c3e:	4b55      	ldr	r3, [pc, #340]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d11d      	bne.n	8002c86 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4e:	e01a      	b.n	8002c86 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c50:	4b50      	ldr	r3, [pc, #320]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d116      	bne.n	8002c8a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c60:	e013      	b.n	8002c8a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c62:	4b4c      	ldr	r3, [pc, #304]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c6e:	4b49      	ldr	r3, [pc, #292]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c7e:	e006      	b.n	8002c8e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
      break;
 8002c84:	e004      	b.n	8002c90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c86:	bf00      	nop
 8002c88:	e002      	b.n	8002c90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c8a:	bf00      	nop
 8002c8c:	e000      	b.n	8002c90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10d      	bne.n	8002cb2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c96:	4b3f      	ldr	r3, [pc, #252]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6819      	ldr	r1, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	430b      	orrs	r3, r1
 8002cac:	4939      	ldr	r1, [pc, #228]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d167      	bne.n	8002d88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cb8:	4b36      	ldr	r3, [pc, #216]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a35      	ldr	r2, [pc, #212]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc4:	f7fe f9ea 	bl	800109c <HAL_GetTick>
 8002cc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cca:	e009      	b.n	8002ce0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ccc:	f7fe f9e6 	bl	800109c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d902      	bls.n	8002ce0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	73fb      	strb	r3, [r7, #15]
        break;
 8002cde:	e005      	b.n	8002cec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ef      	bne.n	8002ccc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d14a      	bne.n	8002d88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d111      	bne.n	8002d1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cf8:	4b26      	ldr	r3, [pc, #152]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6892      	ldr	r2, [r2, #8]
 8002d08:	0211      	lsls	r1, r2, #8
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68d2      	ldr	r2, [r2, #12]
 8002d0e:	0912      	lsrs	r2, r2, #4
 8002d10:	0452      	lsls	r2, r2, #17
 8002d12:	430a      	orrs	r2, r1
 8002d14:	491f      	ldr	r1, [pc, #124]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	614b      	str	r3, [r1, #20]
 8002d1a:	e011      	b.n	8002d40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6892      	ldr	r2, [r2, #8]
 8002d2c:	0211      	lsls	r1, r2, #8
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6912      	ldr	r2, [r2, #16]
 8002d32:	0852      	lsrs	r2, r2, #1
 8002d34:	3a01      	subs	r2, #1
 8002d36:	0652      	lsls	r2, r2, #25
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	4916      	ldr	r1, [pc, #88]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d40:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a13      	ldr	r2, [pc, #76]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4c:	f7fe f9a6 	bl	800109c <HAL_GetTick>
 8002d50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d52:	e009      	b.n	8002d68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d54:	f7fe f9a2 	bl	800109c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d902      	bls.n	8002d68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	73fb      	strb	r3, [r7, #15]
          break;
 8002d66:	e005      	b.n	8002d74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d68:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0ef      	beq.n	8002d54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d7a:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	4904      	ldr	r1, [pc, #16]	@ (8002d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000

08002d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e040      	b.n	8002e2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe f808 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	@ 0x24
 8002dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fedc 	bl	8003b9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fc21 	bl	800362c <UART_SetConfig>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e01b      	b.n	8002e2c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 ff5b 	bl	8003ce0 <UART_CheckIdleState>
 8002e2a:	4603      	mov	r3, r0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	@ 0x28
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d177      	bne.n	8002f3c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_UART_Transmit+0x24>
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e070      	b.n	8002f3e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2221      	movs	r2, #33	@ 0x21
 8002e68:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e6a:	f7fe f917 	bl	800109c <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	88fa      	ldrh	r2, [r7, #6]
 8002e74:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	88fa      	ldrh	r2, [r7, #6]
 8002e7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e88:	d108      	bne.n	8002e9c <HAL_UART_Transmit+0x68>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	e003      	b.n	8002ea4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ea4:	e02f      	b.n	8002f06 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2200      	movs	r2, #0
 8002eae:	2180      	movs	r1, #128	@ 0x80
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 ffbd 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d004      	beq.n	8002ec6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e03b      	b.n	8002f3e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	881a      	ldrh	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed8:	b292      	uxth	r2, r2
 8002eda:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	3302      	adds	r3, #2
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e007      	b.n	8002ef4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1c9      	bne.n	8002ea6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2140      	movs	r1, #64	@ 0x40
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 ff87 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d004      	beq.n	8002f32 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e005      	b.n	8002f3e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	@ 0x28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	4613      	mov	r3, r2
 8002f54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d137      	bne.n	8002fd0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_UART_Receive_IT+0x24>
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e030      	b.n	8002fd2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a18      	ldr	r2, [pc, #96]	@ (8002fdc <HAL_UART_Receive_IT+0x94>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d01f      	beq.n	8002fc0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d018      	beq.n	8002fc0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	e853 3f00 	ldrex	r3, [r3]
 8002f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	623b      	str	r3, [r7, #32]
 8002fae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb0:	69f9      	ldr	r1, [r7, #28]
 8002fb2:	6a3a      	ldr	r2, [r7, #32]
 8002fb4:	e841 2300 	strex	r3, r2, [r1]
 8002fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e6      	bne.n	8002f8e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 ffa0 	bl	8003f0c <UART_Start_Receive_IT>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	e000      	b.n	8002fd2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
  }
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3728      	adds	r7, #40	@ 0x28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40008000 	.word	0x40008000

08002fe0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b0ba      	sub	sp, #232	@ 0xe8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003006:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800300a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800300e:	4013      	ands	r3, r2
 8003010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d115      	bne.n	8003048 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800301c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00f      	beq.n	8003048 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b00      	cmp	r3, #0
 8003032:	d009      	beq.n	8003048 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 82ca 	beq.w	80035d2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
      }
      return;
 8003046:	e2c4      	b.n	80035d2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8117 	beq.w	8003280 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800305e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003062:	4b85      	ldr	r3, [pc, #532]	@ (8003278 <HAL_UART_IRQHandler+0x298>)
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 810a 	beq.w	8003280 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800306c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d011      	beq.n	800309c <HAL_UART_IRQHandler+0xbc>
 8003078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800307c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2201      	movs	r2, #1
 800308a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800309c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d011      	beq.n	80030cc <HAL_UART_IRQHandler+0xec>
 80030a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2202      	movs	r2, #2
 80030ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c2:	f043 0204 	orr.w	r2, r3, #4
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d011      	beq.n	80030fc <HAL_UART_IRQHandler+0x11c>
 80030d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2204      	movs	r2, #4
 80030ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030f2:	f043 0202 	orr.w	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d017      	beq.n	8003138 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003118:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2208      	movs	r2, #8
 8003126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800312e:	f043 0208 	orr.w	r2, r3, #8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800313c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003140:	2b00      	cmp	r3, #0
 8003142:	d012      	beq.n	800316a <HAL_UART_IRQHandler+0x18a>
 8003144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003148:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00c      	beq.n	800316a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8230 	beq.w	80035d6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00d      	beq.n	800319e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b2:	2b40      	cmp	r3, #64	@ 0x40
 80031b4:	d005      	beq.n	80031c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d04f      	beq.n	8003262 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 ff68 	bl	8004098 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d2:	2b40      	cmp	r3, #64	@ 0x40
 80031d4:	d141      	bne.n	800325a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3308      	adds	r3, #8
 80031dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3308      	adds	r3, #8
 80031fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003202:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800320e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800321a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1d9      	bne.n	80031d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003226:	2b00      	cmp	r3, #0
 8003228:	d013      	beq.n	8003252 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322e:	4a13      	ldr	r2, [pc, #76]	@ (800327c <HAL_UART_IRQHandler+0x29c>)
 8003230:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe f88b 	bl	8001352 <HAL_DMA_Abort_IT>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d017      	beq.n	8003272 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800324c:	4610      	mov	r0, r2
 800324e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003250:	e00f      	b.n	8003272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f9d4 	bl	8003600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	e00b      	b.n	8003272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f9d0 	bl	8003600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003260:	e007      	b.n	8003272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f9cc 	bl	8003600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003270:	e1b1      	b.n	80035d6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003272:	bf00      	nop
    return;
 8003274:	e1af      	b.n	80035d6 <HAL_UART_IRQHandler+0x5f6>
 8003276:	bf00      	nop
 8003278:	04000120 	.word	0x04000120
 800327c:	08004161 	.word	0x08004161

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003284:	2b01      	cmp	r3, #1
 8003286:	f040 816a 	bne.w	800355e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800328a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8163 	beq.w	800355e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 815c 	beq.w	800355e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2210      	movs	r2, #16
 80032ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b8:	2b40      	cmp	r3, #64	@ 0x40
 80032ba:	f040 80d4 	bne.w	8003466 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80ad 	beq.w	800342e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032de:	429a      	cmp	r2, r3
 80032e0:	f080 80a5 	bcs.w	800342e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f040 8086 	bne.w	800340c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003308:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003314:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800331c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800332a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800332e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003336:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003342:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1da      	bne.n	8003300 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3308      	adds	r3, #8
 8003350:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800335a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3308      	adds	r3, #8
 800336a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800336e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003372:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003376:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800337a:	e841 2300 	strex	r3, r2, [r1]
 800337e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003380:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e1      	bne.n	800334a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3308      	adds	r3, #8
 800338c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003390:	e853 3f00 	ldrex	r3, [r3]
 8003394:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003396:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800339c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3308      	adds	r3, #8
 80033a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e3      	bne.n	8003386 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033dc:	f023 0310 	bic.w	r3, r3, #16
 80033e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e4      	bne.n	80033cc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd ff65 	bl	80012d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800341e:	b29b      	uxth	r3, r3
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	b29b      	uxth	r3, r3
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8f4 	bl	8003614 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800342c:	e0d5      	b.n	80035da <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003434:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003438:	429a      	cmp	r2, r3
 800343a:	f040 80ce 	bne.w	80035da <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b20      	cmp	r3, #32
 800344c:	f040 80c5 	bne.w	80035da <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800345c:	4619      	mov	r1, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f8d8 	bl	8003614 <HAL_UARTEx_RxEventCallback>
      return;
 8003464:	e0b9      	b.n	80035da <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003472:	b29b      	uxth	r3, r3
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80ab 	beq.w	80035de <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80a6 	beq.w	80035de <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349a:	e853 3f00 	ldrex	r3, [r3]
 800349e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034bc:	e841 2300 	strex	r3, r2, [r1]
 80034c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1e4      	bne.n	8003492 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3308      	adds	r3, #8
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	623b      	str	r3, [r7, #32]
   return(result);
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3308      	adds	r3, #8
 80034e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80034ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e3      	bne.n	80034c8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	60fb      	str	r3, [r7, #12]
   return(result);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f023 0310 	bic.w	r3, r3, #16
 8003528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	69b9      	ldr	r1, [r7, #24]
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	e841 2300 	strex	r3, r2, [r1]
 8003542:	617b      	str	r3, [r7, #20]
   return(result);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e4      	bne.n	8003514 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2202      	movs	r2, #2
 800354e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003554:	4619      	mov	r1, r3
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f85c 	bl	8003614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800355c:	e03f      	b.n	80035de <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800355e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00e      	beq.n	8003588 <HAL_UART_IRQHandler+0x5a8>
 800356a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800356e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800357e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 ffe9 	bl	8004558 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003586:	e02d      	b.n	80035e4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00e      	beq.n	80035b2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01c      	beq.n	80035e2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
    }
    return;
 80035b0:	e017      	b.n	80035e2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d012      	beq.n	80035e4 <HAL_UART_IRQHandler+0x604>
 80035be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00c      	beq.n	80035e4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fdde 	bl	800418c <UART_EndTransmit_IT>
    return;
 80035d0:	e008      	b.n	80035e4 <HAL_UART_IRQHandler+0x604>
      return;
 80035d2:	bf00      	nop
 80035d4:	e006      	b.n	80035e4 <HAL_UART_IRQHandler+0x604>
    return;
 80035d6:	bf00      	nop
 80035d8:	e004      	b.n	80035e4 <HAL_UART_IRQHandler+0x604>
      return;
 80035da:	bf00      	nop
 80035dc:	e002      	b.n	80035e4 <HAL_UART_IRQHandler+0x604>
      return;
 80035de:	bf00      	nop
 80035e0:	e000      	b.n	80035e4 <HAL_UART_IRQHandler+0x604>
    return;
 80035e2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035e4:	37e8      	adds	r7, #232	@ 0xe8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop

080035ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800362c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003630:	b08a      	sub	sp, #40	@ 0x28
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	431a      	orrs	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	4313      	orrs	r3, r2
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4ba4      	ldr	r3, [pc, #656]	@ (80038ec <UART_SetConfig+0x2c0>)
 800365c:	4013      	ands	r3, r2
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003664:	430b      	orrs	r3, r1
 8003666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a99      	ldr	r2, [pc, #612]	@ (80038f0 <UART_SetConfig+0x2c4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003694:	4313      	orrs	r3, r2
 8003696:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a8:	430a      	orrs	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a90      	ldr	r2, [pc, #576]	@ (80038f4 <UART_SetConfig+0x2c8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d126      	bne.n	8003704 <UART_SetConfig+0xd8>
 80036b6:	4b90      	ldr	r3, [pc, #576]	@ (80038f8 <UART_SetConfig+0x2cc>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d81b      	bhi.n	80036fc <UART_SetConfig+0xd0>
 80036c4:	a201      	add	r2, pc, #4	@ (adr r2, 80036cc <UART_SetConfig+0xa0>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	080036ed 	.word	0x080036ed
 80036d4:	080036e5 	.word	0x080036e5
 80036d8:	080036f5 	.word	0x080036f5
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e2:	e116      	b.n	8003912 <UART_SetConfig+0x2e6>
 80036e4:	2302      	movs	r3, #2
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ea:	e112      	b.n	8003912 <UART_SetConfig+0x2e6>
 80036ec:	2304      	movs	r3, #4
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f2:	e10e      	b.n	8003912 <UART_SetConfig+0x2e6>
 80036f4:	2308      	movs	r3, #8
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036fa:	e10a      	b.n	8003912 <UART_SetConfig+0x2e6>
 80036fc:	2310      	movs	r3, #16
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003702:	e106      	b.n	8003912 <UART_SetConfig+0x2e6>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a7c      	ldr	r2, [pc, #496]	@ (80038fc <UART_SetConfig+0x2d0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d138      	bne.n	8003780 <UART_SetConfig+0x154>
 800370e:	4b7a      	ldr	r3, [pc, #488]	@ (80038f8 <UART_SetConfig+0x2cc>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003714:	f003 030c 	and.w	r3, r3, #12
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d82d      	bhi.n	8003778 <UART_SetConfig+0x14c>
 800371c:	a201      	add	r2, pc, #4	@ (adr r2, 8003724 <UART_SetConfig+0xf8>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003759 	.word	0x08003759
 8003728:	08003779 	.word	0x08003779
 800372c:	08003779 	.word	0x08003779
 8003730:	08003779 	.word	0x08003779
 8003734:	08003769 	.word	0x08003769
 8003738:	08003779 	.word	0x08003779
 800373c:	08003779 	.word	0x08003779
 8003740:	08003779 	.word	0x08003779
 8003744:	08003761 	.word	0x08003761
 8003748:	08003779 	.word	0x08003779
 800374c:	08003779 	.word	0x08003779
 8003750:	08003779 	.word	0x08003779
 8003754:	08003771 	.word	0x08003771
 8003758:	2300      	movs	r3, #0
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800375e:	e0d8      	b.n	8003912 <UART_SetConfig+0x2e6>
 8003760:	2302      	movs	r3, #2
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003766:	e0d4      	b.n	8003912 <UART_SetConfig+0x2e6>
 8003768:	2304      	movs	r3, #4
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800376e:	e0d0      	b.n	8003912 <UART_SetConfig+0x2e6>
 8003770:	2308      	movs	r3, #8
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003776:	e0cc      	b.n	8003912 <UART_SetConfig+0x2e6>
 8003778:	2310      	movs	r3, #16
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800377e:	e0c8      	b.n	8003912 <UART_SetConfig+0x2e6>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a5e      	ldr	r2, [pc, #376]	@ (8003900 <UART_SetConfig+0x2d4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d125      	bne.n	80037d6 <UART_SetConfig+0x1aa>
 800378a:	4b5b      	ldr	r3, [pc, #364]	@ (80038f8 <UART_SetConfig+0x2cc>)
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003790:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003794:	2b30      	cmp	r3, #48	@ 0x30
 8003796:	d016      	beq.n	80037c6 <UART_SetConfig+0x19a>
 8003798:	2b30      	cmp	r3, #48	@ 0x30
 800379a:	d818      	bhi.n	80037ce <UART_SetConfig+0x1a2>
 800379c:	2b20      	cmp	r3, #32
 800379e:	d00a      	beq.n	80037b6 <UART_SetConfig+0x18a>
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d814      	bhi.n	80037ce <UART_SetConfig+0x1a2>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <UART_SetConfig+0x182>
 80037a8:	2b10      	cmp	r3, #16
 80037aa:	d008      	beq.n	80037be <UART_SetConfig+0x192>
 80037ac:	e00f      	b.n	80037ce <UART_SetConfig+0x1a2>
 80037ae:	2300      	movs	r3, #0
 80037b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b4:	e0ad      	b.n	8003912 <UART_SetConfig+0x2e6>
 80037b6:	2302      	movs	r3, #2
 80037b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037bc:	e0a9      	b.n	8003912 <UART_SetConfig+0x2e6>
 80037be:	2304      	movs	r3, #4
 80037c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c4:	e0a5      	b.n	8003912 <UART_SetConfig+0x2e6>
 80037c6:	2308      	movs	r3, #8
 80037c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037cc:	e0a1      	b.n	8003912 <UART_SetConfig+0x2e6>
 80037ce:	2310      	movs	r3, #16
 80037d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037d4:	e09d      	b.n	8003912 <UART_SetConfig+0x2e6>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a4a      	ldr	r2, [pc, #296]	@ (8003904 <UART_SetConfig+0x2d8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d125      	bne.n	800382c <UART_SetConfig+0x200>
 80037e0:	4b45      	ldr	r3, [pc, #276]	@ (80038f8 <UART_SetConfig+0x2cc>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80037ec:	d016      	beq.n	800381c <UART_SetConfig+0x1f0>
 80037ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80037f0:	d818      	bhi.n	8003824 <UART_SetConfig+0x1f8>
 80037f2:	2b80      	cmp	r3, #128	@ 0x80
 80037f4:	d00a      	beq.n	800380c <UART_SetConfig+0x1e0>
 80037f6:	2b80      	cmp	r3, #128	@ 0x80
 80037f8:	d814      	bhi.n	8003824 <UART_SetConfig+0x1f8>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <UART_SetConfig+0x1d8>
 80037fe:	2b40      	cmp	r3, #64	@ 0x40
 8003800:	d008      	beq.n	8003814 <UART_SetConfig+0x1e8>
 8003802:	e00f      	b.n	8003824 <UART_SetConfig+0x1f8>
 8003804:	2300      	movs	r3, #0
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800380a:	e082      	b.n	8003912 <UART_SetConfig+0x2e6>
 800380c:	2302      	movs	r3, #2
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003812:	e07e      	b.n	8003912 <UART_SetConfig+0x2e6>
 8003814:	2304      	movs	r3, #4
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800381a:	e07a      	b.n	8003912 <UART_SetConfig+0x2e6>
 800381c:	2308      	movs	r3, #8
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003822:	e076      	b.n	8003912 <UART_SetConfig+0x2e6>
 8003824:	2310      	movs	r3, #16
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800382a:	e072      	b.n	8003912 <UART_SetConfig+0x2e6>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a35      	ldr	r2, [pc, #212]	@ (8003908 <UART_SetConfig+0x2dc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d12a      	bne.n	800388c <UART_SetConfig+0x260>
 8003836:	4b30      	ldr	r3, [pc, #192]	@ (80038f8 <UART_SetConfig+0x2cc>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003840:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003844:	d01a      	beq.n	800387c <UART_SetConfig+0x250>
 8003846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800384a:	d81b      	bhi.n	8003884 <UART_SetConfig+0x258>
 800384c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003850:	d00c      	beq.n	800386c <UART_SetConfig+0x240>
 8003852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003856:	d815      	bhi.n	8003884 <UART_SetConfig+0x258>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <UART_SetConfig+0x238>
 800385c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003860:	d008      	beq.n	8003874 <UART_SetConfig+0x248>
 8003862:	e00f      	b.n	8003884 <UART_SetConfig+0x258>
 8003864:	2300      	movs	r3, #0
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386a:	e052      	b.n	8003912 <UART_SetConfig+0x2e6>
 800386c:	2302      	movs	r3, #2
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003872:	e04e      	b.n	8003912 <UART_SetConfig+0x2e6>
 8003874:	2304      	movs	r3, #4
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800387a:	e04a      	b.n	8003912 <UART_SetConfig+0x2e6>
 800387c:	2308      	movs	r3, #8
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003882:	e046      	b.n	8003912 <UART_SetConfig+0x2e6>
 8003884:	2310      	movs	r3, #16
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800388a:	e042      	b.n	8003912 <UART_SetConfig+0x2e6>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a17      	ldr	r2, [pc, #92]	@ (80038f0 <UART_SetConfig+0x2c4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d13a      	bne.n	800390c <UART_SetConfig+0x2e0>
 8003896:	4b18      	ldr	r3, [pc, #96]	@ (80038f8 <UART_SetConfig+0x2cc>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038a4:	d01a      	beq.n	80038dc <UART_SetConfig+0x2b0>
 80038a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038aa:	d81b      	bhi.n	80038e4 <UART_SetConfig+0x2b8>
 80038ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b0:	d00c      	beq.n	80038cc <UART_SetConfig+0x2a0>
 80038b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b6:	d815      	bhi.n	80038e4 <UART_SetConfig+0x2b8>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <UART_SetConfig+0x298>
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c0:	d008      	beq.n	80038d4 <UART_SetConfig+0x2a8>
 80038c2:	e00f      	b.n	80038e4 <UART_SetConfig+0x2b8>
 80038c4:	2300      	movs	r3, #0
 80038c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ca:	e022      	b.n	8003912 <UART_SetConfig+0x2e6>
 80038cc:	2302      	movs	r3, #2
 80038ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038d2:	e01e      	b.n	8003912 <UART_SetConfig+0x2e6>
 80038d4:	2304      	movs	r3, #4
 80038d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038da:	e01a      	b.n	8003912 <UART_SetConfig+0x2e6>
 80038dc:	2308      	movs	r3, #8
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038e2:	e016      	b.n	8003912 <UART_SetConfig+0x2e6>
 80038e4:	2310      	movs	r3, #16
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ea:	e012      	b.n	8003912 <UART_SetConfig+0x2e6>
 80038ec:	efff69f3 	.word	0xefff69f3
 80038f0:	40008000 	.word	0x40008000
 80038f4:	40013800 	.word	0x40013800
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40004400 	.word	0x40004400
 8003900:	40004800 	.word	0x40004800
 8003904:	40004c00 	.word	0x40004c00
 8003908:	40005000 	.word	0x40005000
 800390c:	2310      	movs	r3, #16
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a9f      	ldr	r2, [pc, #636]	@ (8003b94 <UART_SetConfig+0x568>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d17a      	bne.n	8003a12 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800391c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003920:	2b08      	cmp	r3, #8
 8003922:	d824      	bhi.n	800396e <UART_SetConfig+0x342>
 8003924:	a201      	add	r2, pc, #4	@ (adr r2, 800392c <UART_SetConfig+0x300>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	08003951 	.word	0x08003951
 8003930:	0800396f 	.word	0x0800396f
 8003934:	08003959 	.word	0x08003959
 8003938:	0800396f 	.word	0x0800396f
 800393c:	0800395f 	.word	0x0800395f
 8003940:	0800396f 	.word	0x0800396f
 8003944:	0800396f 	.word	0x0800396f
 8003948:	0800396f 	.word	0x0800396f
 800394c:	08003967 	.word	0x08003967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003950:	f7fe fcda 	bl	8002308 <HAL_RCC_GetPCLK1Freq>
 8003954:	61f8      	str	r0, [r7, #28]
        break;
 8003956:	e010      	b.n	800397a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003958:	4b8f      	ldr	r3, [pc, #572]	@ (8003b98 <UART_SetConfig+0x56c>)
 800395a:	61fb      	str	r3, [r7, #28]
        break;
 800395c:	e00d      	b.n	800397a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800395e:	f7fe fc3b 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8003962:	61f8      	str	r0, [r7, #28]
        break;
 8003964:	e009      	b.n	800397a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800396a:	61fb      	str	r3, [r7, #28]
        break;
 800396c:	e005      	b.n	800397a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003978:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80fb 	beq.w	8003b78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	4413      	add	r3, r2
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	429a      	cmp	r2, r3
 8003990:	d305      	bcc.n	800399e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	429a      	cmp	r2, r3
 800399c:	d903      	bls.n	80039a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039a4:	e0e8      	b.n	8003b78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	2200      	movs	r2, #0
 80039aa:	461c      	mov	r4, r3
 80039ac:	4615      	mov	r5, r2
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	022b      	lsls	r3, r5, #8
 80039b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039bc:	0222      	lsls	r2, r4, #8
 80039be:	68f9      	ldr	r1, [r7, #12]
 80039c0:	6849      	ldr	r1, [r1, #4]
 80039c2:	0849      	lsrs	r1, r1, #1
 80039c4:	2000      	movs	r0, #0
 80039c6:	4688      	mov	r8, r1
 80039c8:	4681      	mov	r9, r0
 80039ca:	eb12 0a08 	adds.w	sl, r2, r8
 80039ce:	eb43 0b09 	adc.w	fp, r3, r9
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039e0:	4650      	mov	r0, sl
 80039e2:	4659      	mov	r1, fp
 80039e4:	f7fc fc5c 	bl	80002a0 <__aeabi_uldivmod>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4613      	mov	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039f6:	d308      	bcc.n	8003a0a <UART_SetConfig+0x3de>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039fe:	d204      	bcs.n	8003a0a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	60da      	str	r2, [r3, #12]
 8003a08:	e0b6      	b.n	8003b78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a10:	e0b2      	b.n	8003b78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a1a:	d15e      	bne.n	8003ada <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d828      	bhi.n	8003a76 <UART_SetConfig+0x44a>
 8003a24:	a201      	add	r2, pc, #4	@ (adr r2, 8003a2c <UART_SetConfig+0x400>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a51 	.word	0x08003a51
 8003a30:	08003a59 	.word	0x08003a59
 8003a34:	08003a61 	.word	0x08003a61
 8003a38:	08003a77 	.word	0x08003a77
 8003a3c:	08003a67 	.word	0x08003a67
 8003a40:	08003a77 	.word	0x08003a77
 8003a44:	08003a77 	.word	0x08003a77
 8003a48:	08003a77 	.word	0x08003a77
 8003a4c:	08003a6f 	.word	0x08003a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a50:	f7fe fc5a 	bl	8002308 <HAL_RCC_GetPCLK1Freq>
 8003a54:	61f8      	str	r0, [r7, #28]
        break;
 8003a56:	e014      	b.n	8003a82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a58:	f7fe fc6c 	bl	8002334 <HAL_RCC_GetPCLK2Freq>
 8003a5c:	61f8      	str	r0, [r7, #28]
        break;
 8003a5e:	e010      	b.n	8003a82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a60:	4b4d      	ldr	r3, [pc, #308]	@ (8003b98 <UART_SetConfig+0x56c>)
 8003a62:	61fb      	str	r3, [r7, #28]
        break;
 8003a64:	e00d      	b.n	8003a82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a66:	f7fe fbb7 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8003a6a:	61f8      	str	r0, [r7, #28]
        break;
 8003a6c:	e009      	b.n	8003a82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a72:	61fb      	str	r3, [r7, #28]
        break;
 8003a74:	e005      	b.n	8003a82 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d077      	beq.n	8003b78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	005a      	lsls	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	441a      	add	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b0f      	cmp	r3, #15
 8003aa2:	d916      	bls.n	8003ad2 <UART_SetConfig+0x4a6>
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aaa:	d212      	bcs.n	8003ad2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f023 030f 	bic.w	r3, r3, #15
 8003ab4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	085b      	lsrs	r3, r3, #1
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	8afb      	ldrh	r3, [r7, #22]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	8afa      	ldrh	r2, [r7, #22]
 8003ace:	60da      	str	r2, [r3, #12]
 8003ad0:	e052      	b.n	8003b78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ad8:	e04e      	b.n	8003b78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ada:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d827      	bhi.n	8003b32 <UART_SetConfig+0x506>
 8003ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae8 <UART_SetConfig+0x4bc>)
 8003ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae8:	08003b0d 	.word	0x08003b0d
 8003aec:	08003b15 	.word	0x08003b15
 8003af0:	08003b1d 	.word	0x08003b1d
 8003af4:	08003b33 	.word	0x08003b33
 8003af8:	08003b23 	.word	0x08003b23
 8003afc:	08003b33 	.word	0x08003b33
 8003b00:	08003b33 	.word	0x08003b33
 8003b04:	08003b33 	.word	0x08003b33
 8003b08:	08003b2b 	.word	0x08003b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b0c:	f7fe fbfc 	bl	8002308 <HAL_RCC_GetPCLK1Freq>
 8003b10:	61f8      	str	r0, [r7, #28]
        break;
 8003b12:	e014      	b.n	8003b3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b14:	f7fe fc0e 	bl	8002334 <HAL_RCC_GetPCLK2Freq>
 8003b18:	61f8      	str	r0, [r7, #28]
        break;
 8003b1a:	e010      	b.n	8003b3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003b98 <UART_SetConfig+0x56c>)
 8003b1e:	61fb      	str	r3, [r7, #28]
        break;
 8003b20:	e00d      	b.n	8003b3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b22:	f7fe fb59 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8003b26:	61f8      	str	r0, [r7, #28]
        break;
 8003b28:	e009      	b.n	8003b3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b2e:	61fb      	str	r3, [r7, #28]
        break;
 8003b30:	e005      	b.n	8003b3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b3c:	bf00      	nop
    }

    if (pclk != 0U)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d019      	beq.n	8003b78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	085a      	lsrs	r2, r3, #1
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	441a      	add	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b0f      	cmp	r3, #15
 8003b5c:	d909      	bls.n	8003b72 <UART_SetConfig+0x546>
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b64:	d205      	bcs.n	8003b72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	e002      	b.n	8003b78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3728      	adds	r7, #40	@ 0x28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b92:	bf00      	nop
 8003b94:	40008000 	.word	0x40008000
 8003b98:	00f42400 	.word	0x00f42400

08003b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01a      	beq.n	8003cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c9a:	d10a      	bne.n	8003cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	605a      	str	r2, [r3, #4]
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b098      	sub	sp, #96	@ 0x60
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cf0:	f7fd f9d4 	bl	800109c <HAL_GetTick>
 8003cf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d12e      	bne.n	8003d62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f88c 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d021      	beq.n	8003d62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d32:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e6      	bne.n	8003d1e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e062      	b.n	8003e28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d149      	bne.n	8003e04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f856 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d03c      	beq.n	8003e04 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	623b      	str	r3, [r7, #32]
   return(result);
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003daa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e6      	bne.n	8003d8a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3308      	adds	r3, #8
 8003dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ddc:	61fa      	str	r2, [r7, #28]
 8003dde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	69b9      	ldr	r1, [r7, #24]
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e5      	bne.n	8003dbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e011      	b.n	8003e28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3758      	adds	r7, #88	@ 0x58
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e40:	e04f      	b.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d04b      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fd f927 	bl	800109c <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e04e      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d037      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b80      	cmp	r3, #128	@ 0x80
 8003e76:	d034      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b40      	cmp	r3, #64	@ 0x40
 8003e7c:	d031      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d110      	bne.n	8003eae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2208      	movs	r2, #8
 8003e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f8ff 	bl	8004098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e029      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ebc:	d111      	bne.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f8e5 	bl	8004098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e00f      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4013      	ands	r3, r2
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2301      	moveq	r3, #1
 8003ef4:	2300      	movne	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d0a0      	beq.n	8003e42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b097      	sub	sp, #92	@ 0x5c
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	88fa      	ldrh	r2, [r7, #6]
 8003f2c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3e:	d10e      	bne.n	8003f5e <UART_Start_Receive_IT+0x52>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <UART_Start_Receive_IT+0x48>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003f4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f52:	e02d      	b.n	8003fb0 <UART_Start_Receive_IT+0xa4>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	22ff      	movs	r2, #255	@ 0xff
 8003f58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f5c:	e028      	b.n	8003fb0 <UART_Start_Receive_IT+0xa4>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10d      	bne.n	8003f82 <UART_Start_Receive_IT+0x76>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d104      	bne.n	8003f78 <UART_Start_Receive_IT+0x6c>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	22ff      	movs	r2, #255	@ 0xff
 8003f72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f76:	e01b      	b.n	8003fb0 <UART_Start_Receive_IT+0xa4>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	227f      	movs	r2, #127	@ 0x7f
 8003f7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f80:	e016      	b.n	8003fb0 <UART_Start_Receive_IT+0xa4>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f8a:	d10d      	bne.n	8003fa8 <UART_Start_Receive_IT+0x9c>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d104      	bne.n	8003f9e <UART_Start_Receive_IT+0x92>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	227f      	movs	r2, #127	@ 0x7f
 8003f98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f9c:	e008      	b.n	8003fb0 <UART_Start_Receive_IT+0xa4>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	223f      	movs	r2, #63	@ 0x3f
 8003fa2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003fa6:	e003      	b.n	8003fb0 <UART_Start_Receive_IT+0xa4>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2222      	movs	r2, #34	@ 0x22
 8003fbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003fe0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003fe2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003fe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e5      	bne.n	8003fc0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ffc:	d107      	bne.n	800400e <UART_Start_Receive_IT+0x102>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d103      	bne.n	800400e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4a21      	ldr	r2, [pc, #132]	@ (8004090 <UART_Start_Receive_IT+0x184>)
 800400a:	669a      	str	r2, [r3, #104]	@ 0x68
 800400c:	e002      	b.n	8004014 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4a20      	ldr	r2, [pc, #128]	@ (8004094 <UART_Start_Receive_IT+0x188>)
 8004012:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d019      	beq.n	8004050 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004030:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800403a:	637b      	str	r3, [r7, #52]	@ 0x34
 800403c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e6      	bne.n	800401c <UART_Start_Receive_IT+0x110>
 800404e:	e018      	b.n	8004082 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	613b      	str	r3, [r7, #16]
   return(result);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f043 0320 	orr.w	r3, r3, #32
 8004064:	653b      	str	r3, [r7, #80]	@ 0x50
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800406e:	623b      	str	r3, [r7, #32]
 8004070:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	69f9      	ldr	r1, [r7, #28]
 8004074:	6a3a      	ldr	r2, [r7, #32]
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	61bb      	str	r3, [r7, #24]
   return(result);
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e6      	bne.n	8004050 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	375c      	adds	r7, #92	@ 0x5c
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	0800439d 	.word	0x0800439d
 8004094:	080041e1 	.word	0x080041e1

08004098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b095      	sub	sp, #84	@ 0x54
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040be:	643b      	str	r3, [r7, #64]	@ 0x40
 80040c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e6      	bne.n	80040a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3308      	adds	r3, #8
 80040d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3308      	adds	r3, #8
 80040f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e5      	bne.n	80040d2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410a:	2b01      	cmp	r3, #1
 800410c:	d118      	bne.n	8004140 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	60bb      	str	r3, [r7, #8]
   return(result);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f023 0310 	bic.w	r3, r3, #16
 8004122:	647b      	str	r3, [r7, #68]	@ 0x44
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6979      	ldr	r1, [r7, #20]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	613b      	str	r3, [r7, #16]
   return(result);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e6      	bne.n	800410e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004154:	bf00      	nop
 8004156:	3754      	adds	r7, #84	@ 0x54
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7ff fa3e 	bl	8003600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6979      	ldr	r1, [r7, #20]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	613b      	str	r3, [r7, #16]
   return(result);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e6      	bne.n	8004194 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff fa0a 	bl	80035ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041d8:	bf00      	nop
 80041da:	3720      	adds	r7, #32
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b09c      	sub	sp, #112	@ 0x70
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80041ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041f8:	2b22      	cmp	r3, #34	@ 0x22
 80041fa:	f040 80be 	bne.w	800437a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004204:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004208:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800420c:	b2d9      	uxtb	r1, r3
 800420e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004212:	b2da      	uxtb	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004218:	400a      	ands	r2, r1
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	f040 80a3 	bne.w	800438e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800425c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004266:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004268:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800426c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e6      	bne.n	8004248 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3308      	adds	r3, #8
 8004280:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800428a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	667b      	str	r3, [r7, #100]	@ 0x64
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3308      	adds	r3, #8
 8004298:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800429a:	647a      	str	r2, [r7, #68]	@ 0x44
 800429c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e5      	bne.n	800427a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a34      	ldr	r2, [pc, #208]	@ (8004398 <UART_RxISR_8BIT+0x1b8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d01f      	beq.n	800430c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d018      	beq.n	800430c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	623b      	str	r3, [r7, #32]
   return(result);
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80042fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e6      	bne.n	80042da <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004310:	2b01      	cmp	r3, #1
 8004312:	d12e      	bne.n	8004372 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	60fb      	str	r3, [r7, #12]
   return(result);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0310 	bic.w	r3, r3, #16
 800432e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	69b9      	ldr	r1, [r7, #24]
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	617b      	str	r3, [r7, #20]
   return(result);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e6      	bne.n	800431a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	2b10      	cmp	r3, #16
 8004358:	d103      	bne.n	8004362 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2210      	movs	r2, #16
 8004360:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004368:	4619      	mov	r1, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff f952 	bl	8003614 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004370:	e00d      	b.n	800438e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fc fc4a 	bl	8000c0c <HAL_UART_RxCpltCallback>
}
 8004378:	e009      	b.n	800438e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	8b1b      	ldrh	r3, [r3, #24]
 8004380:	b29a      	uxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0208 	orr.w	r2, r2, #8
 800438a:	b292      	uxth	r2, r2
 800438c:	831a      	strh	r2, [r3, #24]
}
 800438e:	bf00      	nop
 8004390:	3770      	adds	r7, #112	@ 0x70
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40008000 	.word	0x40008000

0800439c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b09c      	sub	sp, #112	@ 0x70
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043b4:	2b22      	cmp	r3, #34	@ 0x22
 80043b6:	f040 80be 	bne.w	8004536 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80043c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80043ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80043ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80043d2:	4013      	ands	r3, r2
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043de:	1c9a      	adds	r2, r3, #2
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f040 80a3 	bne.w	800454a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004414:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004418:	667b      	str	r3, [r7, #100]	@ 0x64
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004422:	657b      	str	r3, [r7, #84]	@ 0x54
 8004424:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004428:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e6      	bne.n	8004404 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3308      	adds	r3, #8
 800443c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004448:	f023 0301 	bic.w	r3, r3, #1
 800444c:	663b      	str	r3, [r7, #96]	@ 0x60
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3308      	adds	r3, #8
 8004454:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004456:	643a      	str	r2, [r7, #64]	@ 0x40
 8004458:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800445c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e5      	bne.n	8004436 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a34      	ldr	r2, [pc, #208]	@ (8004554 <UART_RxISR_16BIT+0x1b8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d01f      	beq.n	80044c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d018      	beq.n	80044c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e6      	bne.n	8004496 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d12e      	bne.n	800452e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f023 0310 	bic.w	r3, r3, #16
 80044ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6979      	ldr	r1, [r7, #20]
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	613b      	str	r3, [r7, #16]
   return(result);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e6      	bne.n	80044d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b10      	cmp	r3, #16
 8004514:	d103      	bne.n	800451e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2210      	movs	r2, #16
 800451c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004524:	4619      	mov	r1, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff f874 	bl	8003614 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800452c:	e00d      	b.n	800454a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fc fb6c 	bl	8000c0c <HAL_UART_RxCpltCallback>
}
 8004534:	e009      	b.n	800454a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	8b1b      	ldrh	r3, [r3, #24]
 800453c:	b29a      	uxth	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0208 	orr.w	r2, r2, #8
 8004546:	b292      	uxth	r2, r2
 8004548:	831a      	strh	r2, [r3, #24]
}
 800454a:	bf00      	nop
 800454c:	3770      	adds	r7, #112	@ 0x70
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40008000 	.word	0x40008000

08004558 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <__NVIC_SetPriority>:
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457c:	2b00      	cmp	r3, #0
 800457e:	db0a      	blt.n	8004596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	490c      	ldr	r1, [pc, #48]	@ (80045b8 <__NVIC_SetPriority+0x4c>)
 8004586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458a:	0112      	lsls	r2, r2, #4
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	440b      	add	r3, r1
 8004590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004594:	e00a      	b.n	80045ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4908      	ldr	r1, [pc, #32]	@ (80045bc <__NVIC_SetPriority+0x50>)
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	3b04      	subs	r3, #4
 80045a4:	0112      	lsls	r2, r2, #4
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	440b      	add	r3, r1
 80045aa:	761a      	strb	r2, [r3, #24]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000e100 	.word	0xe000e100
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045c4:	2100      	movs	r1, #0
 80045c6:	f06f 0004 	mvn.w	r0, #4
 80045ca:	f7ff ffcf 	bl	800456c <__NVIC_SetPriority>
#endif
}
 80045ce:	bf00      	nop
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045da:	f3ef 8305 	mrs	r3, IPSR
 80045de:	603b      	str	r3, [r7, #0]
  return(result);
 80045e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80045e6:	f06f 0305 	mvn.w	r3, #5
 80045ea:	607b      	str	r3, [r7, #4]
 80045ec:	e00c      	b.n	8004608 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <osKernelInitialize+0x44>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80045f6:	4b08      	ldr	r3, [pc, #32]	@ (8004618 <osKernelInitialize+0x44>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	607b      	str	r3, [r7, #4]
 8004600:	e002      	b.n	8004608 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004602:	f04f 33ff 	mov.w	r3, #4294967295
 8004606:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004608:	687b      	ldr	r3, [r7, #4]
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	200002a4 	.word	0x200002a4

0800461c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004622:	f3ef 8305 	mrs	r3, IPSR
 8004626:	603b      	str	r3, [r7, #0]
  return(result);
 8004628:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <osKernelStart+0x1a>
    stat = osErrorISR;
 800462e:	f06f 0305 	mvn.w	r3, #5
 8004632:	607b      	str	r3, [r7, #4]
 8004634:	e010      	b.n	8004658 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004636:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <osKernelStart+0x48>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d109      	bne.n	8004652 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800463e:	f7ff ffbf 	bl	80045c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004642:	4b08      	ldr	r3, [pc, #32]	@ (8004664 <osKernelStart+0x48>)
 8004644:	2202      	movs	r2, #2
 8004646:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004648:	f001 f87a 	bl	8005740 <vTaskStartScheduler>
      stat = osOK;
 800464c:	2300      	movs	r3, #0
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	e002      	b.n	8004658 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004652:	f04f 33ff 	mov.w	r3, #4294967295
 8004656:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004658:	687b      	ldr	r3, [r7, #4]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	200002a4 	.word	0x200002a4

08004668 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b08e      	sub	sp, #56	@ 0x38
 800466c:	af04      	add	r7, sp, #16
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004674:	2300      	movs	r3, #0
 8004676:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004678:	f3ef 8305 	mrs	r3, IPSR
 800467c:	617b      	str	r3, [r7, #20]
  return(result);
 800467e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004680:	2b00      	cmp	r3, #0
 8004682:	d17e      	bne.n	8004782 <osThreadNew+0x11a>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d07b      	beq.n	8004782 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800468a:	2380      	movs	r3, #128	@ 0x80
 800468c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800468e:	2318      	movs	r3, #24
 8004690:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004696:	f04f 33ff 	mov.w	r3, #4294967295
 800469a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d045      	beq.n	800472e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <osThreadNew+0x48>
        name = attr->name;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <osThreadNew+0x6e>
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	2b38      	cmp	r3, #56	@ 0x38
 80046c8:	d805      	bhi.n	80046d6 <osThreadNew+0x6e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <osThreadNew+0x72>
        return (NULL);
 80046d6:	2300      	movs	r3, #0
 80046d8:	e054      	b.n	8004784 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00e      	beq.n	8004710 <osThreadNew+0xa8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b5b      	cmp	r3, #91	@ 0x5b
 80046f8:	d90a      	bls.n	8004710 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d006      	beq.n	8004710 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <osThreadNew+0xa8>
        mem = 1;
 800470a:	2301      	movs	r3, #1
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	e010      	b.n	8004732 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10c      	bne.n	8004732 <osThreadNew+0xca>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d108      	bne.n	8004732 <osThreadNew+0xca>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d104      	bne.n	8004732 <osThreadNew+0xca>
          mem = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	e001      	b.n	8004732 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d110      	bne.n	800475a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004740:	9202      	str	r2, [sp, #8]
 8004742:	9301      	str	r3, [sp, #4]
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	6a3a      	ldr	r2, [r7, #32]
 800474c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fe1a 	bl	8005388 <xTaskCreateStatic>
 8004754:	4603      	mov	r3, r0
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	e013      	b.n	8004782 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d110      	bne.n	8004782 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	b29a      	uxth	r2, r3
 8004764:	f107 0310 	add.w	r3, r7, #16
 8004768:	9301      	str	r3, [sp, #4]
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fe68 	bl	8005448 <xTaskCreate>
 8004778:	4603      	mov	r3, r0
 800477a:	2b01      	cmp	r3, #1
 800477c:	d001      	beq.n	8004782 <osThreadNew+0x11a>
            hTask = NULL;
 800477e:	2300      	movs	r3, #0
 8004780:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004782:	693b      	ldr	r3, [r7, #16]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3728      	adds	r7, #40	@ 0x28
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004794:	f3ef 8305 	mrs	r3, IPSR
 8004798:	60bb      	str	r3, [r7, #8]
  return(result);
 800479a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <osDelay+0x1c>
    stat = osErrorISR;
 80047a0:	f06f 0305 	mvn.w	r3, #5
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e007      	b.n	80047b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 ff8e 	bl	80056d4 <vTaskDelay>
    }
  }

  return (stat);
 80047b8:	68fb      	ldr	r3, [r7, #12]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a07      	ldr	r2, [pc, #28]	@ (80047f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80047d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4a06      	ldr	r2, [pc, #24]	@ (80047f4 <vApplicationGetIdleTaskMemory+0x30>)
 80047da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2280      	movs	r2, #128	@ 0x80
 80047e0:	601a      	str	r2, [r3, #0]
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	200002a8 	.word	0x200002a8
 80047f4:	20000304 	.word	0x20000304

080047f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4a07      	ldr	r2, [pc, #28]	@ (8004824 <vApplicationGetTimerTaskMemory+0x2c>)
 8004808:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4a06      	ldr	r2, [pc, #24]	@ (8004828 <vApplicationGetTimerTaskMemory+0x30>)
 800480e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004816:	601a      	str	r2, [r3, #0]
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	20000504 	.word	0x20000504
 8004828:	20000560 	.word	0x20000560

0800482c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f103 0208 	add.w	r2, r3, #8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f04f 32ff 	mov.w	r2, #4294967295
 8004844:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f103 0208 	add.w	r2, r3, #8
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f103 0208 	add.w	r2, r3, #8
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]
}
 80048c2:	bf00      	nop
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d103      	bne.n	80048ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e00c      	b.n	8004908 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3308      	adds	r3, #8
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e002      	b.n	80048fc <vListInsert+0x2e>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	429a      	cmp	r2, r3
 8004906:	d2f6      	bcs.n	80048f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	601a      	str	r2, [r3, #0]
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6892      	ldr	r2, [r2, #8]
 8004956:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6852      	ldr	r2, [r2, #4]
 8004960:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	d103      	bne.n	8004974 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	1e5a      	subs	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10b      	bne.n	80049c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	e7fd      	b.n	80049bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049c0:	f002 f87a 	bl	8006ab8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	441a      	add	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f0:	3b01      	subs	r3, #1
 80049f2:	68f9      	ldr	r1, [r7, #12]
 80049f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049f6:	fb01 f303 	mul.w	r3, r1, r3
 80049fa:	441a      	add	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	22ff      	movs	r2, #255	@ 0xff
 8004a04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	22ff      	movs	r2, #255	@ 0xff
 8004a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d114      	bne.n	8004a40 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01a      	beq.n	8004a54 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3310      	adds	r3, #16
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 f91a 	bl	8005c5c <xTaskRemoveFromEventList>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d012      	beq.n	8004a54 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <xQueueGenericReset+0xd0>)
 8004a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	e009      	b.n	8004a54 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3310      	adds	r3, #16
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff fef1 	bl	800482c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3324      	adds	r3, #36	@ 0x24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff feec 	bl	800482c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a54:	f002 f862 	bl	8006b1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a58:	2301      	movs	r3, #1
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	e000ed04 	.word	0xe000ed04

08004a68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08e      	sub	sp, #56	@ 0x38
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	e7fd      	b.n	8004a90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10b      	bne.n	8004ab2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	e7fd      	b.n	8004aae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <xQueueGenericCreateStatic+0x56>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <xQueueGenericCreateStatic+0x5a>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <xQueueGenericCreateStatic+0x5c>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	623b      	str	r3, [r7, #32]
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	e7fd      	b.n	8004adc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <xQueueGenericCreateStatic+0x84>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <xQueueGenericCreateStatic+0x88>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <xQueueGenericCreateStatic+0x8a>
 8004af0:	2300      	movs	r3, #0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10b      	bne.n	8004b0e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	61fb      	str	r3, [r7, #28]
}
 8004b08:	bf00      	nop
 8004b0a:	bf00      	nop
 8004b0c:	e7fd      	b.n	8004b0a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b0e:	2350      	movs	r3, #80	@ 0x50
 8004b10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b50      	cmp	r3, #80	@ 0x50
 8004b16:	d00b      	beq.n	8004b30 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	61bb      	str	r3, [r7, #24]
}
 8004b2a:	bf00      	nop
 8004b2c:	bf00      	nop
 8004b2e:	e7fd      	b.n	8004b2c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00d      	beq.n	8004b58 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b44:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f805 	bl	8004b62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3730      	adds	r7, #48	@ 0x30
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	60f8      	str	r0, [r7, #12]
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	607a      	str	r2, [r7, #4]
 8004b6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	e002      	b.n	8004b84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b90:	2101      	movs	r1, #1
 8004b92:	69b8      	ldr	r0, [r7, #24]
 8004b94:	f7ff fefe 	bl	8004994 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	78fa      	ldrb	r2, [r7, #3]
 8004b9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ba0:	bf00      	nop
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08e      	sub	sp, #56	@ 0x38
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <xQueueGenericSend+0x34>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	e7fd      	b.n	8004bd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d103      	bne.n	8004bea <xQueueGenericSend+0x42>
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <xQueueGenericSend+0x46>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <xQueueGenericSend+0x48>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <xQueueGenericSend+0x64>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	e7fd      	b.n	8004c08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d103      	bne.n	8004c1a <xQueueGenericSend+0x72>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <xQueueGenericSend+0x76>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <xQueueGenericSend+0x78>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <xQueueGenericSend+0x94>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	623b      	str	r3, [r7, #32]
}
 8004c36:	bf00      	nop
 8004c38:	bf00      	nop
 8004c3a:	e7fd      	b.n	8004c38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c3c:	f001 f9ce 	bl	8005fdc <xTaskGetSchedulerState>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d102      	bne.n	8004c4c <xQueueGenericSend+0xa4>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <xQueueGenericSend+0xa8>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <xQueueGenericSend+0xaa>
 8004c50:	2300      	movs	r3, #0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10b      	bne.n	8004c6e <xQueueGenericSend+0xc6>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	61fb      	str	r3, [r7, #28]
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	e7fd      	b.n	8004c6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c6e:	f001 ff23 	bl	8006ab8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d302      	bcc.n	8004c84 <xQueueGenericSend+0xdc>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d129      	bne.n	8004cd8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c8a:	f000 fa0f 	bl	80050ac <prvCopyDataToQueue>
 8004c8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d010      	beq.n	8004cba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9a:	3324      	adds	r3, #36	@ 0x24
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 ffdd 	bl	8005c5c <xTaskRemoveFromEventList>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d013      	beq.n	8004cd0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ca8:	4b3f      	ldr	r3, [pc, #252]	@ (8004da8 <xQueueGenericSend+0x200>)
 8004caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	e00a      	b.n	8004cd0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004cc0:	4b39      	ldr	r3, [pc, #228]	@ (8004da8 <xQueueGenericSend+0x200>)
 8004cc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cd0:	f001 ff24 	bl	8006b1c <vPortExitCritical>
				return pdPASS;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e063      	b.n	8004da0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d103      	bne.n	8004ce6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cde:	f001 ff1d 	bl	8006b1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e05c      	b.n	8004da0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cec:	f107 0314 	add.w	r3, r7, #20
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f001 f817 	bl	8005d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cfa:	f001 ff0f 	bl	8006b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cfe:	f000 fd87 	bl	8005810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d02:	f001 fed9 	bl	8006ab8 <vPortEnterCritical>
 8004d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d0c:	b25b      	sxtb	r3, r3
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d12:	d103      	bne.n	8004d1c <xQueueGenericSend+0x174>
 8004d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d22:	b25b      	sxtb	r3, r3
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d28:	d103      	bne.n	8004d32 <xQueueGenericSend+0x18a>
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d32:	f001 fef3 	bl	8006b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d36:	1d3a      	adds	r2, r7, #4
 8004d38:	f107 0314 	add.w	r3, r7, #20
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f001 f806 	bl	8005d50 <xTaskCheckForTimeOut>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d124      	bne.n	8004d94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d4c:	f000 faa6 	bl	800529c <prvIsQueueFull>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d018      	beq.n	8004d88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	3310      	adds	r3, #16
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 ff2a 	bl	8005bb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d66:	f000 fa31 	bl	80051cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d6a:	f000 fd5f 	bl	800582c <xTaskResumeAll>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f47f af7c 	bne.w	8004c6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004d76:	4b0c      	ldr	r3, [pc, #48]	@ (8004da8 <xQueueGenericSend+0x200>)
 8004d78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	e772      	b.n	8004c6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d8a:	f000 fa1f 	bl	80051cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d8e:	f000 fd4d 	bl	800582c <xTaskResumeAll>
 8004d92:	e76c      	b.n	8004c6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d96:	f000 fa19 	bl	80051cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d9a:	f000 fd47 	bl	800582c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3738      	adds	r7, #56	@ 0x38
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b090      	sub	sp, #64	@ 0x40
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10b      	bne.n	8004ddc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dd6:	bf00      	nop
 8004dd8:	bf00      	nop
 8004dda:	e7fd      	b.n	8004dd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d103      	bne.n	8004dea <xQueueGenericSendFromISR+0x3e>
 8004de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <xQueueGenericSendFromISR+0x42>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <xQueueGenericSendFromISR+0x44>
 8004dee:	2300      	movs	r3, #0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
 8004e0a:	e7fd      	b.n	8004e08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d103      	bne.n	8004e1a <xQueueGenericSendFromISR+0x6e>
 8004e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <xQueueGenericSendFromISR+0x72>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <xQueueGenericSendFromISR+0x74>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10b      	bne.n	8004e3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	623b      	str	r3, [r7, #32]
}
 8004e36:	bf00      	nop
 8004e38:	bf00      	nop
 8004e3a:	e7fd      	b.n	8004e38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e3c:	f001 ff1c 	bl	8006c78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e40:	f3ef 8211 	mrs	r2, BASEPRI
 8004e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	61fa      	str	r2, [r7, #28]
 8004e56:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e58:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e5a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d302      	bcc.n	8004e6e <xQueueGenericSendFromISR+0xc2>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d12f      	bne.n	8004ece <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004e84:	f000 f912 	bl	80050ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d112      	bne.n	8004eb8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d016      	beq.n	8004ec8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9c:	3324      	adds	r3, #36	@ 0x24
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fedc 	bl	8005c5c <xTaskRemoveFromEventList>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00e      	beq.n	8004ec8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00b      	beq.n	8004ec8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e007      	b.n	8004ec8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004eb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	b25a      	sxtb	r2, r3
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004ecc:	e001      	b.n	8004ed2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004edc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3740      	adds	r7, #64	@ 0x40
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08c      	sub	sp, #48	@ 0x30
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10b      	bne.n	8004f1a <xQueueReceive+0x32>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	623b      	str	r3, [r7, #32]
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	e7fd      	b.n	8004f16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d103      	bne.n	8004f28 <xQueueReceive+0x40>
 8004f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <xQueueReceive+0x44>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <xQueueReceive+0x46>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10b      	bne.n	8004f4a <xQueueReceive+0x62>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	61fb      	str	r3, [r7, #28]
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	e7fd      	b.n	8004f46 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f4a:	f001 f847 	bl	8005fdc <xTaskGetSchedulerState>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d102      	bne.n	8004f5a <xQueueReceive+0x72>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <xQueueReceive+0x76>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <xQueueReceive+0x78>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <xQueueReceive+0x94>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	61bb      	str	r3, [r7, #24]
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	e7fd      	b.n	8004f78 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f7c:	f001 fd9c 	bl	8006ab8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f84:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01f      	beq.n	8004fcc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f90:	f000 f8f6 	bl	8005180 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	1e5a      	subs	r2, r3, #1
 8004f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00f      	beq.n	8004fc4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa6:	3310      	adds	r3, #16
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fe57 	bl	8005c5c <xTaskRemoveFromEventList>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fb4:	4b3c      	ldr	r3, [pc, #240]	@ (80050a8 <xQueueReceive+0x1c0>)
 8004fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fc4:	f001 fdaa 	bl	8006b1c <vPortExitCritical>
				return pdPASS;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e069      	b.n	80050a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d103      	bne.n	8004fda <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fd2:	f001 fda3 	bl	8006b1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e062      	b.n	80050a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d106      	bne.n	8004fee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fe0:	f107 0310 	add.w	r3, r7, #16
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fe9d 	bl	8005d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fea:	2301      	movs	r3, #1
 8004fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fee:	f001 fd95 	bl	8006b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ff2:	f000 fc0d 	bl	8005810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ff6:	f001 fd5f 	bl	8006ab8 <vPortEnterCritical>
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005000:	b25b      	sxtb	r3, r3
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005006:	d103      	bne.n	8005010 <xQueueReceive+0x128>
 8005008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005012:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005016:	b25b      	sxtb	r3, r3
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d103      	bne.n	8005026 <xQueueReceive+0x13e>
 800501e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005026:	f001 fd79 	bl	8006b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800502a:	1d3a      	adds	r2, r7, #4
 800502c:	f107 0310 	add.w	r3, r7, #16
 8005030:	4611      	mov	r1, r2
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fe8c 	bl	8005d50 <xTaskCheckForTimeOut>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d123      	bne.n	8005086 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800503e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005040:	f000 f916 	bl	8005270 <prvIsQueueEmpty>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d017      	beq.n	800507a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800504a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504c:	3324      	adds	r3, #36	@ 0x24
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fdb0 	bl	8005bb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005058:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800505a:	f000 f8b7 	bl	80051cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800505e:	f000 fbe5 	bl	800582c <xTaskResumeAll>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d189      	bne.n	8004f7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005068:	4b0f      	ldr	r3, [pc, #60]	@ (80050a8 <xQueueReceive+0x1c0>)
 800506a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	e780      	b.n	8004f7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800507a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800507c:	f000 f8a6 	bl	80051cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005080:	f000 fbd4 	bl	800582c <xTaskResumeAll>
 8005084:	e77a      	b.n	8004f7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005086:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005088:	f000 f8a0 	bl	80051cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800508c:	f000 fbce 	bl	800582c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005090:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005092:	f000 f8ed 	bl	8005270 <prvIsQueueEmpty>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	f43f af6f 	beq.w	8004f7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800509e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3730      	adds	r7, #48	@ 0x30
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10d      	bne.n	80050e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d14d      	bne.n	800516e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 ff9e 	bl	8006018 <xTaskPriorityDisinherit>
 80050dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	609a      	str	r2, [r3, #8]
 80050e4:	e043      	b.n	800516e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d119      	bne.n	8005120 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6858      	ldr	r0, [r3, #4]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	461a      	mov	r2, r3
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	f002 f8ec 	bl	80072d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005104:	441a      	add	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	429a      	cmp	r2, r3
 8005114:	d32b      	bcc.n	800516e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	605a      	str	r2, [r3, #4]
 800511e:	e026      	b.n	800516e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	68d8      	ldr	r0, [r3, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005128:	461a      	mov	r2, r3
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	f002 f8d2 	bl	80072d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005138:	425b      	negs	r3, r3
 800513a:	441a      	add	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d207      	bcs.n	800515c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005154:	425b      	negs	r3, r3
 8005156:	441a      	add	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d105      	bne.n	800516e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	3b01      	subs	r3, #1
 800516c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005176:	697b      	ldr	r3, [r7, #20]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d018      	beq.n	80051c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	441a      	add	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d303      	bcc.n	80051b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68d9      	ldr	r1, [r3, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	461a      	mov	r2, r3
 80051be:	6838      	ldr	r0, [r7, #0]
 80051c0:	f002 f888 	bl	80072d4 <memcpy>
	}
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051d4:	f001 fc70 	bl	8006ab8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051e0:	e011      	b.n	8005206 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d012      	beq.n	8005210 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3324      	adds	r3, #36	@ 0x24
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fd34 	bl	8005c5c <xTaskRemoveFromEventList>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051fa:	f000 fe0d 	bl	8005e18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	3b01      	subs	r3, #1
 8005202:	b2db      	uxtb	r3, r3
 8005204:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800520a:	2b00      	cmp	r3, #0
 800520c:	dce9      	bgt.n	80051e2 <prvUnlockQueue+0x16>
 800520e:	e000      	b.n	8005212 <prvUnlockQueue+0x46>
					break;
 8005210:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	22ff      	movs	r2, #255	@ 0xff
 8005216:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800521a:	f001 fc7f 	bl	8006b1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800521e:	f001 fc4b 	bl	8006ab8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005228:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800522a:	e011      	b.n	8005250 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d012      	beq.n	800525a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3310      	adds	r3, #16
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fd0f 	bl	8005c5c <xTaskRemoveFromEventList>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005244:	f000 fde8 	bl	8005e18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005248:	7bbb      	ldrb	r3, [r7, #14]
 800524a:	3b01      	subs	r3, #1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005254:	2b00      	cmp	r3, #0
 8005256:	dce9      	bgt.n	800522c <prvUnlockQueue+0x60>
 8005258:	e000      	b.n	800525c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800525a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	22ff      	movs	r2, #255	@ 0xff
 8005260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005264:	f001 fc5a 	bl	8006b1c <vPortExitCritical>
}
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005278:	f001 fc1e 	bl	8006ab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005284:	2301      	movs	r3, #1
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e001      	b.n	800528e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800528e:	f001 fc45 	bl	8006b1c <vPortExitCritical>

	return xReturn;
 8005292:	68fb      	ldr	r3, [r7, #12]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052a4:	f001 fc08 	bl	8006ab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d102      	bne.n	80052ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	e001      	b.n	80052be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052be:	f001 fc2d 	bl	8006b1c <vPortExitCritical>

	return xReturn;
 80052c2:	68fb      	ldr	r3, [r7, #12]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	e014      	b.n	8005306 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052dc:	4a0f      	ldr	r2, [pc, #60]	@ (800531c <vQueueAddToRegistry+0x50>)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10b      	bne.n	8005300 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052e8:	490c      	ldr	r1, [pc, #48]	@ (800531c <vQueueAddToRegistry+0x50>)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052f2:	4a0a      	ldr	r2, [pc, #40]	@ (800531c <vQueueAddToRegistry+0x50>)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	4413      	add	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052fe:	e006      	b.n	800530e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b07      	cmp	r3, #7
 800530a:	d9e7      	bls.n	80052dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	20000960 	.word	0x20000960

08005320 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005330:	f001 fbc2 	bl	8006ab8 <vPortEnterCritical>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800533a:	b25b      	sxtb	r3, r3
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d103      	bne.n	800534a <vQueueWaitForMessageRestricted+0x2a>
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005350:	b25b      	sxtb	r3, r3
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005356:	d103      	bne.n	8005360 <vQueueWaitForMessageRestricted+0x40>
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005360:	f001 fbdc 	bl	8006b1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	3324      	adds	r3, #36	@ 0x24
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fc45 	bl	8005c04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800537a:	6978      	ldr	r0, [r7, #20]
 800537c:	f7ff ff26 	bl	80051cc <prvUnlockQueue>
	}
 8005380:	bf00      	nop
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08e      	sub	sp, #56	@ 0x38
 800538c:	af04      	add	r7, sp, #16
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	623b      	str	r3, [r7, #32]
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	e7fd      	b.n	80053b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10b      	bne.n	80053d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	61fb      	str	r3, [r7, #28]
}
 80053cc:	bf00      	nop
 80053ce:	bf00      	nop
 80053d0:	e7fd      	b.n	80053ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053d2:	235c      	movs	r3, #92	@ 0x5c
 80053d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80053da:	d00b      	beq.n	80053f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	61bb      	str	r3, [r7, #24]
}
 80053ee:	bf00      	nop
 80053f0:	bf00      	nop
 80053f2:	e7fd      	b.n	80053f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01e      	beq.n	800543a <xTaskCreateStatic+0xb2>
 80053fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01b      	beq.n	800543a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005404:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800540a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	2202      	movs	r2, #2
 8005410:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005414:	2300      	movs	r3, #0
 8005416:	9303      	str	r3, [sp, #12]
 8005418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541a:	9302      	str	r3, [sp, #8]
 800541c:	f107 0314 	add.w	r3, r7, #20
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f850 	bl	80054d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005432:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005434:	f000 f8de 	bl	80055f4 <prvAddNewTaskToReadyList>
 8005438:	e001      	b.n	800543e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800543e:	697b      	ldr	r3, [r7, #20]
	}
 8005440:	4618      	mov	r0, r3
 8005442:	3728      	adds	r7, #40	@ 0x28
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08c      	sub	sp, #48	@ 0x30
 800544c:	af04      	add	r7, sp, #16
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	4613      	mov	r3, r2
 8005456:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005458:	88fb      	ldrh	r3, [r7, #6]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4618      	mov	r0, r3
 800545e:	f001 fc4d 	bl	8006cfc <pvPortMalloc>
 8005462:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00e      	beq.n	8005488 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800546a:	205c      	movs	r0, #92	@ 0x5c
 800546c:	f001 fc46 	bl	8006cfc <pvPortMalloc>
 8005470:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	631a      	str	r2, [r3, #48]	@ 0x30
 800547e:	e005      	b.n	800548c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005480:	6978      	ldr	r0, [r7, #20]
 8005482:	f001 fd09 	bl	8006e98 <vPortFree>
 8005486:	e001      	b.n	800548c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d017      	beq.n	80054c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800549a:	88fa      	ldrh	r2, [r7, #6]
 800549c:	2300      	movs	r3, #0
 800549e:	9303      	str	r3, [sp, #12]
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	9302      	str	r3, [sp, #8]
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a6:	9301      	str	r3, [sp, #4]
 80054a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f80e 	bl	80054d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054b6:	69f8      	ldr	r0, [r7, #28]
 80054b8:	f000 f89c 	bl	80055f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054bc:	2301      	movs	r3, #1
 80054be:	61bb      	str	r3, [r7, #24]
 80054c0:	e002      	b.n	80054c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054c2:	f04f 33ff 	mov.w	r3, #4294967295
 80054c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054c8:	69bb      	ldr	r3, [r7, #24]
	}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b088      	sub	sp, #32
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
 80054de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	461a      	mov	r2, r3
 80054ea:	21a5      	movs	r1, #165	@ 0xa5
 80054ec:	f001 fe9e 	bl	800722c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054fa:	3b01      	subs	r3, #1
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	f023 0307 	bic.w	r3, r3, #7
 8005508:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00b      	beq.n	800552c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	617b      	str	r3, [r7, #20]
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01f      	beq.n	8005572 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	e012      	b.n	800555e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	4413      	add	r3, r2
 800553e:	7819      	ldrb	r1, [r3, #0]
 8005540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	3334      	adds	r3, #52	@ 0x34
 8005548:	460a      	mov	r2, r1
 800554a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d006      	beq.n	8005566 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	3301      	adds	r3, #1
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	2b0f      	cmp	r3, #15
 8005562:	d9e9      	bls.n	8005538 <prvInitialiseNewTask+0x66>
 8005564:	e000      	b.n	8005568 <prvInitialiseNewTask+0x96>
			{
				break;
 8005566:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005570:	e003      	b.n	800557a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800557a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557c:	2b37      	cmp	r3, #55	@ 0x37
 800557e:	d901      	bls.n	8005584 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005580:	2337      	movs	r3, #55	@ 0x37
 8005582:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005588:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800558a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800558e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	2200      	movs	r2, #0
 8005594:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005598:	3304      	adds	r3, #4
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff f966 	bl	800486c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a2:	3318      	adds	r3, #24
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff f961 	bl	800486c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055be:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c2:	2200      	movs	r2, #0
 80055c4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	68f9      	ldr	r1, [r7, #12]
 80055d2:	69b8      	ldr	r0, [r7, #24]
 80055d4:	f001 f93e 	bl	8006854 <pxPortInitialiseStack>
 80055d8:	4602      	mov	r2, r0
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055ea:	bf00      	nop
 80055ec:	3720      	adds	r7, #32
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055fc:	f001 fa5c 	bl	8006ab8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005600:	4b2d      	ldr	r3, [pc, #180]	@ (80056b8 <prvAddNewTaskToReadyList+0xc4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3301      	adds	r3, #1
 8005606:	4a2c      	ldr	r2, [pc, #176]	@ (80056b8 <prvAddNewTaskToReadyList+0xc4>)
 8005608:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800560a:	4b2c      	ldr	r3, [pc, #176]	@ (80056bc <prvAddNewTaskToReadyList+0xc8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005612:	4a2a      	ldr	r2, [pc, #168]	@ (80056bc <prvAddNewTaskToReadyList+0xc8>)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005618:	4b27      	ldr	r3, [pc, #156]	@ (80056b8 <prvAddNewTaskToReadyList+0xc4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d110      	bne.n	8005642 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005620:	f000 fc1e 	bl	8005e60 <prvInitialiseTaskLists>
 8005624:	e00d      	b.n	8005642 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005626:	4b26      	ldr	r3, [pc, #152]	@ (80056c0 <prvAddNewTaskToReadyList+0xcc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800562e:	4b23      	ldr	r3, [pc, #140]	@ (80056bc <prvAddNewTaskToReadyList+0xc8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	429a      	cmp	r2, r3
 800563a:	d802      	bhi.n	8005642 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800563c:	4a1f      	ldr	r2, [pc, #124]	@ (80056bc <prvAddNewTaskToReadyList+0xc8>)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005642:	4b20      	ldr	r3, [pc, #128]	@ (80056c4 <prvAddNewTaskToReadyList+0xd0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3301      	adds	r3, #1
 8005648:	4a1e      	ldr	r2, [pc, #120]	@ (80056c4 <prvAddNewTaskToReadyList+0xd0>)
 800564a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800564c:	4b1d      	ldr	r3, [pc, #116]	@ (80056c4 <prvAddNewTaskToReadyList+0xd0>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005658:	4b1b      	ldr	r3, [pc, #108]	@ (80056c8 <prvAddNewTaskToReadyList+0xd4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d903      	bls.n	8005668 <prvAddNewTaskToReadyList+0x74>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005664:	4a18      	ldr	r2, [pc, #96]	@ (80056c8 <prvAddNewTaskToReadyList+0xd4>)
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4a15      	ldr	r2, [pc, #84]	@ (80056cc <prvAddNewTaskToReadyList+0xd8>)
 8005676:	441a      	add	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3304      	adds	r3, #4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f7ff f901 	bl	8004886 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005684:	f001 fa4a 	bl	8006b1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005688:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <prvAddNewTaskToReadyList+0xcc>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00e      	beq.n	80056ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005690:	4b0a      	ldr	r3, [pc, #40]	@ (80056bc <prvAddNewTaskToReadyList+0xc8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	429a      	cmp	r2, r3
 800569c:	d207      	bcs.n	80056ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800569e:	4b0c      	ldr	r3, [pc, #48]	@ (80056d0 <prvAddNewTaskToReadyList+0xdc>)
 80056a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000e74 	.word	0x20000e74
 80056bc:	200009a0 	.word	0x200009a0
 80056c0:	20000e80 	.word	0x20000e80
 80056c4:	20000e90 	.word	0x20000e90
 80056c8:	20000e7c 	.word	0x20000e7c
 80056cc:	200009a4 	.word	0x200009a4
 80056d0:	e000ed04 	.word	0xe000ed04

080056d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d018      	beq.n	8005718 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056e6:	4b14      	ldr	r3, [pc, #80]	@ (8005738 <vTaskDelay+0x64>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <vTaskDelay+0x32>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	60bb      	str	r3, [r7, #8]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005706:	f000 f883 	bl	8005810 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800570a:	2100      	movs	r1, #0
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fcf3 	bl	80060f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005712:	f000 f88b 	bl	800582c <xTaskResumeAll>
 8005716:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d107      	bne.n	800572e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800571e:	4b07      	ldr	r3, [pc, #28]	@ (800573c <vTaskDelay+0x68>)
 8005720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000e9c 	.word	0x20000e9c
 800573c:	e000ed04 	.word	0xe000ed04

08005740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	@ 0x28
 8005744:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800574a:	2300      	movs	r3, #0
 800574c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800574e:	463a      	mov	r2, r7
 8005750:	1d39      	adds	r1, r7, #4
 8005752:	f107 0308 	add.w	r3, r7, #8
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff f834 	bl	80047c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	9202      	str	r2, [sp, #8]
 8005764:	9301      	str	r3, [sp, #4]
 8005766:	2300      	movs	r3, #0
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	2300      	movs	r3, #0
 800576c:	460a      	mov	r2, r1
 800576e:	4922      	ldr	r1, [pc, #136]	@ (80057f8 <vTaskStartScheduler+0xb8>)
 8005770:	4822      	ldr	r0, [pc, #136]	@ (80057fc <vTaskStartScheduler+0xbc>)
 8005772:	f7ff fe09 	bl	8005388 <xTaskCreateStatic>
 8005776:	4603      	mov	r3, r0
 8005778:	4a21      	ldr	r2, [pc, #132]	@ (8005800 <vTaskStartScheduler+0xc0>)
 800577a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800577c:	4b20      	ldr	r3, [pc, #128]	@ (8005800 <vTaskStartScheduler+0xc0>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005784:	2301      	movs	r3, #1
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e001      	b.n	800578e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d102      	bne.n	800579a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005794:	f000 fd04 	bl	80061a0 <xTimerCreateTimerTask>
 8005798:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d116      	bne.n	80057ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	613b      	str	r3, [r7, #16]
}
 80057b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057b4:	4b13      	ldr	r3, [pc, #76]	@ (8005804 <vTaskStartScheduler+0xc4>)
 80057b6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057bc:	4b12      	ldr	r3, [pc, #72]	@ (8005808 <vTaskStartScheduler+0xc8>)
 80057be:	2201      	movs	r2, #1
 80057c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057c2:	4b12      	ldr	r3, [pc, #72]	@ (800580c <vTaskStartScheduler+0xcc>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057c8:	f001 f8d2 	bl	8006970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057cc:	e00f      	b.n	80057ee <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d4:	d10b      	bne.n	80057ee <vTaskStartScheduler+0xae>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	60fb      	str	r3, [r7, #12]
}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	e7fd      	b.n	80057ea <vTaskStartScheduler+0xaa>
}
 80057ee:	bf00      	nop
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	08007ccc 	.word	0x08007ccc
 80057fc:	08005e31 	.word	0x08005e31
 8005800:	20000e98 	.word	0x20000e98
 8005804:	20000e94 	.word	0x20000e94
 8005808:	20000e80 	.word	0x20000e80
 800580c:	20000e78 	.word	0x20000e78

08005810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005814:	4b04      	ldr	r3, [pc, #16]	@ (8005828 <vTaskSuspendAll+0x18>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	4a03      	ldr	r2, [pc, #12]	@ (8005828 <vTaskSuspendAll+0x18>)
 800581c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800581e:	bf00      	nop
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	20000e9c 	.word	0x20000e9c

0800582c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005836:	2300      	movs	r3, #0
 8005838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800583a:	4b42      	ldr	r3, [pc, #264]	@ (8005944 <xTaskResumeAll+0x118>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10b      	bne.n	800585a <xTaskResumeAll+0x2e>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	603b      	str	r3, [r7, #0]
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	e7fd      	b.n	8005856 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800585a:	f001 f92d 	bl	8006ab8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800585e:	4b39      	ldr	r3, [pc, #228]	@ (8005944 <xTaskResumeAll+0x118>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3b01      	subs	r3, #1
 8005864:	4a37      	ldr	r2, [pc, #220]	@ (8005944 <xTaskResumeAll+0x118>)
 8005866:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005868:	4b36      	ldr	r3, [pc, #216]	@ (8005944 <xTaskResumeAll+0x118>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d162      	bne.n	8005936 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005870:	4b35      	ldr	r3, [pc, #212]	@ (8005948 <xTaskResumeAll+0x11c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d05e      	beq.n	8005936 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005878:	e02f      	b.n	80058da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587a:	4b34      	ldr	r3, [pc, #208]	@ (800594c <xTaskResumeAll+0x120>)
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3318      	adds	r3, #24
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff f85a 	bl	8004940 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3304      	adds	r3, #4
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff f855 	bl	8004940 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800589a:	4b2d      	ldr	r3, [pc, #180]	@ (8005950 <xTaskResumeAll+0x124>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d903      	bls.n	80058aa <xTaskResumeAll+0x7e>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005950 <xTaskResumeAll+0x124>)
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4a27      	ldr	r2, [pc, #156]	@ (8005954 <xTaskResumeAll+0x128>)
 80058b8:	441a      	add	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3304      	adds	r3, #4
 80058be:	4619      	mov	r1, r3
 80058c0:	4610      	mov	r0, r2
 80058c2:	f7fe ffe0 	bl	8004886 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ca:	4b23      	ldr	r3, [pc, #140]	@ (8005958 <xTaskResumeAll+0x12c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d302      	bcc.n	80058da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80058d4:	4b21      	ldr	r3, [pc, #132]	@ (800595c <xTaskResumeAll+0x130>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058da:	4b1c      	ldr	r3, [pc, #112]	@ (800594c <xTaskResumeAll+0x120>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1cb      	bne.n	800587a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058e8:	f000 fb58 	bl	8005f9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005960 <xTaskResumeAll+0x134>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d010      	beq.n	800591a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058f8:	f000 f846 	bl	8005988 <xTaskIncrementTick>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005902:	4b16      	ldr	r3, [pc, #88]	@ (800595c <xTaskResumeAll+0x130>)
 8005904:	2201      	movs	r2, #1
 8005906:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3b01      	subs	r3, #1
 800590c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1f1      	bne.n	80058f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005914:	4b12      	ldr	r3, [pc, #72]	@ (8005960 <xTaskResumeAll+0x134>)
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800591a:	4b10      	ldr	r3, [pc, #64]	@ (800595c <xTaskResumeAll+0x130>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005922:	2301      	movs	r3, #1
 8005924:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005926:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <xTaskResumeAll+0x138>)
 8005928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005936:	f001 f8f1 	bl	8006b1c <vPortExitCritical>

	return xAlreadyYielded;
 800593a:	68bb      	ldr	r3, [r7, #8]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	20000e9c 	.word	0x20000e9c
 8005948:	20000e74 	.word	0x20000e74
 800594c:	20000e34 	.word	0x20000e34
 8005950:	20000e7c 	.word	0x20000e7c
 8005954:	200009a4 	.word	0x200009a4
 8005958:	200009a0 	.word	0x200009a0
 800595c:	20000e88 	.word	0x20000e88
 8005960:	20000e84 	.word	0x20000e84
 8005964:	e000ed04 	.word	0xe000ed04

08005968 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800596e:	4b05      	ldr	r3, [pc, #20]	@ (8005984 <xTaskGetTickCount+0x1c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005974:	687b      	ldr	r3, [r7, #4]
}
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20000e78 	.word	0x20000e78

08005988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800598e:	2300      	movs	r3, #0
 8005990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005992:	4b4f      	ldr	r3, [pc, #316]	@ (8005ad0 <xTaskIncrementTick+0x148>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	f040 8090 	bne.w	8005abc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800599c:	4b4d      	ldr	r3, [pc, #308]	@ (8005ad4 <xTaskIncrementTick+0x14c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059a4:	4a4b      	ldr	r2, [pc, #300]	@ (8005ad4 <xTaskIncrementTick+0x14c>)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d121      	bne.n	80059f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059b0:	4b49      	ldr	r3, [pc, #292]	@ (8005ad8 <xTaskIncrementTick+0x150>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00b      	beq.n	80059d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	603b      	str	r3, [r7, #0]
}
 80059cc:	bf00      	nop
 80059ce:	bf00      	nop
 80059d0:	e7fd      	b.n	80059ce <xTaskIncrementTick+0x46>
 80059d2:	4b41      	ldr	r3, [pc, #260]	@ (8005ad8 <xTaskIncrementTick+0x150>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	4b40      	ldr	r3, [pc, #256]	@ (8005adc <xTaskIncrementTick+0x154>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a3e      	ldr	r2, [pc, #248]	@ (8005ad8 <xTaskIncrementTick+0x150>)
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	4a3e      	ldr	r2, [pc, #248]	@ (8005adc <xTaskIncrementTick+0x154>)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ae0 <xTaskIncrementTick+0x158>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3301      	adds	r3, #1
 80059ec:	4a3c      	ldr	r2, [pc, #240]	@ (8005ae0 <xTaskIncrementTick+0x158>)
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	f000 fad4 	bl	8005f9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059f4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ae4 <xTaskIncrementTick+0x15c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d349      	bcc.n	8005a92 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059fe:	4b36      	ldr	r3, [pc, #216]	@ (8005ad8 <xTaskIncrementTick+0x150>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a08:	4b36      	ldr	r3, [pc, #216]	@ (8005ae4 <xTaskIncrementTick+0x15c>)
 8005a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0e:	601a      	str	r2, [r3, #0]
					break;
 8005a10:	e03f      	b.n	8005a92 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a12:	4b31      	ldr	r3, [pc, #196]	@ (8005ad8 <xTaskIncrementTick+0x150>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d203      	bcs.n	8005a32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a2a:	4a2e      	ldr	r2, [pc, #184]	@ (8005ae4 <xTaskIncrementTick+0x15c>)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a30:	e02f      	b.n	8005a92 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe ff82 	bl	8004940 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d004      	beq.n	8005a4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	3318      	adds	r3, #24
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fe ff79 	bl	8004940 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a52:	4b25      	ldr	r3, [pc, #148]	@ (8005ae8 <xTaskIncrementTick+0x160>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d903      	bls.n	8005a62 <xTaskIncrementTick+0xda>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5e:	4a22      	ldr	r2, [pc, #136]	@ (8005ae8 <xTaskIncrementTick+0x160>)
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8005aec <xTaskIncrementTick+0x164>)
 8005a70:	441a      	add	r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	3304      	adds	r3, #4
 8005a76:	4619      	mov	r1, r3
 8005a78:	4610      	mov	r0, r2
 8005a7a:	f7fe ff04 	bl	8004886 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a82:	4b1b      	ldr	r3, [pc, #108]	@ (8005af0 <xTaskIncrementTick+0x168>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d3b8      	bcc.n	80059fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a90:	e7b5      	b.n	80059fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a92:	4b17      	ldr	r3, [pc, #92]	@ (8005af0 <xTaskIncrementTick+0x168>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a98:	4914      	ldr	r1, [pc, #80]	@ (8005aec <xTaskIncrementTick+0x164>)
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	440b      	add	r3, r1
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d901      	bls.n	8005aae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005aae:	4b11      	ldr	r3, [pc, #68]	@ (8005af4 <xTaskIncrementTick+0x16c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	e004      	b.n	8005ac6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005abc:	4b0e      	ldr	r3, [pc, #56]	@ (8005af8 <xTaskIncrementTick+0x170>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8005af8 <xTaskIncrementTick+0x170>)
 8005ac4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ac6:	697b      	ldr	r3, [r7, #20]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20000e9c 	.word	0x20000e9c
 8005ad4:	20000e78 	.word	0x20000e78
 8005ad8:	20000e2c 	.word	0x20000e2c
 8005adc:	20000e30 	.word	0x20000e30
 8005ae0:	20000e8c 	.word	0x20000e8c
 8005ae4:	20000e94 	.word	0x20000e94
 8005ae8:	20000e7c 	.word	0x20000e7c
 8005aec:	200009a4 	.word	0x200009a4
 8005af0:	200009a0 	.word	0x200009a0
 8005af4:	20000e88 	.word	0x20000e88
 8005af8:	20000e84 	.word	0x20000e84

08005afc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b02:	4b28      	ldr	r3, [pc, #160]	@ (8005ba4 <vTaskSwitchContext+0xa8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b0a:	4b27      	ldr	r3, [pc, #156]	@ (8005ba8 <vTaskSwitchContext+0xac>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b10:	e042      	b.n	8005b98 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005b12:	4b25      	ldr	r3, [pc, #148]	@ (8005ba8 <vTaskSwitchContext+0xac>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b18:	4b24      	ldr	r3, [pc, #144]	@ (8005bac <vTaskSwitchContext+0xb0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e011      	b.n	8005b44 <vTaskSwitchContext+0x48>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10b      	bne.n	8005b3e <vTaskSwitchContext+0x42>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	607b      	str	r3, [r7, #4]
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	e7fd      	b.n	8005b3a <vTaskSwitchContext+0x3e>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	491a      	ldr	r1, [pc, #104]	@ (8005bb0 <vTaskSwitchContext+0xb4>)
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0e3      	beq.n	8005b20 <vTaskSwitchContext+0x24>
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4a13      	ldr	r2, [pc, #76]	@ (8005bb0 <vTaskSwitchContext+0xb4>)
 8005b64:	4413      	add	r3, r2
 8005b66:	60bb      	str	r3, [r7, #8]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	3308      	adds	r3, #8
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d104      	bne.n	8005b88 <vTaskSwitchContext+0x8c>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	605a      	str	r2, [r3, #4]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	4a09      	ldr	r2, [pc, #36]	@ (8005bb4 <vTaskSwitchContext+0xb8>)
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	4a06      	ldr	r2, [pc, #24]	@ (8005bac <vTaskSwitchContext+0xb0>)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6013      	str	r3, [r2, #0]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	20000e9c 	.word	0x20000e9c
 8005ba8:	20000e88 	.word	0x20000e88
 8005bac:	20000e7c 	.word	0x20000e7c
 8005bb0:	200009a4 	.word	0x200009a4
 8005bb4:	200009a0 	.word	0x200009a0

08005bb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10b      	bne.n	8005be0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	60fb      	str	r3, [r7, #12]
}
 8005bda:	bf00      	nop
 8005bdc:	bf00      	nop
 8005bde:	e7fd      	b.n	8005bdc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005be0:	4b07      	ldr	r3, [pc, #28]	@ (8005c00 <vTaskPlaceOnEventList+0x48>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3318      	adds	r3, #24
 8005be6:	4619      	mov	r1, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7fe fe70 	bl	80048ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bee:	2101      	movs	r1, #1
 8005bf0:	6838      	ldr	r0, [r7, #0]
 8005bf2:	f000 fa81 	bl	80060f8 <prvAddCurrentTaskToDelayedList>
}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	200009a0 	.word	0x200009a0

08005c04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10b      	bne.n	8005c2e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	617b      	str	r3, [r7, #20]
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c58 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3318      	adds	r3, #24
 8005c34:	4619      	mov	r1, r3
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f7fe fe25 	bl	8004886 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005c42:	f04f 33ff 	mov.w	r3, #4294967295
 8005c46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	68b8      	ldr	r0, [r7, #8]
 8005c4c:	f000 fa54 	bl	80060f8 <prvAddCurrentTaskToDelayedList>
	}
 8005c50:	bf00      	nop
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	200009a0 	.word	0x200009a0

08005c5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10b      	bne.n	8005c8a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60fb      	str	r3, [r7, #12]
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop
 8005c88:	e7fd      	b.n	8005c86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	3318      	adds	r3, #24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe fe56 	bl	8004940 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c94:	4b1d      	ldr	r3, [pc, #116]	@ (8005d0c <xTaskRemoveFromEventList+0xb0>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d11d      	bne.n	8005cd8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fe fe4d 	bl	8004940 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005caa:	4b19      	ldr	r3, [pc, #100]	@ (8005d10 <xTaskRemoveFromEventList+0xb4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d903      	bls.n	8005cba <xTaskRemoveFromEventList+0x5e>
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb6:	4a16      	ldr	r2, [pc, #88]	@ (8005d10 <xTaskRemoveFromEventList+0xb4>)
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4a13      	ldr	r2, [pc, #76]	@ (8005d14 <xTaskRemoveFromEventList+0xb8>)
 8005cc8:	441a      	add	r2, r3
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f7fe fdd8 	bl	8004886 <vListInsertEnd>
 8005cd6:	e005      	b.n	8005ce4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	3318      	adds	r3, #24
 8005cdc:	4619      	mov	r1, r3
 8005cde:	480e      	ldr	r0, [pc, #56]	@ (8005d18 <xTaskRemoveFromEventList+0xbc>)
 8005ce0:	f7fe fdd1 	bl	8004886 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d1c <xTaskRemoveFromEventList+0xc0>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d905      	bls.n	8005cfe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8005d20 <xTaskRemoveFromEventList+0xc4>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	e001      	b.n	8005d02 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d02:	697b      	ldr	r3, [r7, #20]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20000e9c 	.word	0x20000e9c
 8005d10:	20000e7c 	.word	0x20000e7c
 8005d14:	200009a4 	.word	0x200009a4
 8005d18:	20000e34 	.word	0x20000e34
 8005d1c:	200009a0 	.word	0x200009a0
 8005d20:	20000e88 	.word	0x20000e88

08005d24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d2c:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <vTaskInternalSetTimeOutState+0x24>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d34:	4b05      	ldr	r3, [pc, #20]	@ (8005d4c <vTaskInternalSetTimeOutState+0x28>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	605a      	str	r2, [r3, #4]
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	20000e8c 	.word	0x20000e8c
 8005d4c:	20000e78 	.word	0x20000e78

08005d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10b      	bne.n	8005d78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	613b      	str	r3, [r7, #16]
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	e7fd      	b.n	8005d74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10b      	bne.n	8005d96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	60fb      	str	r3, [r7, #12]
}
 8005d90:	bf00      	nop
 8005d92:	bf00      	nop
 8005d94:	e7fd      	b.n	8005d92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005d96:	f000 fe8f 	bl	8006ab8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005e10 <xTaskCheckForTimeOut+0xc0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	d102      	bne.n	8005dba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61fb      	str	r3, [r7, #28]
 8005db8:	e023      	b.n	8005e02 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4b15      	ldr	r3, [pc, #84]	@ (8005e14 <xTaskCheckForTimeOut+0xc4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d007      	beq.n	8005dd6 <xTaskCheckForTimeOut+0x86>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d302      	bcc.n	8005dd6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	e015      	b.n	8005e02 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d20b      	bcs.n	8005df8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	1ad2      	subs	r2, r2, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff ff99 	bl	8005d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61fb      	str	r3, [r7, #28]
 8005df6:	e004      	b.n	8005e02 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e02:	f000 fe8b 	bl	8006b1c <vPortExitCritical>

	return xReturn;
 8005e06:	69fb      	ldr	r3, [r7, #28]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3720      	adds	r7, #32
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20000e78 	.word	0x20000e78
 8005e14:	20000e8c 	.word	0x20000e8c

08005e18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e1c:	4b03      	ldr	r3, [pc, #12]	@ (8005e2c <vTaskMissedYield+0x14>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
}
 8005e22:	bf00      	nop
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	20000e88 	.word	0x20000e88

08005e30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e38:	f000 f852 	bl	8005ee0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e3c:	4b06      	ldr	r3, [pc, #24]	@ (8005e58 <prvIdleTask+0x28>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d9f9      	bls.n	8005e38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e44:	4b05      	ldr	r3, [pc, #20]	@ (8005e5c <prvIdleTask+0x2c>)
 8005e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e54:	e7f0      	b.n	8005e38 <prvIdleTask+0x8>
 8005e56:	bf00      	nop
 8005e58:	200009a4 	.word	0x200009a4
 8005e5c:	e000ed04 	.word	0xe000ed04

08005e60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e66:	2300      	movs	r3, #0
 8005e68:	607b      	str	r3, [r7, #4]
 8005e6a:	e00c      	b.n	8005e86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4a12      	ldr	r2, [pc, #72]	@ (8005ec0 <prvInitialiseTaskLists+0x60>)
 8005e78:	4413      	add	r3, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe fcd6 	bl	800482c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3301      	adds	r3, #1
 8005e84:	607b      	str	r3, [r7, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b37      	cmp	r3, #55	@ 0x37
 8005e8a:	d9ef      	bls.n	8005e6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e8c:	480d      	ldr	r0, [pc, #52]	@ (8005ec4 <prvInitialiseTaskLists+0x64>)
 8005e8e:	f7fe fccd 	bl	800482c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e92:	480d      	ldr	r0, [pc, #52]	@ (8005ec8 <prvInitialiseTaskLists+0x68>)
 8005e94:	f7fe fcca 	bl	800482c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e98:	480c      	ldr	r0, [pc, #48]	@ (8005ecc <prvInitialiseTaskLists+0x6c>)
 8005e9a:	f7fe fcc7 	bl	800482c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e9e:	480c      	ldr	r0, [pc, #48]	@ (8005ed0 <prvInitialiseTaskLists+0x70>)
 8005ea0:	f7fe fcc4 	bl	800482c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ea4:	480b      	ldr	r0, [pc, #44]	@ (8005ed4 <prvInitialiseTaskLists+0x74>)
 8005ea6:	f7fe fcc1 	bl	800482c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed8 <prvInitialiseTaskLists+0x78>)
 8005eac:	4a05      	ldr	r2, [pc, #20]	@ (8005ec4 <prvInitialiseTaskLists+0x64>)
 8005eae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8005edc <prvInitialiseTaskLists+0x7c>)
 8005eb2:	4a05      	ldr	r2, [pc, #20]	@ (8005ec8 <prvInitialiseTaskLists+0x68>)
 8005eb4:	601a      	str	r2, [r3, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	200009a4 	.word	0x200009a4
 8005ec4:	20000e04 	.word	0x20000e04
 8005ec8:	20000e18 	.word	0x20000e18
 8005ecc:	20000e34 	.word	0x20000e34
 8005ed0:	20000e48 	.word	0x20000e48
 8005ed4:	20000e60 	.word	0x20000e60
 8005ed8:	20000e2c 	.word	0x20000e2c
 8005edc:	20000e30 	.word	0x20000e30

08005ee0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ee6:	e019      	b.n	8005f1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ee8:	f000 fde6 	bl	8006ab8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eec:	4b10      	ldr	r3, [pc, #64]	@ (8005f30 <prvCheckTasksWaitingTermination+0x50>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fe fd21 	bl	8004940 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005efe:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <prvCheckTasksWaitingTermination+0x54>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	4a0b      	ldr	r2, [pc, #44]	@ (8005f34 <prvCheckTasksWaitingTermination+0x54>)
 8005f06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f08:	4b0b      	ldr	r3, [pc, #44]	@ (8005f38 <prvCheckTasksWaitingTermination+0x58>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f38 <prvCheckTasksWaitingTermination+0x58>)
 8005f10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f12:	f000 fe03 	bl	8006b1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f810 	bl	8005f3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f1c:	4b06      	ldr	r3, [pc, #24]	@ (8005f38 <prvCheckTasksWaitingTermination+0x58>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e1      	bne.n	8005ee8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000e48 	.word	0x20000e48
 8005f34:	20000e74 	.word	0x20000e74
 8005f38:	20000e5c 	.word	0x20000e5c

08005f3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d108      	bne.n	8005f60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 ffa0 	bl	8006e98 <vPortFree>
				vPortFree( pxTCB );
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 ff9d 	bl	8006e98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f5e:	e019      	b.n	8005f94 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d103      	bne.n	8005f72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 ff94 	bl	8006e98 <vPortFree>
	}
 8005f70:	e010      	b.n	8005f94 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d00b      	beq.n	8005f94 <prvDeleteTCB+0x58>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	60fb      	str	r3, [r7, #12]
}
 8005f8e:	bf00      	nop
 8005f90:	bf00      	nop
 8005f92:	e7fd      	b.n	8005f90 <prvDeleteTCB+0x54>
	}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd4 <prvResetNextTaskUnblockTime+0x38>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d104      	bne.n	8005fb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fac:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fae:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fb4:	e008      	b.n	8005fc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb6:	4b07      	ldr	r3, [pc, #28]	@ (8005fd4 <prvResetNextTaskUnblockTime+0x38>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4a04      	ldr	r2, [pc, #16]	@ (8005fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fc6:	6013      	str	r3, [r2, #0]
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	20000e2c 	.word	0x20000e2c
 8005fd8:	20000e94 	.word	0x20000e94

08005fdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <xTaskGetSchedulerState+0x34>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fea:	2301      	movs	r3, #1
 8005fec:	607b      	str	r3, [r7, #4]
 8005fee:	e008      	b.n	8006002 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ff0:	4b08      	ldr	r3, [pc, #32]	@ (8006014 <xTaskGetSchedulerState+0x38>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d102      	bne.n	8005ffe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	607b      	str	r3, [r7, #4]
 8005ffc:	e001      	b.n	8006002 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ffe:	2300      	movs	r3, #0
 8006000:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006002:	687b      	ldr	r3, [r7, #4]
	}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	20000e80 	.word	0x20000e80
 8006014:	20000e9c 	.word	0x20000e9c

08006018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d058      	beq.n	80060e0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800602e:	4b2f      	ldr	r3, [pc, #188]	@ (80060ec <xTaskPriorityDisinherit+0xd4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	429a      	cmp	r2, r3
 8006036:	d00b      	beq.n	8006050 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	60fb      	str	r3, [r7, #12]
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	e7fd      	b.n	800604c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10b      	bne.n	8006070 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	60bb      	str	r3, [r7, #8]
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	e7fd      	b.n	800606c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006074:	1e5a      	subs	r2, r3, #1
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006082:	429a      	cmp	r2, r3
 8006084:	d02c      	beq.n	80060e0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800608a:	2b00      	cmp	r3, #0
 800608c:	d128      	bne.n	80060e0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	3304      	adds	r3, #4
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe fc54 	bl	8004940 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b0:	4b0f      	ldr	r3, [pc, #60]	@ (80060f0 <xTaskPriorityDisinherit+0xd8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d903      	bls.n	80060c0 <xTaskPriorityDisinherit+0xa8>
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060bc:	4a0c      	ldr	r2, [pc, #48]	@ (80060f0 <xTaskPriorityDisinherit+0xd8>)
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4a09      	ldr	r2, [pc, #36]	@ (80060f4 <xTaskPriorityDisinherit+0xdc>)
 80060ce:	441a      	add	r2, r3
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f7fe fbd5 	bl	8004886 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060dc:	2301      	movs	r3, #1
 80060de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060e0:	697b      	ldr	r3, [r7, #20]
	}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	200009a0 	.word	0x200009a0
 80060f0:	20000e7c 	.word	0x20000e7c
 80060f4:	200009a4 	.word	0x200009a4

080060f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006102:	4b21      	ldr	r3, [pc, #132]	@ (8006188 <prvAddCurrentTaskToDelayedList+0x90>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006108:	4b20      	ldr	r3, [pc, #128]	@ (800618c <prvAddCurrentTaskToDelayedList+0x94>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3304      	adds	r3, #4
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe fc16 	bl	8004940 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d10a      	bne.n	8006132 <prvAddCurrentTaskToDelayedList+0x3a>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006122:	4b1a      	ldr	r3, [pc, #104]	@ (800618c <prvAddCurrentTaskToDelayedList+0x94>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3304      	adds	r3, #4
 8006128:	4619      	mov	r1, r3
 800612a:	4819      	ldr	r0, [pc, #100]	@ (8006190 <prvAddCurrentTaskToDelayedList+0x98>)
 800612c:	f7fe fbab 	bl	8004886 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006130:	e026      	b.n	8006180 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4413      	add	r3, r2
 8006138:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800613a:	4b14      	ldr	r3, [pc, #80]	@ (800618c <prvAddCurrentTaskToDelayedList+0x94>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	429a      	cmp	r2, r3
 8006148:	d209      	bcs.n	800615e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800614a:	4b12      	ldr	r3, [pc, #72]	@ (8006194 <prvAddCurrentTaskToDelayedList+0x9c>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b0f      	ldr	r3, [pc, #60]	@ (800618c <prvAddCurrentTaskToDelayedList+0x94>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fe fbb9 	bl	80048ce <vListInsert>
}
 800615c:	e010      	b.n	8006180 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800615e:	4b0e      	ldr	r3, [pc, #56]	@ (8006198 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b0a      	ldr	r3, [pc, #40]	@ (800618c <prvAddCurrentTaskToDelayedList+0x94>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f7fe fbaf 	bl	80048ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006170:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	429a      	cmp	r2, r3
 8006178:	d202      	bcs.n	8006180 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800617a:	4a08      	ldr	r2, [pc, #32]	@ (800619c <prvAddCurrentTaskToDelayedList+0xa4>)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	6013      	str	r3, [r2, #0]
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20000e78 	.word	0x20000e78
 800618c:	200009a0 	.word	0x200009a0
 8006190:	20000e60 	.word	0x20000e60
 8006194:	20000e30 	.word	0x20000e30
 8006198:	20000e2c 	.word	0x20000e2c
 800619c:	20000e94 	.word	0x20000e94

080061a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08a      	sub	sp, #40	@ 0x28
 80061a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061aa:	f000 fb13 	bl	80067d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006224 <xTimerCreateTimerTask+0x84>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d021      	beq.n	80061fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061be:	1d3a      	adds	r2, r7, #4
 80061c0:	f107 0108 	add.w	r1, r7, #8
 80061c4:	f107 030c 	add.w	r3, r7, #12
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fe fb15 	bl	80047f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	9202      	str	r2, [sp, #8]
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	2302      	movs	r3, #2
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	2300      	movs	r3, #0
 80061de:	460a      	mov	r2, r1
 80061e0:	4911      	ldr	r1, [pc, #68]	@ (8006228 <xTimerCreateTimerTask+0x88>)
 80061e2:	4812      	ldr	r0, [pc, #72]	@ (800622c <xTimerCreateTimerTask+0x8c>)
 80061e4:	f7ff f8d0 	bl	8005388 <xTaskCreateStatic>
 80061e8:	4603      	mov	r3, r0
 80061ea:	4a11      	ldr	r2, [pc, #68]	@ (8006230 <xTimerCreateTimerTask+0x90>)
 80061ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061ee:	4b10      	ldr	r3, [pc, #64]	@ (8006230 <xTimerCreateTimerTask+0x90>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061f6:	2301      	movs	r3, #1
 80061f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10b      	bne.n	8006218 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	613b      	str	r3, [r7, #16]
}
 8006212:	bf00      	nop
 8006214:	bf00      	nop
 8006216:	e7fd      	b.n	8006214 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006218:	697b      	ldr	r3, [r7, #20]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20000ed0 	.word	0x20000ed0
 8006228:	08007cd4 	.word	0x08007cd4
 800622c:	0800636d 	.word	0x0800636d
 8006230:	20000ed4 	.word	0x20000ed4

08006234 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08a      	sub	sp, #40	@ 0x28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006242:	2300      	movs	r3, #0
 8006244:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10b      	bne.n	8006264 <xTimerGenericCommand+0x30>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	623b      	str	r3, [r7, #32]
}
 800625e:	bf00      	nop
 8006260:	bf00      	nop
 8006262:	e7fd      	b.n	8006260 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006264:	4b19      	ldr	r3, [pc, #100]	@ (80062cc <xTimerGenericCommand+0x98>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d02a      	beq.n	80062c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b05      	cmp	r3, #5
 800627c:	dc18      	bgt.n	80062b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800627e:	f7ff fead 	bl	8005fdc <xTaskGetSchedulerState>
 8006282:	4603      	mov	r3, r0
 8006284:	2b02      	cmp	r3, #2
 8006286:	d109      	bne.n	800629c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006288:	4b10      	ldr	r3, [pc, #64]	@ (80062cc <xTimerGenericCommand+0x98>)
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	f107 0110 	add.w	r1, r7, #16
 8006290:	2300      	movs	r3, #0
 8006292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006294:	f7fe fc88 	bl	8004ba8 <xQueueGenericSend>
 8006298:	6278      	str	r0, [r7, #36]	@ 0x24
 800629a:	e012      	b.n	80062c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800629c:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <xTimerGenericCommand+0x98>)
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	f107 0110 	add.w	r1, r7, #16
 80062a4:	2300      	movs	r3, #0
 80062a6:	2200      	movs	r2, #0
 80062a8:	f7fe fc7e 	bl	8004ba8 <xQueueGenericSend>
 80062ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80062ae:	e008      	b.n	80062c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062b0:	4b06      	ldr	r3, [pc, #24]	@ (80062cc <xTimerGenericCommand+0x98>)
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	f107 0110 	add.w	r1, r7, #16
 80062b8:	2300      	movs	r3, #0
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	f7fe fd76 	bl	8004dac <xQueueGenericSendFromISR>
 80062c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3728      	adds	r7, #40	@ 0x28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20000ed0 	.word	0x20000ed0

080062d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062da:	4b23      	ldr	r3, [pc, #140]	@ (8006368 <prvProcessExpiredTimer+0x98>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	3304      	adds	r3, #4
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fe fb29 	bl	8004940 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d023      	beq.n	8006344 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	699a      	ldr	r2, [r3, #24]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	18d1      	adds	r1, r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	6978      	ldr	r0, [r7, #20]
 800630a:	f000 f8d5 	bl	80064b8 <prvInsertTimerInActiveList>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d020      	beq.n	8006356 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006314:	2300      	movs	r3, #0
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	2300      	movs	r3, #0
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	2100      	movs	r1, #0
 800631e:	6978      	ldr	r0, [r7, #20]
 8006320:	f7ff ff88 	bl	8006234 <xTimerGenericCommand>
 8006324:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d114      	bne.n	8006356 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	60fb      	str	r3, [r7, #12]
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	e7fd      	b.n	8006340 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800634a:	f023 0301 	bic.w	r3, r3, #1
 800634e:	b2da      	uxtb	r2, r3
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	6978      	ldr	r0, [r7, #20]
 800635c:	4798      	blx	r3
}
 800635e:	bf00      	nop
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20000ec8 	.word	0x20000ec8

0800636c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006374:	f107 0308 	add.w	r3, r7, #8
 8006378:	4618      	mov	r0, r3
 800637a:	f000 f859 	bl	8006430 <prvGetNextExpireTime>
 800637e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4619      	mov	r1, r3
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f805 	bl	8006394 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800638a:	f000 f8d7 	bl	800653c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800638e:	bf00      	nop
 8006390:	e7f0      	b.n	8006374 <prvTimerTask+0x8>
	...

08006394 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800639e:	f7ff fa37 	bl	8005810 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063a2:	f107 0308 	add.w	r3, r7, #8
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 f866 	bl	8006478 <prvSampleTimeNow>
 80063ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d130      	bne.n	8006416 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10a      	bne.n	80063d0 <prvProcessTimerOrBlockTask+0x3c>
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d806      	bhi.n	80063d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063c2:	f7ff fa33 	bl	800582c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff ff81 	bl	80062d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063ce:	e024      	b.n	800641a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d008      	beq.n	80063e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063d6:	4b13      	ldr	r3, [pc, #76]	@ (8006424 <prvProcessTimerOrBlockTask+0x90>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <prvProcessTimerOrBlockTask+0x50>
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <prvProcessTimerOrBlockTask+0x52>
 80063e4:	2300      	movs	r3, #0
 80063e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006428 <prvProcessTimerOrBlockTask+0x94>)
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	4619      	mov	r1, r3
 80063f6:	f7fe ff93 	bl	8005320 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063fa:	f7ff fa17 	bl	800582c <xTaskResumeAll>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006404:	4b09      	ldr	r3, [pc, #36]	@ (800642c <prvProcessTimerOrBlockTask+0x98>)
 8006406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	f3bf 8f6f 	isb	sy
}
 8006414:	e001      	b.n	800641a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006416:	f7ff fa09 	bl	800582c <xTaskResumeAll>
}
 800641a:	bf00      	nop
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20000ecc 	.word	0x20000ecc
 8006428:	20000ed0 	.word	0x20000ed0
 800642c:	e000ed04 	.word	0xe000ed04

08006430 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006438:	4b0e      	ldr	r3, [pc, #56]	@ (8006474 <prvGetNextExpireTime+0x44>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <prvGetNextExpireTime+0x16>
 8006442:	2201      	movs	r2, #1
 8006444:	e000      	b.n	8006448 <prvGetNextExpireTime+0x18>
 8006446:	2200      	movs	r2, #0
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006454:	4b07      	ldr	r3, [pc, #28]	@ (8006474 <prvGetNextExpireTime+0x44>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e001      	b.n	8006464 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006464:	68fb      	ldr	r3, [r7, #12]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	20000ec8 	.word	0x20000ec8

08006478 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006480:	f7ff fa72 	bl	8005968 <xTaskGetTickCount>
 8006484:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006486:	4b0b      	ldr	r3, [pc, #44]	@ (80064b4 <prvSampleTimeNow+0x3c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	429a      	cmp	r2, r3
 800648e:	d205      	bcs.n	800649c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006490:	f000 f93a 	bl	8006708 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	e002      	b.n	80064a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064a2:	4a04      	ldr	r2, [pc, #16]	@ (80064b4 <prvSampleTimeNow+0x3c>)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064a8:	68fb      	ldr	r3, [r7, #12]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000ed8 	.word	0x20000ed8

080064b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d812      	bhi.n	8006504 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	1ad2      	subs	r2, r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d302      	bcc.n	80064f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064ec:	2301      	movs	r3, #1
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	e01b      	b.n	800652a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064f2:	4b10      	ldr	r3, [pc, #64]	@ (8006534 <prvInsertTimerInActiveList+0x7c>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3304      	adds	r3, #4
 80064fa:	4619      	mov	r1, r3
 80064fc:	4610      	mov	r0, r2
 80064fe:	f7fe f9e6 	bl	80048ce <vListInsert>
 8006502:	e012      	b.n	800652a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d206      	bcs.n	800651a <prvInsertTimerInActiveList+0x62>
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006514:	2301      	movs	r3, #1
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e007      	b.n	800652a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800651a:	4b07      	ldr	r3, [pc, #28]	@ (8006538 <prvInsertTimerInActiveList+0x80>)
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3304      	adds	r3, #4
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f7fe f9d2 	bl	80048ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800652a:	697b      	ldr	r3, [r7, #20]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	20000ecc 	.word	0x20000ecc
 8006538:	20000ec8 	.word	0x20000ec8

0800653c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08e      	sub	sp, #56	@ 0x38
 8006540:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006542:	e0ce      	b.n	80066e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	da19      	bge.n	800657e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800654a:	1d3b      	adds	r3, r7, #4
 800654c:	3304      	adds	r3, #4
 800654e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	61fb      	str	r3, [r7, #28]
}
 8006568:	bf00      	nop
 800656a:	bf00      	nop
 800656c:	e7fd      	b.n	800656a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800656e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006574:	6850      	ldr	r0, [r2, #4]
 8006576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006578:	6892      	ldr	r2, [r2, #8]
 800657a:	4611      	mov	r1, r2
 800657c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f2c0 80ae 	blt.w	80066e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800658a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d004      	beq.n	800659c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006594:	3304      	adds	r3, #4
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe f9d2 	bl	8004940 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800659c:	463b      	mov	r3, r7
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff ff6a 	bl	8006478 <prvSampleTimeNow>
 80065a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b09      	cmp	r3, #9
 80065aa:	f200 8097 	bhi.w	80066dc <prvProcessReceivedCommands+0x1a0>
 80065ae:	a201      	add	r2, pc, #4	@ (adr r2, 80065b4 <prvProcessReceivedCommands+0x78>)
 80065b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b4:	080065dd 	.word	0x080065dd
 80065b8:	080065dd 	.word	0x080065dd
 80065bc:	080065dd 	.word	0x080065dd
 80065c0:	08006653 	.word	0x08006653
 80065c4:	08006667 	.word	0x08006667
 80065c8:	080066b3 	.word	0x080066b3
 80065cc:	080065dd 	.word	0x080065dd
 80065d0:	080065dd 	.word	0x080065dd
 80065d4:	08006653 	.word	0x08006653
 80065d8:	08006667 	.word	0x08006667
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	18d1      	adds	r1, r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065fc:	f7ff ff5c 	bl	80064b8 <prvInsertTimerInActiveList>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d06c      	beq.n	80066e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800660c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006610:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d061      	beq.n	80066e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	441a      	add	r2, r3
 8006624:	2300      	movs	r3, #0
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	2300      	movs	r3, #0
 800662a:	2100      	movs	r1, #0
 800662c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800662e:	f7ff fe01 	bl	8006234 <xTimerGenericCommand>
 8006632:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d152      	bne.n	80066e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	61bb      	str	r3, [r7, #24]
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	e7fd      	b.n	800664e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006658:	f023 0301 	bic.w	r3, r3, #1
 800665c:	b2da      	uxtb	r2, r3
 800665e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006660:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006664:	e03d      	b.n	80066e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800666c:	f043 0301 	orr.w	r3, r3, #1
 8006670:	b2da      	uxtb	r2, r3
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800667e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10b      	bne.n	800669e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	617b      	str	r3, [r7, #20]
}
 8006698:	bf00      	nop
 800669a:	bf00      	nop
 800669c:	e7fd      	b.n	800669a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	18d1      	adds	r1, r2, r3
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066ac:	f7ff ff04 	bl	80064b8 <prvInsertTimerInActiveList>
					break;
 80066b0:	e017      	b.n	80066e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d103      	bne.n	80066c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80066c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066c2:	f000 fbe9 	bl	8006e98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066c6:	e00c      	b.n	80066e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066ce:	f023 0301 	bic.w	r3, r3, #1
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80066da:	e002      	b.n	80066e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80066dc:	bf00      	nop
 80066de:	e000      	b.n	80066e2 <prvProcessReceivedCommands+0x1a6>
					break;
 80066e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066e2:	4b08      	ldr	r3, [pc, #32]	@ (8006704 <prvProcessReceivedCommands+0x1c8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	1d39      	adds	r1, r7, #4
 80066e8:	2200      	movs	r2, #0
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fe fbfc 	bl	8004ee8 <xQueueReceive>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f47f af26 	bne.w	8006544 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	3730      	adds	r7, #48	@ 0x30
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20000ed0 	.word	0x20000ed0

08006708 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800670e:	e049      	b.n	80067a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006710:	4b2e      	ldr	r3, [pc, #184]	@ (80067cc <prvSwitchTimerLists+0xc4>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800671a:	4b2c      	ldr	r3, [pc, #176]	@ (80067cc <prvSwitchTimerLists+0xc4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3304      	adds	r3, #4
 8006728:	4618      	mov	r0, r3
 800672a:	f7fe f909 	bl	8004940 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d02f      	beq.n	80067a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4413      	add	r3, r2
 800674c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	429a      	cmp	r2, r3
 8006754:	d90e      	bls.n	8006774 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006762:	4b1a      	ldr	r3, [pc, #104]	@ (80067cc <prvSwitchTimerLists+0xc4>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3304      	adds	r3, #4
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f7fe f8ae 	bl	80048ce <vListInsert>
 8006772:	e017      	b.n	80067a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006774:	2300      	movs	r3, #0
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	2300      	movs	r3, #0
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	2100      	movs	r1, #0
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff fd58 	bl	8006234 <xTimerGenericCommand>
 8006784:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10b      	bne.n	80067a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	603b      	str	r3, [r7, #0]
}
 800679e:	bf00      	nop
 80067a0:	bf00      	nop
 80067a2:	e7fd      	b.n	80067a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067a4:	4b09      	ldr	r3, [pc, #36]	@ (80067cc <prvSwitchTimerLists+0xc4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1b0      	bne.n	8006710 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067ae:	4b07      	ldr	r3, [pc, #28]	@ (80067cc <prvSwitchTimerLists+0xc4>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067b4:	4b06      	ldr	r3, [pc, #24]	@ (80067d0 <prvSwitchTimerLists+0xc8>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a04      	ldr	r2, [pc, #16]	@ (80067cc <prvSwitchTimerLists+0xc4>)
 80067ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067bc:	4a04      	ldr	r2, [pc, #16]	@ (80067d0 <prvSwitchTimerLists+0xc8>)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	6013      	str	r3, [r2, #0]
}
 80067c2:	bf00      	nop
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000ec8 	.word	0x20000ec8
 80067d0:	20000ecc 	.word	0x20000ecc

080067d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067da:	f000 f96d 	bl	8006ab8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067de:	4b15      	ldr	r3, [pc, #84]	@ (8006834 <prvCheckForValidListAndQueue+0x60>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d120      	bne.n	8006828 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067e6:	4814      	ldr	r0, [pc, #80]	@ (8006838 <prvCheckForValidListAndQueue+0x64>)
 80067e8:	f7fe f820 	bl	800482c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067ec:	4813      	ldr	r0, [pc, #76]	@ (800683c <prvCheckForValidListAndQueue+0x68>)
 80067ee:	f7fe f81d 	bl	800482c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067f2:	4b13      	ldr	r3, [pc, #76]	@ (8006840 <prvCheckForValidListAndQueue+0x6c>)
 80067f4:	4a10      	ldr	r2, [pc, #64]	@ (8006838 <prvCheckForValidListAndQueue+0x64>)
 80067f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067f8:	4b12      	ldr	r3, [pc, #72]	@ (8006844 <prvCheckForValidListAndQueue+0x70>)
 80067fa:	4a10      	ldr	r2, [pc, #64]	@ (800683c <prvCheckForValidListAndQueue+0x68>)
 80067fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067fe:	2300      	movs	r3, #0
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	4b11      	ldr	r3, [pc, #68]	@ (8006848 <prvCheckForValidListAndQueue+0x74>)
 8006804:	4a11      	ldr	r2, [pc, #68]	@ (800684c <prvCheckForValidListAndQueue+0x78>)
 8006806:	2110      	movs	r1, #16
 8006808:	200a      	movs	r0, #10
 800680a:	f7fe f92d 	bl	8004a68 <xQueueGenericCreateStatic>
 800680e:	4603      	mov	r3, r0
 8006810:	4a08      	ldr	r2, [pc, #32]	@ (8006834 <prvCheckForValidListAndQueue+0x60>)
 8006812:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006814:	4b07      	ldr	r3, [pc, #28]	@ (8006834 <prvCheckForValidListAndQueue+0x60>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800681c:	4b05      	ldr	r3, [pc, #20]	@ (8006834 <prvCheckForValidListAndQueue+0x60>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	490b      	ldr	r1, [pc, #44]	@ (8006850 <prvCheckForValidListAndQueue+0x7c>)
 8006822:	4618      	mov	r0, r3
 8006824:	f7fe fd52 	bl	80052cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006828:	f000 f978 	bl	8006b1c <vPortExitCritical>
}
 800682c:	bf00      	nop
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20000ed0 	.word	0x20000ed0
 8006838:	20000ea0 	.word	0x20000ea0
 800683c:	20000eb4 	.word	0x20000eb4
 8006840:	20000ec8 	.word	0x20000ec8
 8006844:	20000ecc 	.word	0x20000ecc
 8006848:	20000f7c 	.word	0x20000f7c
 800684c:	20000edc 	.word	0x20000edc
 8006850:	08007cdc 	.word	0x08007cdc

08006854 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3b04      	subs	r3, #4
 8006864:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800686c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3b04      	subs	r3, #4
 8006872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f023 0201 	bic.w	r2, r3, #1
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3b04      	subs	r3, #4
 8006882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006884:	4a0c      	ldr	r2, [pc, #48]	@ (80068b8 <pxPortInitialiseStack+0x64>)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3b14      	subs	r3, #20
 800688e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3b04      	subs	r3, #4
 800689a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f06f 0202 	mvn.w	r2, #2
 80068a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3b20      	subs	r3, #32
 80068a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068aa:	68fb      	ldr	r3, [r7, #12]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	080068bd 	.word	0x080068bd

080068bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068c6:	4b13      	ldr	r3, [pc, #76]	@ (8006914 <prvTaskExitError+0x58>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ce:	d00b      	beq.n	80068e8 <prvTaskExitError+0x2c>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	60fb      	str	r3, [r7, #12]
}
 80068e2:	bf00      	nop
 80068e4:	bf00      	nop
 80068e6:	e7fd      	b.n	80068e4 <prvTaskExitError+0x28>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	60bb      	str	r3, [r7, #8]
}
 80068fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068fc:	bf00      	nop
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0fc      	beq.n	80068fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	20000010 	.word	0x20000010
	...

08006920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006920:	4b07      	ldr	r3, [pc, #28]	@ (8006940 <pxCurrentTCBConst2>)
 8006922:	6819      	ldr	r1, [r3, #0]
 8006924:	6808      	ldr	r0, [r1, #0]
 8006926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692a:	f380 8809 	msr	PSP, r0
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f380 8811 	msr	BASEPRI, r0
 800693a:	4770      	bx	lr
 800693c:	f3af 8000 	nop.w

08006940 <pxCurrentTCBConst2>:
 8006940:	200009a0 	.word	0x200009a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006944:	bf00      	nop
 8006946:	bf00      	nop

08006948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006948:	4808      	ldr	r0, [pc, #32]	@ (800696c <prvPortStartFirstTask+0x24>)
 800694a:	6800      	ldr	r0, [r0, #0]
 800694c:	6800      	ldr	r0, [r0, #0]
 800694e:	f380 8808 	msr	MSP, r0
 8006952:	f04f 0000 	mov.w	r0, #0
 8006956:	f380 8814 	msr	CONTROL, r0
 800695a:	b662      	cpsie	i
 800695c:	b661      	cpsie	f
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	df00      	svc	0
 8006968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800696a:	bf00      	nop
 800696c:	e000ed08 	.word	0xe000ed08

08006970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006976:	4b47      	ldr	r3, [pc, #284]	@ (8006a94 <xPortStartScheduler+0x124>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a47      	ldr	r2, [pc, #284]	@ (8006a98 <xPortStartScheduler+0x128>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d10b      	bne.n	8006998 <xPortStartScheduler+0x28>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	60fb      	str	r3, [r7, #12]
}
 8006992:	bf00      	nop
 8006994:	bf00      	nop
 8006996:	e7fd      	b.n	8006994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006998:	4b3e      	ldr	r3, [pc, #248]	@ (8006a94 <xPortStartScheduler+0x124>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a3f      	ldr	r2, [pc, #252]	@ (8006a9c <xPortStartScheduler+0x12c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d10b      	bne.n	80069ba <xPortStartScheduler+0x4a>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	613b      	str	r3, [r7, #16]
}
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop
 80069b8:	e7fd      	b.n	80069b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069ba:	4b39      	ldr	r3, [pc, #228]	@ (8006aa0 <xPortStartScheduler+0x130>)
 80069bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	22ff      	movs	r2, #255	@ 0xff
 80069ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069d4:	78fb      	ldrb	r3, [r7, #3]
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	4b31      	ldr	r3, [pc, #196]	@ (8006aa4 <xPortStartScheduler+0x134>)
 80069e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069e2:	4b31      	ldr	r3, [pc, #196]	@ (8006aa8 <xPortStartScheduler+0x138>)
 80069e4:	2207      	movs	r2, #7
 80069e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069e8:	e009      	b.n	80069fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80069ea:	4b2f      	ldr	r3, [pc, #188]	@ (8006aa8 <xPortStartScheduler+0x138>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	4a2d      	ldr	r2, [pc, #180]	@ (8006aa8 <xPortStartScheduler+0x138>)
 80069f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a06:	2b80      	cmp	r3, #128	@ 0x80
 8006a08:	d0ef      	beq.n	80069ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a0a:	4b27      	ldr	r3, [pc, #156]	@ (8006aa8 <xPortStartScheduler+0x138>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f1c3 0307 	rsb	r3, r3, #7
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d00b      	beq.n	8006a2e <xPortStartScheduler+0xbe>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	60bb      	str	r3, [r7, #8]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8006aa8 <xPortStartScheduler+0x138>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	021b      	lsls	r3, r3, #8
 8006a34:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa8 <xPortStartScheduler+0x138>)
 8006a36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a38:	4b1b      	ldr	r3, [pc, #108]	@ (8006aa8 <xPortStartScheduler+0x138>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a40:	4a19      	ldr	r2, [pc, #100]	@ (8006aa8 <xPortStartScheduler+0x138>)
 8006a42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a4c:	4b17      	ldr	r3, [pc, #92]	@ (8006aac <xPortStartScheduler+0x13c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a16      	ldr	r2, [pc, #88]	@ (8006aac <xPortStartScheduler+0x13c>)
 8006a52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a58:	4b14      	ldr	r3, [pc, #80]	@ (8006aac <xPortStartScheduler+0x13c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a13      	ldr	r2, [pc, #76]	@ (8006aac <xPortStartScheduler+0x13c>)
 8006a5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006a62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a64:	f000 f8da 	bl	8006c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a68:	4b11      	ldr	r3, [pc, #68]	@ (8006ab0 <xPortStartScheduler+0x140>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a6e:	f000 f8f9 	bl	8006c64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a72:	4b10      	ldr	r3, [pc, #64]	@ (8006ab4 <xPortStartScheduler+0x144>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a0f      	ldr	r2, [pc, #60]	@ (8006ab4 <xPortStartScheduler+0x144>)
 8006a78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006a7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a7e:	f7ff ff63 	bl	8006948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a82:	f7ff f83b 	bl	8005afc <vTaskSwitchContext>
	prvTaskExitError();
 8006a86:	f7ff ff19 	bl	80068bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	e000ed00 	.word	0xe000ed00
 8006a98:	410fc271 	.word	0x410fc271
 8006a9c:	410fc270 	.word	0x410fc270
 8006aa0:	e000e400 	.word	0xe000e400
 8006aa4:	20000fcc 	.word	0x20000fcc
 8006aa8:	20000fd0 	.word	0x20000fd0
 8006aac:	e000ed20 	.word	0xe000ed20
 8006ab0:	20000010 	.word	0x20000010
 8006ab4:	e000ef34 	.word	0xe000ef34

08006ab8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ad2:	4b10      	ldr	r3, [pc, #64]	@ (8006b14 <vPortEnterCritical+0x5c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8006b14 <vPortEnterCritical+0x5c>)
 8006ada:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006adc:	4b0d      	ldr	r3, [pc, #52]	@ (8006b14 <vPortEnterCritical+0x5c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d110      	bne.n	8006b06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b18 <vPortEnterCritical+0x60>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00b      	beq.n	8006b06 <vPortEnterCritical+0x4e>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	603b      	str	r3, [r7, #0]
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	e7fd      	b.n	8006b02 <vPortEnterCritical+0x4a>
	}
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20000010 	.word	0x20000010
 8006b18:	e000ed04 	.word	0xe000ed04

08006b1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b22:	4b12      	ldr	r3, [pc, #72]	@ (8006b6c <vPortExitCritical+0x50>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10b      	bne.n	8006b42 <vPortExitCritical+0x26>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	607b      	str	r3, [r7, #4]
}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	e7fd      	b.n	8006b3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b42:	4b0a      	ldr	r3, [pc, #40]	@ (8006b6c <vPortExitCritical+0x50>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	4a08      	ldr	r2, [pc, #32]	@ (8006b6c <vPortExitCritical+0x50>)
 8006b4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b4c:	4b07      	ldr	r3, [pc, #28]	@ (8006b6c <vPortExitCritical+0x50>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d105      	bne.n	8006b60 <vPortExitCritical+0x44>
 8006b54:	2300      	movs	r3, #0
 8006b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	f383 8811 	msr	BASEPRI, r3
}
 8006b5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	20000010 	.word	0x20000010

08006b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b70:	f3ef 8009 	mrs	r0, PSP
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	4b15      	ldr	r3, [pc, #84]	@ (8006bd0 <pxCurrentTCBConst>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	f01e 0f10 	tst.w	lr, #16
 8006b80:	bf08      	it	eq
 8006b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8a:	6010      	str	r0, [r2, #0]
 8006b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006b94:	f380 8811 	msr	BASEPRI, r0
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f7fe ffac 	bl	8005afc <vTaskSwitchContext>
 8006ba4:	f04f 0000 	mov.w	r0, #0
 8006ba8:	f380 8811 	msr	BASEPRI, r0
 8006bac:	bc09      	pop	{r0, r3}
 8006bae:	6819      	ldr	r1, [r3, #0]
 8006bb0:	6808      	ldr	r0, [r1, #0]
 8006bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb6:	f01e 0f10 	tst.w	lr, #16
 8006bba:	bf08      	it	eq
 8006bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006bc0:	f380 8809 	msr	PSP, r0
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	f3af 8000 	nop.w

08006bd0 <pxCurrentTCBConst>:
 8006bd0:	200009a0 	.word	0x200009a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop

08006bd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	607b      	str	r3, [r7, #4]
}
 8006bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bf2:	f7fe fec9 	bl	8005988 <xTaskIncrementTick>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bfc:	4b06      	ldr	r3, [pc, #24]	@ (8006c18 <xPortSysTickHandler+0x40>)
 8006bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	2300      	movs	r3, #0
 8006c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	f383 8811 	msr	BASEPRI, r3
}
 8006c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	e000ed04 	.word	0xe000ed04

08006c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c20:	4b0b      	ldr	r3, [pc, #44]	@ (8006c50 <vPortSetupTimerInterrupt+0x34>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c26:	4b0b      	ldr	r3, [pc, #44]	@ (8006c54 <vPortSetupTimerInterrupt+0x38>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c58 <vPortSetupTimerInterrupt+0x3c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a0a      	ldr	r2, [pc, #40]	@ (8006c5c <vPortSetupTimerInterrupt+0x40>)
 8006c32:	fba2 2303 	umull	r2, r3, r2, r3
 8006c36:	099b      	lsrs	r3, r3, #6
 8006c38:	4a09      	ldr	r2, [pc, #36]	@ (8006c60 <vPortSetupTimerInterrupt+0x44>)
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c3e:	4b04      	ldr	r3, [pc, #16]	@ (8006c50 <vPortSetupTimerInterrupt+0x34>)
 8006c40:	2207      	movs	r2, #7
 8006c42:	601a      	str	r2, [r3, #0]
}
 8006c44:	bf00      	nop
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	e000e010 	.word	0xe000e010
 8006c54:	e000e018 	.word	0xe000e018
 8006c58:	20000004 	.word	0x20000004
 8006c5c:	10624dd3 	.word	0x10624dd3
 8006c60:	e000e014 	.word	0xe000e014

08006c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006c74 <vPortEnableVFP+0x10>
 8006c68:	6801      	ldr	r1, [r0, #0]
 8006c6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006c6e:	6001      	str	r1, [r0, #0]
 8006c70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c72:	bf00      	nop
 8006c74:	e000ed88 	.word	0xe000ed88

08006c78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c7e:	f3ef 8305 	mrs	r3, IPSR
 8006c82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b0f      	cmp	r3, #15
 8006c88:	d915      	bls.n	8006cb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c8a:	4a18      	ldr	r2, [pc, #96]	@ (8006cec <vPortValidateInterruptPriority+0x74>)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c94:	4b16      	ldr	r3, [pc, #88]	@ (8006cf0 <vPortValidateInterruptPriority+0x78>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	7afa      	ldrb	r2, [r7, #11]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d20b      	bcs.n	8006cb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	607b      	str	r3, [r7, #4]
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	e7fd      	b.n	8006cb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf4 <vPortValidateInterruptPriority+0x7c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf8 <vPortValidateInterruptPriority+0x80>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d90b      	bls.n	8006cde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	603b      	str	r3, [r7, #0]
}
 8006cd8:	bf00      	nop
 8006cda:	bf00      	nop
 8006cdc:	e7fd      	b.n	8006cda <vPortValidateInterruptPriority+0x62>
	}
 8006cde:	bf00      	nop
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	e000e3f0 	.word	0xe000e3f0
 8006cf0:	20000fcc 	.word	0x20000fcc
 8006cf4:	e000ed0c 	.word	0xe000ed0c
 8006cf8:	20000fd0 	.word	0x20000fd0

08006cfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08a      	sub	sp, #40	@ 0x28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d08:	f7fe fd82 	bl	8005810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d0c:	4b5c      	ldr	r3, [pc, #368]	@ (8006e80 <pvPortMalloc+0x184>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d14:	f000 f924 	bl	8006f60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d18:	4b5a      	ldr	r3, [pc, #360]	@ (8006e84 <pvPortMalloc+0x188>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f040 8095 	bne.w	8006e50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01e      	beq.n	8006d6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4413      	add	r3, r2
 8006d32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d015      	beq.n	8006d6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f023 0307 	bic.w	r3, r3, #7
 8006d44:	3308      	adds	r3, #8
 8006d46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <pvPortMalloc+0x6e>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	617b      	str	r3, [r7, #20]
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	e7fd      	b.n	8006d66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d06f      	beq.n	8006e50 <pvPortMalloc+0x154>
 8006d70:	4b45      	ldr	r3, [pc, #276]	@ (8006e88 <pvPortMalloc+0x18c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d86a      	bhi.n	8006e50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d7a:	4b44      	ldr	r3, [pc, #272]	@ (8006e8c <pvPortMalloc+0x190>)
 8006d7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d7e:	4b43      	ldr	r3, [pc, #268]	@ (8006e8c <pvPortMalloc+0x190>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d84:	e004      	b.n	8006d90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d903      	bls.n	8006da2 <pvPortMalloc+0xa6>
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1f1      	bne.n	8006d86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006da2:	4b37      	ldr	r3, [pc, #220]	@ (8006e80 <pvPortMalloc+0x184>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d051      	beq.n	8006e50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2208      	movs	r2, #8
 8006db2:	4413      	add	r3, r2
 8006db4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	1ad2      	subs	r2, r2, r3
 8006dc6:	2308      	movs	r3, #8
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d920      	bls.n	8006e10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <pvPortMalloc+0xfc>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	613b      	str	r3, [r7, #16]
}
 8006df2:	bf00      	nop
 8006df4:	bf00      	nop
 8006df6:	e7fd      	b.n	8006df4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	1ad2      	subs	r2, r2, r3
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e0a:	69b8      	ldr	r0, [r7, #24]
 8006e0c:	f000 f90a 	bl	8007024 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e10:	4b1d      	ldr	r3, [pc, #116]	@ (8006e88 <pvPortMalloc+0x18c>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006e88 <pvPortMalloc+0x18c>)
 8006e1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006e88 <pvPortMalloc+0x18c>)
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4b1b      	ldr	r3, [pc, #108]	@ (8006e90 <pvPortMalloc+0x194>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d203      	bcs.n	8006e32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e2a:	4b17      	ldr	r3, [pc, #92]	@ (8006e88 <pvPortMalloc+0x18c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a18      	ldr	r2, [pc, #96]	@ (8006e90 <pvPortMalloc+0x194>)
 8006e30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	4b13      	ldr	r3, [pc, #76]	@ (8006e84 <pvPortMalloc+0x188>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e46:	4b13      	ldr	r3, [pc, #76]	@ (8006e94 <pvPortMalloc+0x198>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	4a11      	ldr	r2, [pc, #68]	@ (8006e94 <pvPortMalloc+0x198>)
 8006e4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e50:	f7fe fcec 	bl	800582c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <pvPortMalloc+0x17a>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	60fb      	str	r3, [r7, #12]
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	e7fd      	b.n	8006e72 <pvPortMalloc+0x176>
	return pvReturn;
 8006e76:	69fb      	ldr	r3, [r7, #28]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3728      	adds	r7, #40	@ 0x28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	20008fdc 	.word	0x20008fdc
 8006e84:	20008ff0 	.word	0x20008ff0
 8006e88:	20008fe0 	.word	0x20008fe0
 8006e8c:	20008fd4 	.word	0x20008fd4
 8006e90:	20008fe4 	.word	0x20008fe4
 8006e94:	20008fe8 	.word	0x20008fe8

08006e98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d04f      	beq.n	8006f4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006eaa:	2308      	movs	r3, #8
 8006eac:	425b      	negs	r3, r3
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	4b25      	ldr	r3, [pc, #148]	@ (8006f54 <vPortFree+0xbc>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10b      	bne.n	8006ede <vPortFree+0x46>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	60fb      	str	r3, [r7, #12]
}
 8006ed8:	bf00      	nop
 8006eda:	bf00      	nop
 8006edc:	e7fd      	b.n	8006eda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00b      	beq.n	8006efe <vPortFree+0x66>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	60bb      	str	r3, [r7, #8]
}
 8006ef8:	bf00      	nop
 8006efa:	bf00      	nop
 8006efc:	e7fd      	b.n	8006efa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	4b14      	ldr	r3, [pc, #80]	@ (8006f54 <vPortFree+0xbc>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4013      	ands	r3, r2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d01e      	beq.n	8006f4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d11a      	bne.n	8006f4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	4b0e      	ldr	r3, [pc, #56]	@ (8006f54 <vPortFree+0xbc>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	401a      	ands	r2, r3
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f24:	f7fe fc74 	bl	8005810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f58 <vPortFree+0xc0>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4413      	add	r3, r2
 8006f32:	4a09      	ldr	r2, [pc, #36]	@ (8006f58 <vPortFree+0xc0>)
 8006f34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f36:	6938      	ldr	r0, [r7, #16]
 8006f38:	f000 f874 	bl	8007024 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f3c:	4b07      	ldr	r3, [pc, #28]	@ (8006f5c <vPortFree+0xc4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3301      	adds	r3, #1
 8006f42:	4a06      	ldr	r2, [pc, #24]	@ (8006f5c <vPortFree+0xc4>)
 8006f44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f46:	f7fe fc71 	bl	800582c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f4a:	bf00      	nop
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20008ff0 	.word	0x20008ff0
 8006f58:	20008fe0 	.word	0x20008fe0
 8006f5c:	20008fec 	.word	0x20008fec

08006f60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f6c:	4b27      	ldr	r3, [pc, #156]	@ (800700c <prvHeapInit+0xac>)
 8006f6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00c      	beq.n	8006f94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3307      	adds	r3, #7
 8006f7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0307 	bic.w	r3, r3, #7
 8006f86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800700c <prvHeapInit+0xac>)
 8006f90:	4413      	add	r3, r2
 8006f92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f98:	4a1d      	ldr	r2, [pc, #116]	@ (8007010 <prvHeapInit+0xb0>)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8007010 <prvHeapInit+0xb0>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	4413      	add	r3, r2
 8006faa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fac:	2208      	movs	r2, #8
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0307 	bic.w	r3, r3, #7
 8006fba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4a15      	ldr	r2, [pc, #84]	@ (8007014 <prvHeapInit+0xb4>)
 8006fc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fc2:	4b14      	ldr	r3, [pc, #80]	@ (8007014 <prvHeapInit+0xb4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fca:	4b12      	ldr	r3, [pc, #72]	@ (8007014 <prvHeapInit+0xb4>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	1ad2      	subs	r2, r2, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8007014 <prvHeapInit+0xb4>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	4a0a      	ldr	r2, [pc, #40]	@ (8007018 <prvHeapInit+0xb8>)
 8006fee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	4a09      	ldr	r2, [pc, #36]	@ (800701c <prvHeapInit+0xbc>)
 8006ff6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ff8:	4b09      	ldr	r3, [pc, #36]	@ (8007020 <prvHeapInit+0xc0>)
 8006ffa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006ffe:	601a      	str	r2, [r3, #0]
}
 8007000:	bf00      	nop
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	20000fd4 	.word	0x20000fd4
 8007010:	20008fd4 	.word	0x20008fd4
 8007014:	20008fdc 	.word	0x20008fdc
 8007018:	20008fe4 	.word	0x20008fe4
 800701c:	20008fe0 	.word	0x20008fe0
 8007020:	20008ff0 	.word	0x20008ff0

08007024 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800702c:	4b28      	ldr	r3, [pc, #160]	@ (80070d0 <prvInsertBlockIntoFreeList+0xac>)
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e002      	b.n	8007038 <prvInsertBlockIntoFreeList+0x14>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	429a      	cmp	r2, r3
 8007040:	d8f7      	bhi.n	8007032 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4413      	add	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	429a      	cmp	r2, r3
 8007052:	d108      	bne.n	8007066 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	441a      	add	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	441a      	add	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d118      	bne.n	80070ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	4b15      	ldr	r3, [pc, #84]	@ (80070d4 <prvInsertBlockIntoFreeList+0xb0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d00d      	beq.n	80070a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	441a      	add	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	e008      	b.n	80070b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070a2:	4b0c      	ldr	r3, [pc, #48]	@ (80070d4 <prvInsertBlockIntoFreeList+0xb0>)
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	e003      	b.n	80070b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d002      	beq.n	80070c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070c2:	bf00      	nop
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	20008fd4 	.word	0x20008fd4
 80070d4:	20008fdc 	.word	0x20008fdc

080070d8 <atoi>:
 80070d8:	220a      	movs	r2, #10
 80070da:	2100      	movs	r1, #0
 80070dc:	f000 b87a 	b.w	80071d4 <strtol>

080070e0 <_strtol_l.isra.0>:
 80070e0:	2b24      	cmp	r3, #36	@ 0x24
 80070e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e6:	4686      	mov	lr, r0
 80070e8:	4690      	mov	r8, r2
 80070ea:	d801      	bhi.n	80070f0 <_strtol_l.isra.0+0x10>
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d106      	bne.n	80070fe <_strtol_l.isra.0+0x1e>
 80070f0:	f000 f8c4 	bl	800727c <__errno>
 80070f4:	2316      	movs	r3, #22
 80070f6:	6003      	str	r3, [r0, #0]
 80070f8:	2000      	movs	r0, #0
 80070fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fe:	4834      	ldr	r0, [pc, #208]	@ (80071d0 <_strtol_l.isra.0+0xf0>)
 8007100:	460d      	mov	r5, r1
 8007102:	462a      	mov	r2, r5
 8007104:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007108:	5d06      	ldrb	r6, [r0, r4]
 800710a:	f016 0608 	ands.w	r6, r6, #8
 800710e:	d1f8      	bne.n	8007102 <_strtol_l.isra.0+0x22>
 8007110:	2c2d      	cmp	r4, #45	@ 0x2d
 8007112:	d110      	bne.n	8007136 <_strtol_l.isra.0+0x56>
 8007114:	782c      	ldrb	r4, [r5, #0]
 8007116:	2601      	movs	r6, #1
 8007118:	1c95      	adds	r5, r2, #2
 800711a:	f033 0210 	bics.w	r2, r3, #16
 800711e:	d115      	bne.n	800714c <_strtol_l.isra.0+0x6c>
 8007120:	2c30      	cmp	r4, #48	@ 0x30
 8007122:	d10d      	bne.n	8007140 <_strtol_l.isra.0+0x60>
 8007124:	782a      	ldrb	r2, [r5, #0]
 8007126:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800712a:	2a58      	cmp	r2, #88	@ 0x58
 800712c:	d108      	bne.n	8007140 <_strtol_l.isra.0+0x60>
 800712e:	786c      	ldrb	r4, [r5, #1]
 8007130:	3502      	adds	r5, #2
 8007132:	2310      	movs	r3, #16
 8007134:	e00a      	b.n	800714c <_strtol_l.isra.0+0x6c>
 8007136:	2c2b      	cmp	r4, #43	@ 0x2b
 8007138:	bf04      	itt	eq
 800713a:	782c      	ldrbeq	r4, [r5, #0]
 800713c:	1c95      	addeq	r5, r2, #2
 800713e:	e7ec      	b.n	800711a <_strtol_l.isra.0+0x3a>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1f6      	bne.n	8007132 <_strtol_l.isra.0+0x52>
 8007144:	2c30      	cmp	r4, #48	@ 0x30
 8007146:	bf14      	ite	ne
 8007148:	230a      	movne	r3, #10
 800714a:	2308      	moveq	r3, #8
 800714c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007150:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007154:	2200      	movs	r2, #0
 8007156:	fbbc f9f3 	udiv	r9, ip, r3
 800715a:	4610      	mov	r0, r2
 800715c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007160:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007164:	2f09      	cmp	r7, #9
 8007166:	d80f      	bhi.n	8007188 <_strtol_l.isra.0+0xa8>
 8007168:	463c      	mov	r4, r7
 800716a:	42a3      	cmp	r3, r4
 800716c:	dd1b      	ble.n	80071a6 <_strtol_l.isra.0+0xc6>
 800716e:	1c57      	adds	r7, r2, #1
 8007170:	d007      	beq.n	8007182 <_strtol_l.isra.0+0xa2>
 8007172:	4581      	cmp	r9, r0
 8007174:	d314      	bcc.n	80071a0 <_strtol_l.isra.0+0xc0>
 8007176:	d101      	bne.n	800717c <_strtol_l.isra.0+0x9c>
 8007178:	45a2      	cmp	sl, r4
 800717a:	db11      	blt.n	80071a0 <_strtol_l.isra.0+0xc0>
 800717c:	fb00 4003 	mla	r0, r0, r3, r4
 8007180:	2201      	movs	r2, #1
 8007182:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007186:	e7eb      	b.n	8007160 <_strtol_l.isra.0+0x80>
 8007188:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800718c:	2f19      	cmp	r7, #25
 800718e:	d801      	bhi.n	8007194 <_strtol_l.isra.0+0xb4>
 8007190:	3c37      	subs	r4, #55	@ 0x37
 8007192:	e7ea      	b.n	800716a <_strtol_l.isra.0+0x8a>
 8007194:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007198:	2f19      	cmp	r7, #25
 800719a:	d804      	bhi.n	80071a6 <_strtol_l.isra.0+0xc6>
 800719c:	3c57      	subs	r4, #87	@ 0x57
 800719e:	e7e4      	b.n	800716a <_strtol_l.isra.0+0x8a>
 80071a0:	f04f 32ff 	mov.w	r2, #4294967295
 80071a4:	e7ed      	b.n	8007182 <_strtol_l.isra.0+0xa2>
 80071a6:	1c53      	adds	r3, r2, #1
 80071a8:	d108      	bne.n	80071bc <_strtol_l.isra.0+0xdc>
 80071aa:	2322      	movs	r3, #34	@ 0x22
 80071ac:	f8ce 3000 	str.w	r3, [lr]
 80071b0:	4660      	mov	r0, ip
 80071b2:	f1b8 0f00 	cmp.w	r8, #0
 80071b6:	d0a0      	beq.n	80070fa <_strtol_l.isra.0+0x1a>
 80071b8:	1e69      	subs	r1, r5, #1
 80071ba:	e006      	b.n	80071ca <_strtol_l.isra.0+0xea>
 80071bc:	b106      	cbz	r6, 80071c0 <_strtol_l.isra.0+0xe0>
 80071be:	4240      	negs	r0, r0
 80071c0:	f1b8 0f00 	cmp.w	r8, #0
 80071c4:	d099      	beq.n	80070fa <_strtol_l.isra.0+0x1a>
 80071c6:	2a00      	cmp	r2, #0
 80071c8:	d1f6      	bne.n	80071b8 <_strtol_l.isra.0+0xd8>
 80071ca:	f8c8 1000 	str.w	r1, [r8]
 80071ce:	e794      	b.n	80070fa <_strtol_l.isra.0+0x1a>
 80071d0:	08007d2d 	.word	0x08007d2d

080071d4 <strtol>:
 80071d4:	4613      	mov	r3, r2
 80071d6:	460a      	mov	r2, r1
 80071d8:	4601      	mov	r1, r0
 80071da:	4802      	ldr	r0, [pc, #8]	@ (80071e4 <strtol+0x10>)
 80071dc:	6800      	ldr	r0, [r0, #0]
 80071de:	f7ff bf7f 	b.w	80070e0 <_strtol_l.isra.0>
 80071e2:	bf00      	nop
 80071e4:	20000014 	.word	0x20000014

080071e8 <siprintf>:
 80071e8:	b40e      	push	{r1, r2, r3}
 80071ea:	b510      	push	{r4, lr}
 80071ec:	b09d      	sub	sp, #116	@ 0x74
 80071ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 80071f0:	9002      	str	r0, [sp, #8]
 80071f2:	9006      	str	r0, [sp, #24]
 80071f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071f8:	480a      	ldr	r0, [pc, #40]	@ (8007224 <siprintf+0x3c>)
 80071fa:	9107      	str	r1, [sp, #28]
 80071fc:	9104      	str	r1, [sp, #16]
 80071fe:	490a      	ldr	r1, [pc, #40]	@ (8007228 <siprintf+0x40>)
 8007200:	f853 2b04 	ldr.w	r2, [r3], #4
 8007204:	9105      	str	r1, [sp, #20]
 8007206:	2400      	movs	r4, #0
 8007208:	a902      	add	r1, sp, #8
 800720a:	6800      	ldr	r0, [r0, #0]
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007210:	f000 f9c2 	bl	8007598 <_svfiprintf_r>
 8007214:	9b02      	ldr	r3, [sp, #8]
 8007216:	701c      	strb	r4, [r3, #0]
 8007218:	b01d      	add	sp, #116	@ 0x74
 800721a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800721e:	b003      	add	sp, #12
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000014 	.word	0x20000014
 8007228:	ffff0208 	.word	0xffff0208

0800722c <memset>:
 800722c:	4402      	add	r2, r0
 800722e:	4603      	mov	r3, r0
 8007230:	4293      	cmp	r3, r2
 8007232:	d100      	bne.n	8007236 <memset+0xa>
 8007234:	4770      	bx	lr
 8007236:	f803 1b01 	strb.w	r1, [r3], #1
 800723a:	e7f9      	b.n	8007230 <memset+0x4>

0800723c <strchr>:
 800723c:	b2c9      	uxtb	r1, r1
 800723e:	4603      	mov	r3, r0
 8007240:	4618      	mov	r0, r3
 8007242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007246:	b112      	cbz	r2, 800724e <strchr+0x12>
 8007248:	428a      	cmp	r2, r1
 800724a:	d1f9      	bne.n	8007240 <strchr+0x4>
 800724c:	4770      	bx	lr
 800724e:	2900      	cmp	r1, #0
 8007250:	bf18      	it	ne
 8007252:	2000      	movne	r0, #0
 8007254:	4770      	bx	lr

08007256 <strncpy>:
 8007256:	b510      	push	{r4, lr}
 8007258:	3901      	subs	r1, #1
 800725a:	4603      	mov	r3, r0
 800725c:	b132      	cbz	r2, 800726c <strncpy+0x16>
 800725e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007262:	f803 4b01 	strb.w	r4, [r3], #1
 8007266:	3a01      	subs	r2, #1
 8007268:	2c00      	cmp	r4, #0
 800726a:	d1f7      	bne.n	800725c <strncpy+0x6>
 800726c:	441a      	add	r2, r3
 800726e:	2100      	movs	r1, #0
 8007270:	4293      	cmp	r3, r2
 8007272:	d100      	bne.n	8007276 <strncpy+0x20>
 8007274:	bd10      	pop	{r4, pc}
 8007276:	f803 1b01 	strb.w	r1, [r3], #1
 800727a:	e7f9      	b.n	8007270 <strncpy+0x1a>

0800727c <__errno>:
 800727c:	4b01      	ldr	r3, [pc, #4]	@ (8007284 <__errno+0x8>)
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20000014 	.word	0x20000014

08007288 <__libc_init_array>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	4d0d      	ldr	r5, [pc, #52]	@ (80072c0 <__libc_init_array+0x38>)
 800728c:	4c0d      	ldr	r4, [pc, #52]	@ (80072c4 <__libc_init_array+0x3c>)
 800728e:	1b64      	subs	r4, r4, r5
 8007290:	10a4      	asrs	r4, r4, #2
 8007292:	2600      	movs	r6, #0
 8007294:	42a6      	cmp	r6, r4
 8007296:	d109      	bne.n	80072ac <__libc_init_array+0x24>
 8007298:	4d0b      	ldr	r5, [pc, #44]	@ (80072c8 <__libc_init_array+0x40>)
 800729a:	4c0c      	ldr	r4, [pc, #48]	@ (80072cc <__libc_init_array+0x44>)
 800729c:	f000 fc64 	bl	8007b68 <_init>
 80072a0:	1b64      	subs	r4, r4, r5
 80072a2:	10a4      	asrs	r4, r4, #2
 80072a4:	2600      	movs	r6, #0
 80072a6:	42a6      	cmp	r6, r4
 80072a8:	d105      	bne.n	80072b6 <__libc_init_array+0x2e>
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b0:	4798      	blx	r3
 80072b2:	3601      	adds	r6, #1
 80072b4:	e7ee      	b.n	8007294 <__libc_init_array+0xc>
 80072b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ba:	4798      	blx	r3
 80072bc:	3601      	adds	r6, #1
 80072be:	e7f2      	b.n	80072a6 <__libc_init_array+0x1e>
 80072c0:	08007e68 	.word	0x08007e68
 80072c4:	08007e68 	.word	0x08007e68
 80072c8:	08007e68 	.word	0x08007e68
 80072cc:	08007e6c 	.word	0x08007e6c

080072d0 <__retarget_lock_acquire_recursive>:
 80072d0:	4770      	bx	lr

080072d2 <__retarget_lock_release_recursive>:
 80072d2:	4770      	bx	lr

080072d4 <memcpy>:
 80072d4:	440a      	add	r2, r1
 80072d6:	4291      	cmp	r1, r2
 80072d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072dc:	d100      	bne.n	80072e0 <memcpy+0xc>
 80072de:	4770      	bx	lr
 80072e0:	b510      	push	{r4, lr}
 80072e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ea:	4291      	cmp	r1, r2
 80072ec:	d1f9      	bne.n	80072e2 <memcpy+0xe>
 80072ee:	bd10      	pop	{r4, pc}

080072f0 <_free_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4605      	mov	r5, r0
 80072f4:	2900      	cmp	r1, #0
 80072f6:	d041      	beq.n	800737c <_free_r+0x8c>
 80072f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072fc:	1f0c      	subs	r4, r1, #4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bfb8      	it	lt
 8007302:	18e4      	addlt	r4, r4, r3
 8007304:	f000 f8e0 	bl	80074c8 <__malloc_lock>
 8007308:	4a1d      	ldr	r2, [pc, #116]	@ (8007380 <_free_r+0x90>)
 800730a:	6813      	ldr	r3, [r2, #0]
 800730c:	b933      	cbnz	r3, 800731c <_free_r+0x2c>
 800730e:	6063      	str	r3, [r4, #4]
 8007310:	6014      	str	r4, [r2, #0]
 8007312:	4628      	mov	r0, r5
 8007314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007318:	f000 b8dc 	b.w	80074d4 <__malloc_unlock>
 800731c:	42a3      	cmp	r3, r4
 800731e:	d908      	bls.n	8007332 <_free_r+0x42>
 8007320:	6820      	ldr	r0, [r4, #0]
 8007322:	1821      	adds	r1, r4, r0
 8007324:	428b      	cmp	r3, r1
 8007326:	bf01      	itttt	eq
 8007328:	6819      	ldreq	r1, [r3, #0]
 800732a:	685b      	ldreq	r3, [r3, #4]
 800732c:	1809      	addeq	r1, r1, r0
 800732e:	6021      	streq	r1, [r4, #0]
 8007330:	e7ed      	b.n	800730e <_free_r+0x1e>
 8007332:	461a      	mov	r2, r3
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	b10b      	cbz	r3, 800733c <_free_r+0x4c>
 8007338:	42a3      	cmp	r3, r4
 800733a:	d9fa      	bls.n	8007332 <_free_r+0x42>
 800733c:	6811      	ldr	r1, [r2, #0]
 800733e:	1850      	adds	r0, r2, r1
 8007340:	42a0      	cmp	r0, r4
 8007342:	d10b      	bne.n	800735c <_free_r+0x6c>
 8007344:	6820      	ldr	r0, [r4, #0]
 8007346:	4401      	add	r1, r0
 8007348:	1850      	adds	r0, r2, r1
 800734a:	4283      	cmp	r3, r0
 800734c:	6011      	str	r1, [r2, #0]
 800734e:	d1e0      	bne.n	8007312 <_free_r+0x22>
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	6053      	str	r3, [r2, #4]
 8007356:	4408      	add	r0, r1
 8007358:	6010      	str	r0, [r2, #0]
 800735a:	e7da      	b.n	8007312 <_free_r+0x22>
 800735c:	d902      	bls.n	8007364 <_free_r+0x74>
 800735e:	230c      	movs	r3, #12
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	e7d6      	b.n	8007312 <_free_r+0x22>
 8007364:	6820      	ldr	r0, [r4, #0]
 8007366:	1821      	adds	r1, r4, r0
 8007368:	428b      	cmp	r3, r1
 800736a:	bf04      	itt	eq
 800736c:	6819      	ldreq	r1, [r3, #0]
 800736e:	685b      	ldreq	r3, [r3, #4]
 8007370:	6063      	str	r3, [r4, #4]
 8007372:	bf04      	itt	eq
 8007374:	1809      	addeq	r1, r1, r0
 8007376:	6021      	streq	r1, [r4, #0]
 8007378:	6054      	str	r4, [r2, #4]
 800737a:	e7ca      	b.n	8007312 <_free_r+0x22>
 800737c:	bd38      	pop	{r3, r4, r5, pc}
 800737e:	bf00      	nop
 8007380:	20009138 	.word	0x20009138

08007384 <sbrk_aligned>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	4e0f      	ldr	r6, [pc, #60]	@ (80073c4 <sbrk_aligned+0x40>)
 8007388:	460c      	mov	r4, r1
 800738a:	6831      	ldr	r1, [r6, #0]
 800738c:	4605      	mov	r5, r0
 800738e:	b911      	cbnz	r1, 8007396 <sbrk_aligned+0x12>
 8007390:	f000 fba4 	bl	8007adc <_sbrk_r>
 8007394:	6030      	str	r0, [r6, #0]
 8007396:	4621      	mov	r1, r4
 8007398:	4628      	mov	r0, r5
 800739a:	f000 fb9f 	bl	8007adc <_sbrk_r>
 800739e:	1c43      	adds	r3, r0, #1
 80073a0:	d103      	bne.n	80073aa <sbrk_aligned+0x26>
 80073a2:	f04f 34ff 	mov.w	r4, #4294967295
 80073a6:	4620      	mov	r0, r4
 80073a8:	bd70      	pop	{r4, r5, r6, pc}
 80073aa:	1cc4      	adds	r4, r0, #3
 80073ac:	f024 0403 	bic.w	r4, r4, #3
 80073b0:	42a0      	cmp	r0, r4
 80073b2:	d0f8      	beq.n	80073a6 <sbrk_aligned+0x22>
 80073b4:	1a21      	subs	r1, r4, r0
 80073b6:	4628      	mov	r0, r5
 80073b8:	f000 fb90 	bl	8007adc <_sbrk_r>
 80073bc:	3001      	adds	r0, #1
 80073be:	d1f2      	bne.n	80073a6 <sbrk_aligned+0x22>
 80073c0:	e7ef      	b.n	80073a2 <sbrk_aligned+0x1e>
 80073c2:	bf00      	nop
 80073c4:	20009134 	.word	0x20009134

080073c8 <_malloc_r>:
 80073c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073cc:	1ccd      	adds	r5, r1, #3
 80073ce:	f025 0503 	bic.w	r5, r5, #3
 80073d2:	3508      	adds	r5, #8
 80073d4:	2d0c      	cmp	r5, #12
 80073d6:	bf38      	it	cc
 80073d8:	250c      	movcc	r5, #12
 80073da:	2d00      	cmp	r5, #0
 80073dc:	4606      	mov	r6, r0
 80073de:	db01      	blt.n	80073e4 <_malloc_r+0x1c>
 80073e0:	42a9      	cmp	r1, r5
 80073e2:	d904      	bls.n	80073ee <_malloc_r+0x26>
 80073e4:	230c      	movs	r3, #12
 80073e6:	6033      	str	r3, [r6, #0]
 80073e8:	2000      	movs	r0, #0
 80073ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074c4 <_malloc_r+0xfc>
 80073f2:	f000 f869 	bl	80074c8 <__malloc_lock>
 80073f6:	f8d8 3000 	ldr.w	r3, [r8]
 80073fa:	461c      	mov	r4, r3
 80073fc:	bb44      	cbnz	r4, 8007450 <_malloc_r+0x88>
 80073fe:	4629      	mov	r1, r5
 8007400:	4630      	mov	r0, r6
 8007402:	f7ff ffbf 	bl	8007384 <sbrk_aligned>
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	4604      	mov	r4, r0
 800740a:	d158      	bne.n	80074be <_malloc_r+0xf6>
 800740c:	f8d8 4000 	ldr.w	r4, [r8]
 8007410:	4627      	mov	r7, r4
 8007412:	2f00      	cmp	r7, #0
 8007414:	d143      	bne.n	800749e <_malloc_r+0xd6>
 8007416:	2c00      	cmp	r4, #0
 8007418:	d04b      	beq.n	80074b2 <_malloc_r+0xea>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	4639      	mov	r1, r7
 800741e:	4630      	mov	r0, r6
 8007420:	eb04 0903 	add.w	r9, r4, r3
 8007424:	f000 fb5a 	bl	8007adc <_sbrk_r>
 8007428:	4581      	cmp	r9, r0
 800742a:	d142      	bne.n	80074b2 <_malloc_r+0xea>
 800742c:	6821      	ldr	r1, [r4, #0]
 800742e:	1a6d      	subs	r5, r5, r1
 8007430:	4629      	mov	r1, r5
 8007432:	4630      	mov	r0, r6
 8007434:	f7ff ffa6 	bl	8007384 <sbrk_aligned>
 8007438:	3001      	adds	r0, #1
 800743a:	d03a      	beq.n	80074b2 <_malloc_r+0xea>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	442b      	add	r3, r5
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	f8d8 3000 	ldr.w	r3, [r8]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	bb62      	cbnz	r2, 80074a4 <_malloc_r+0xdc>
 800744a:	f8c8 7000 	str.w	r7, [r8]
 800744e:	e00f      	b.n	8007470 <_malloc_r+0xa8>
 8007450:	6822      	ldr	r2, [r4, #0]
 8007452:	1b52      	subs	r2, r2, r5
 8007454:	d420      	bmi.n	8007498 <_malloc_r+0xd0>
 8007456:	2a0b      	cmp	r2, #11
 8007458:	d917      	bls.n	800748a <_malloc_r+0xc2>
 800745a:	1961      	adds	r1, r4, r5
 800745c:	42a3      	cmp	r3, r4
 800745e:	6025      	str	r5, [r4, #0]
 8007460:	bf18      	it	ne
 8007462:	6059      	strne	r1, [r3, #4]
 8007464:	6863      	ldr	r3, [r4, #4]
 8007466:	bf08      	it	eq
 8007468:	f8c8 1000 	streq.w	r1, [r8]
 800746c:	5162      	str	r2, [r4, r5]
 800746e:	604b      	str	r3, [r1, #4]
 8007470:	4630      	mov	r0, r6
 8007472:	f000 f82f 	bl	80074d4 <__malloc_unlock>
 8007476:	f104 000b 	add.w	r0, r4, #11
 800747a:	1d23      	adds	r3, r4, #4
 800747c:	f020 0007 	bic.w	r0, r0, #7
 8007480:	1ac2      	subs	r2, r0, r3
 8007482:	bf1c      	itt	ne
 8007484:	1a1b      	subne	r3, r3, r0
 8007486:	50a3      	strne	r3, [r4, r2]
 8007488:	e7af      	b.n	80073ea <_malloc_r+0x22>
 800748a:	6862      	ldr	r2, [r4, #4]
 800748c:	42a3      	cmp	r3, r4
 800748e:	bf0c      	ite	eq
 8007490:	f8c8 2000 	streq.w	r2, [r8]
 8007494:	605a      	strne	r2, [r3, #4]
 8007496:	e7eb      	b.n	8007470 <_malloc_r+0xa8>
 8007498:	4623      	mov	r3, r4
 800749a:	6864      	ldr	r4, [r4, #4]
 800749c:	e7ae      	b.n	80073fc <_malloc_r+0x34>
 800749e:	463c      	mov	r4, r7
 80074a0:	687f      	ldr	r7, [r7, #4]
 80074a2:	e7b6      	b.n	8007412 <_malloc_r+0x4a>
 80074a4:	461a      	mov	r2, r3
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	42a3      	cmp	r3, r4
 80074aa:	d1fb      	bne.n	80074a4 <_malloc_r+0xdc>
 80074ac:	2300      	movs	r3, #0
 80074ae:	6053      	str	r3, [r2, #4]
 80074b0:	e7de      	b.n	8007470 <_malloc_r+0xa8>
 80074b2:	230c      	movs	r3, #12
 80074b4:	6033      	str	r3, [r6, #0]
 80074b6:	4630      	mov	r0, r6
 80074b8:	f000 f80c 	bl	80074d4 <__malloc_unlock>
 80074bc:	e794      	b.n	80073e8 <_malloc_r+0x20>
 80074be:	6005      	str	r5, [r0, #0]
 80074c0:	e7d6      	b.n	8007470 <_malloc_r+0xa8>
 80074c2:	bf00      	nop
 80074c4:	20009138 	.word	0x20009138

080074c8 <__malloc_lock>:
 80074c8:	4801      	ldr	r0, [pc, #4]	@ (80074d0 <__malloc_lock+0x8>)
 80074ca:	f7ff bf01 	b.w	80072d0 <__retarget_lock_acquire_recursive>
 80074ce:	bf00      	nop
 80074d0:	20009130 	.word	0x20009130

080074d4 <__malloc_unlock>:
 80074d4:	4801      	ldr	r0, [pc, #4]	@ (80074dc <__malloc_unlock+0x8>)
 80074d6:	f7ff befc 	b.w	80072d2 <__retarget_lock_release_recursive>
 80074da:	bf00      	nop
 80074dc:	20009130 	.word	0x20009130

080074e0 <__ssputs_r>:
 80074e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e4:	688e      	ldr	r6, [r1, #8]
 80074e6:	461f      	mov	r7, r3
 80074e8:	42be      	cmp	r6, r7
 80074ea:	680b      	ldr	r3, [r1, #0]
 80074ec:	4682      	mov	sl, r0
 80074ee:	460c      	mov	r4, r1
 80074f0:	4690      	mov	r8, r2
 80074f2:	d82d      	bhi.n	8007550 <__ssputs_r+0x70>
 80074f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074fc:	d026      	beq.n	800754c <__ssputs_r+0x6c>
 80074fe:	6965      	ldr	r5, [r4, #20]
 8007500:	6909      	ldr	r1, [r1, #16]
 8007502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007506:	eba3 0901 	sub.w	r9, r3, r1
 800750a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800750e:	1c7b      	adds	r3, r7, #1
 8007510:	444b      	add	r3, r9
 8007512:	106d      	asrs	r5, r5, #1
 8007514:	429d      	cmp	r5, r3
 8007516:	bf38      	it	cc
 8007518:	461d      	movcc	r5, r3
 800751a:	0553      	lsls	r3, r2, #21
 800751c:	d527      	bpl.n	800756e <__ssputs_r+0x8e>
 800751e:	4629      	mov	r1, r5
 8007520:	f7ff ff52 	bl	80073c8 <_malloc_r>
 8007524:	4606      	mov	r6, r0
 8007526:	b360      	cbz	r0, 8007582 <__ssputs_r+0xa2>
 8007528:	6921      	ldr	r1, [r4, #16]
 800752a:	464a      	mov	r2, r9
 800752c:	f7ff fed2 	bl	80072d4 <memcpy>
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800753a:	81a3      	strh	r3, [r4, #12]
 800753c:	6126      	str	r6, [r4, #16]
 800753e:	6165      	str	r5, [r4, #20]
 8007540:	444e      	add	r6, r9
 8007542:	eba5 0509 	sub.w	r5, r5, r9
 8007546:	6026      	str	r6, [r4, #0]
 8007548:	60a5      	str	r5, [r4, #8]
 800754a:	463e      	mov	r6, r7
 800754c:	42be      	cmp	r6, r7
 800754e:	d900      	bls.n	8007552 <__ssputs_r+0x72>
 8007550:	463e      	mov	r6, r7
 8007552:	6820      	ldr	r0, [r4, #0]
 8007554:	4632      	mov	r2, r6
 8007556:	4641      	mov	r1, r8
 8007558:	f000 faa6 	bl	8007aa8 <memmove>
 800755c:	68a3      	ldr	r3, [r4, #8]
 800755e:	1b9b      	subs	r3, r3, r6
 8007560:	60a3      	str	r3, [r4, #8]
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	4433      	add	r3, r6
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	2000      	movs	r0, #0
 800756a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756e:	462a      	mov	r2, r5
 8007570:	f000 fac4 	bl	8007afc <_realloc_r>
 8007574:	4606      	mov	r6, r0
 8007576:	2800      	cmp	r0, #0
 8007578:	d1e0      	bne.n	800753c <__ssputs_r+0x5c>
 800757a:	6921      	ldr	r1, [r4, #16]
 800757c:	4650      	mov	r0, sl
 800757e:	f7ff feb7 	bl	80072f0 <_free_r>
 8007582:	230c      	movs	r3, #12
 8007584:	f8ca 3000 	str.w	r3, [sl]
 8007588:	89a3      	ldrh	r3, [r4, #12]
 800758a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	f04f 30ff 	mov.w	r0, #4294967295
 8007594:	e7e9      	b.n	800756a <__ssputs_r+0x8a>
	...

08007598 <_svfiprintf_r>:
 8007598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759c:	4698      	mov	r8, r3
 800759e:	898b      	ldrh	r3, [r1, #12]
 80075a0:	061b      	lsls	r3, r3, #24
 80075a2:	b09d      	sub	sp, #116	@ 0x74
 80075a4:	4607      	mov	r7, r0
 80075a6:	460d      	mov	r5, r1
 80075a8:	4614      	mov	r4, r2
 80075aa:	d510      	bpl.n	80075ce <_svfiprintf_r+0x36>
 80075ac:	690b      	ldr	r3, [r1, #16]
 80075ae:	b973      	cbnz	r3, 80075ce <_svfiprintf_r+0x36>
 80075b0:	2140      	movs	r1, #64	@ 0x40
 80075b2:	f7ff ff09 	bl	80073c8 <_malloc_r>
 80075b6:	6028      	str	r0, [r5, #0]
 80075b8:	6128      	str	r0, [r5, #16]
 80075ba:	b930      	cbnz	r0, 80075ca <_svfiprintf_r+0x32>
 80075bc:	230c      	movs	r3, #12
 80075be:	603b      	str	r3, [r7, #0]
 80075c0:	f04f 30ff 	mov.w	r0, #4294967295
 80075c4:	b01d      	add	sp, #116	@ 0x74
 80075c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ca:	2340      	movs	r3, #64	@ 0x40
 80075cc:	616b      	str	r3, [r5, #20]
 80075ce:	2300      	movs	r3, #0
 80075d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80075d2:	2320      	movs	r3, #32
 80075d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075dc:	2330      	movs	r3, #48	@ 0x30
 80075de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800777c <_svfiprintf_r+0x1e4>
 80075e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075e6:	f04f 0901 	mov.w	r9, #1
 80075ea:	4623      	mov	r3, r4
 80075ec:	469a      	mov	sl, r3
 80075ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075f2:	b10a      	cbz	r2, 80075f8 <_svfiprintf_r+0x60>
 80075f4:	2a25      	cmp	r2, #37	@ 0x25
 80075f6:	d1f9      	bne.n	80075ec <_svfiprintf_r+0x54>
 80075f8:	ebba 0b04 	subs.w	fp, sl, r4
 80075fc:	d00b      	beq.n	8007616 <_svfiprintf_r+0x7e>
 80075fe:	465b      	mov	r3, fp
 8007600:	4622      	mov	r2, r4
 8007602:	4629      	mov	r1, r5
 8007604:	4638      	mov	r0, r7
 8007606:	f7ff ff6b 	bl	80074e0 <__ssputs_r>
 800760a:	3001      	adds	r0, #1
 800760c:	f000 80a7 	beq.w	800775e <_svfiprintf_r+0x1c6>
 8007610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007612:	445a      	add	r2, fp
 8007614:	9209      	str	r2, [sp, #36]	@ 0x24
 8007616:	f89a 3000 	ldrb.w	r3, [sl]
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 809f 	beq.w	800775e <_svfiprintf_r+0x1c6>
 8007620:	2300      	movs	r3, #0
 8007622:	f04f 32ff 	mov.w	r2, #4294967295
 8007626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800762a:	f10a 0a01 	add.w	sl, sl, #1
 800762e:	9304      	str	r3, [sp, #16]
 8007630:	9307      	str	r3, [sp, #28]
 8007632:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007636:	931a      	str	r3, [sp, #104]	@ 0x68
 8007638:	4654      	mov	r4, sl
 800763a:	2205      	movs	r2, #5
 800763c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007640:	484e      	ldr	r0, [pc, #312]	@ (800777c <_svfiprintf_r+0x1e4>)
 8007642:	f7f8 fddd 	bl	8000200 <memchr>
 8007646:	9a04      	ldr	r2, [sp, #16]
 8007648:	b9d8      	cbnz	r0, 8007682 <_svfiprintf_r+0xea>
 800764a:	06d0      	lsls	r0, r2, #27
 800764c:	bf44      	itt	mi
 800764e:	2320      	movmi	r3, #32
 8007650:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007654:	0711      	lsls	r1, r2, #28
 8007656:	bf44      	itt	mi
 8007658:	232b      	movmi	r3, #43	@ 0x2b
 800765a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800765e:	f89a 3000 	ldrb.w	r3, [sl]
 8007662:	2b2a      	cmp	r3, #42	@ 0x2a
 8007664:	d015      	beq.n	8007692 <_svfiprintf_r+0xfa>
 8007666:	9a07      	ldr	r2, [sp, #28]
 8007668:	4654      	mov	r4, sl
 800766a:	2000      	movs	r0, #0
 800766c:	f04f 0c0a 	mov.w	ip, #10
 8007670:	4621      	mov	r1, r4
 8007672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007676:	3b30      	subs	r3, #48	@ 0x30
 8007678:	2b09      	cmp	r3, #9
 800767a:	d94b      	bls.n	8007714 <_svfiprintf_r+0x17c>
 800767c:	b1b0      	cbz	r0, 80076ac <_svfiprintf_r+0x114>
 800767e:	9207      	str	r2, [sp, #28]
 8007680:	e014      	b.n	80076ac <_svfiprintf_r+0x114>
 8007682:	eba0 0308 	sub.w	r3, r0, r8
 8007686:	fa09 f303 	lsl.w	r3, r9, r3
 800768a:	4313      	orrs	r3, r2
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	46a2      	mov	sl, r4
 8007690:	e7d2      	b.n	8007638 <_svfiprintf_r+0xa0>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	1d19      	adds	r1, r3, #4
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	9103      	str	r1, [sp, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	bfbb      	ittet	lt
 800769e:	425b      	neglt	r3, r3
 80076a0:	f042 0202 	orrlt.w	r2, r2, #2
 80076a4:	9307      	strge	r3, [sp, #28]
 80076a6:	9307      	strlt	r3, [sp, #28]
 80076a8:	bfb8      	it	lt
 80076aa:	9204      	strlt	r2, [sp, #16]
 80076ac:	7823      	ldrb	r3, [r4, #0]
 80076ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80076b0:	d10a      	bne.n	80076c8 <_svfiprintf_r+0x130>
 80076b2:	7863      	ldrb	r3, [r4, #1]
 80076b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80076b6:	d132      	bne.n	800771e <_svfiprintf_r+0x186>
 80076b8:	9b03      	ldr	r3, [sp, #12]
 80076ba:	1d1a      	adds	r2, r3, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	9203      	str	r2, [sp, #12]
 80076c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076c4:	3402      	adds	r4, #2
 80076c6:	9305      	str	r3, [sp, #20]
 80076c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800778c <_svfiprintf_r+0x1f4>
 80076cc:	7821      	ldrb	r1, [r4, #0]
 80076ce:	2203      	movs	r2, #3
 80076d0:	4650      	mov	r0, sl
 80076d2:	f7f8 fd95 	bl	8000200 <memchr>
 80076d6:	b138      	cbz	r0, 80076e8 <_svfiprintf_r+0x150>
 80076d8:	9b04      	ldr	r3, [sp, #16]
 80076da:	eba0 000a 	sub.w	r0, r0, sl
 80076de:	2240      	movs	r2, #64	@ 0x40
 80076e0:	4082      	lsls	r2, r0
 80076e2:	4313      	orrs	r3, r2
 80076e4:	3401      	adds	r4, #1
 80076e6:	9304      	str	r3, [sp, #16]
 80076e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ec:	4824      	ldr	r0, [pc, #144]	@ (8007780 <_svfiprintf_r+0x1e8>)
 80076ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076f2:	2206      	movs	r2, #6
 80076f4:	f7f8 fd84 	bl	8000200 <memchr>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d036      	beq.n	800776a <_svfiprintf_r+0x1d2>
 80076fc:	4b21      	ldr	r3, [pc, #132]	@ (8007784 <_svfiprintf_r+0x1ec>)
 80076fe:	bb1b      	cbnz	r3, 8007748 <_svfiprintf_r+0x1b0>
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	3307      	adds	r3, #7
 8007704:	f023 0307 	bic.w	r3, r3, #7
 8007708:	3308      	adds	r3, #8
 800770a:	9303      	str	r3, [sp, #12]
 800770c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800770e:	4433      	add	r3, r6
 8007710:	9309      	str	r3, [sp, #36]	@ 0x24
 8007712:	e76a      	b.n	80075ea <_svfiprintf_r+0x52>
 8007714:	fb0c 3202 	mla	r2, ip, r2, r3
 8007718:	460c      	mov	r4, r1
 800771a:	2001      	movs	r0, #1
 800771c:	e7a8      	b.n	8007670 <_svfiprintf_r+0xd8>
 800771e:	2300      	movs	r3, #0
 8007720:	3401      	adds	r4, #1
 8007722:	9305      	str	r3, [sp, #20]
 8007724:	4619      	mov	r1, r3
 8007726:	f04f 0c0a 	mov.w	ip, #10
 800772a:	4620      	mov	r0, r4
 800772c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007730:	3a30      	subs	r2, #48	@ 0x30
 8007732:	2a09      	cmp	r2, #9
 8007734:	d903      	bls.n	800773e <_svfiprintf_r+0x1a6>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0c6      	beq.n	80076c8 <_svfiprintf_r+0x130>
 800773a:	9105      	str	r1, [sp, #20]
 800773c:	e7c4      	b.n	80076c8 <_svfiprintf_r+0x130>
 800773e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007742:	4604      	mov	r4, r0
 8007744:	2301      	movs	r3, #1
 8007746:	e7f0      	b.n	800772a <_svfiprintf_r+0x192>
 8007748:	ab03      	add	r3, sp, #12
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	462a      	mov	r2, r5
 800774e:	4b0e      	ldr	r3, [pc, #56]	@ (8007788 <_svfiprintf_r+0x1f0>)
 8007750:	a904      	add	r1, sp, #16
 8007752:	4638      	mov	r0, r7
 8007754:	f3af 8000 	nop.w
 8007758:	1c42      	adds	r2, r0, #1
 800775a:	4606      	mov	r6, r0
 800775c:	d1d6      	bne.n	800770c <_svfiprintf_r+0x174>
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	065b      	lsls	r3, r3, #25
 8007762:	f53f af2d 	bmi.w	80075c0 <_svfiprintf_r+0x28>
 8007766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007768:	e72c      	b.n	80075c4 <_svfiprintf_r+0x2c>
 800776a:	ab03      	add	r3, sp, #12
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	462a      	mov	r2, r5
 8007770:	4b05      	ldr	r3, [pc, #20]	@ (8007788 <_svfiprintf_r+0x1f0>)
 8007772:	a904      	add	r1, sp, #16
 8007774:	4638      	mov	r0, r7
 8007776:	f000 f879 	bl	800786c <_printf_i>
 800777a:	e7ed      	b.n	8007758 <_svfiprintf_r+0x1c0>
 800777c:	08007e2d 	.word	0x08007e2d
 8007780:	08007e37 	.word	0x08007e37
 8007784:	00000000 	.word	0x00000000
 8007788:	080074e1 	.word	0x080074e1
 800778c:	08007e33 	.word	0x08007e33

08007790 <_printf_common>:
 8007790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	4616      	mov	r6, r2
 8007796:	4698      	mov	r8, r3
 8007798:	688a      	ldr	r2, [r1, #8]
 800779a:	690b      	ldr	r3, [r1, #16]
 800779c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077a0:	4293      	cmp	r3, r2
 80077a2:	bfb8      	it	lt
 80077a4:	4613      	movlt	r3, r2
 80077a6:	6033      	str	r3, [r6, #0]
 80077a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077ac:	4607      	mov	r7, r0
 80077ae:	460c      	mov	r4, r1
 80077b0:	b10a      	cbz	r2, 80077b6 <_printf_common+0x26>
 80077b2:	3301      	adds	r3, #1
 80077b4:	6033      	str	r3, [r6, #0]
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	0699      	lsls	r1, r3, #26
 80077ba:	bf42      	ittt	mi
 80077bc:	6833      	ldrmi	r3, [r6, #0]
 80077be:	3302      	addmi	r3, #2
 80077c0:	6033      	strmi	r3, [r6, #0]
 80077c2:	6825      	ldr	r5, [r4, #0]
 80077c4:	f015 0506 	ands.w	r5, r5, #6
 80077c8:	d106      	bne.n	80077d8 <_printf_common+0x48>
 80077ca:	f104 0a19 	add.w	sl, r4, #25
 80077ce:	68e3      	ldr	r3, [r4, #12]
 80077d0:	6832      	ldr	r2, [r6, #0]
 80077d2:	1a9b      	subs	r3, r3, r2
 80077d4:	42ab      	cmp	r3, r5
 80077d6:	dc26      	bgt.n	8007826 <_printf_common+0x96>
 80077d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077dc:	6822      	ldr	r2, [r4, #0]
 80077de:	3b00      	subs	r3, #0
 80077e0:	bf18      	it	ne
 80077e2:	2301      	movne	r3, #1
 80077e4:	0692      	lsls	r2, r2, #26
 80077e6:	d42b      	bmi.n	8007840 <_printf_common+0xb0>
 80077e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077ec:	4641      	mov	r1, r8
 80077ee:	4638      	mov	r0, r7
 80077f0:	47c8      	blx	r9
 80077f2:	3001      	adds	r0, #1
 80077f4:	d01e      	beq.n	8007834 <_printf_common+0xa4>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	6922      	ldr	r2, [r4, #16]
 80077fa:	f003 0306 	and.w	r3, r3, #6
 80077fe:	2b04      	cmp	r3, #4
 8007800:	bf02      	ittt	eq
 8007802:	68e5      	ldreq	r5, [r4, #12]
 8007804:	6833      	ldreq	r3, [r6, #0]
 8007806:	1aed      	subeq	r5, r5, r3
 8007808:	68a3      	ldr	r3, [r4, #8]
 800780a:	bf0c      	ite	eq
 800780c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007810:	2500      	movne	r5, #0
 8007812:	4293      	cmp	r3, r2
 8007814:	bfc4      	itt	gt
 8007816:	1a9b      	subgt	r3, r3, r2
 8007818:	18ed      	addgt	r5, r5, r3
 800781a:	2600      	movs	r6, #0
 800781c:	341a      	adds	r4, #26
 800781e:	42b5      	cmp	r5, r6
 8007820:	d11a      	bne.n	8007858 <_printf_common+0xc8>
 8007822:	2000      	movs	r0, #0
 8007824:	e008      	b.n	8007838 <_printf_common+0xa8>
 8007826:	2301      	movs	r3, #1
 8007828:	4652      	mov	r2, sl
 800782a:	4641      	mov	r1, r8
 800782c:	4638      	mov	r0, r7
 800782e:	47c8      	blx	r9
 8007830:	3001      	adds	r0, #1
 8007832:	d103      	bne.n	800783c <_printf_common+0xac>
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783c:	3501      	adds	r5, #1
 800783e:	e7c6      	b.n	80077ce <_printf_common+0x3e>
 8007840:	18e1      	adds	r1, r4, r3
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	2030      	movs	r0, #48	@ 0x30
 8007846:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800784a:	4422      	add	r2, r4
 800784c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007854:	3302      	adds	r3, #2
 8007856:	e7c7      	b.n	80077e8 <_printf_common+0x58>
 8007858:	2301      	movs	r3, #1
 800785a:	4622      	mov	r2, r4
 800785c:	4641      	mov	r1, r8
 800785e:	4638      	mov	r0, r7
 8007860:	47c8      	blx	r9
 8007862:	3001      	adds	r0, #1
 8007864:	d0e6      	beq.n	8007834 <_printf_common+0xa4>
 8007866:	3601      	adds	r6, #1
 8007868:	e7d9      	b.n	800781e <_printf_common+0x8e>
	...

0800786c <_printf_i>:
 800786c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007870:	7e0f      	ldrb	r7, [r1, #24]
 8007872:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007874:	2f78      	cmp	r7, #120	@ 0x78
 8007876:	4691      	mov	r9, r2
 8007878:	4680      	mov	r8, r0
 800787a:	460c      	mov	r4, r1
 800787c:	469a      	mov	sl, r3
 800787e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007882:	d807      	bhi.n	8007894 <_printf_i+0x28>
 8007884:	2f62      	cmp	r7, #98	@ 0x62
 8007886:	d80a      	bhi.n	800789e <_printf_i+0x32>
 8007888:	2f00      	cmp	r7, #0
 800788a:	f000 80d1 	beq.w	8007a30 <_printf_i+0x1c4>
 800788e:	2f58      	cmp	r7, #88	@ 0x58
 8007890:	f000 80b8 	beq.w	8007a04 <_printf_i+0x198>
 8007894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007898:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800789c:	e03a      	b.n	8007914 <_printf_i+0xa8>
 800789e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078a2:	2b15      	cmp	r3, #21
 80078a4:	d8f6      	bhi.n	8007894 <_printf_i+0x28>
 80078a6:	a101      	add	r1, pc, #4	@ (adr r1, 80078ac <_printf_i+0x40>)
 80078a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078ac:	08007905 	.word	0x08007905
 80078b0:	08007919 	.word	0x08007919
 80078b4:	08007895 	.word	0x08007895
 80078b8:	08007895 	.word	0x08007895
 80078bc:	08007895 	.word	0x08007895
 80078c0:	08007895 	.word	0x08007895
 80078c4:	08007919 	.word	0x08007919
 80078c8:	08007895 	.word	0x08007895
 80078cc:	08007895 	.word	0x08007895
 80078d0:	08007895 	.word	0x08007895
 80078d4:	08007895 	.word	0x08007895
 80078d8:	08007a17 	.word	0x08007a17
 80078dc:	08007943 	.word	0x08007943
 80078e0:	080079d1 	.word	0x080079d1
 80078e4:	08007895 	.word	0x08007895
 80078e8:	08007895 	.word	0x08007895
 80078ec:	08007a39 	.word	0x08007a39
 80078f0:	08007895 	.word	0x08007895
 80078f4:	08007943 	.word	0x08007943
 80078f8:	08007895 	.word	0x08007895
 80078fc:	08007895 	.word	0x08007895
 8007900:	080079d9 	.word	0x080079d9
 8007904:	6833      	ldr	r3, [r6, #0]
 8007906:	1d1a      	adds	r2, r3, #4
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6032      	str	r2, [r6, #0]
 800790c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007910:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007914:	2301      	movs	r3, #1
 8007916:	e09c      	b.n	8007a52 <_printf_i+0x1e6>
 8007918:	6833      	ldr	r3, [r6, #0]
 800791a:	6820      	ldr	r0, [r4, #0]
 800791c:	1d19      	adds	r1, r3, #4
 800791e:	6031      	str	r1, [r6, #0]
 8007920:	0606      	lsls	r6, r0, #24
 8007922:	d501      	bpl.n	8007928 <_printf_i+0xbc>
 8007924:	681d      	ldr	r5, [r3, #0]
 8007926:	e003      	b.n	8007930 <_printf_i+0xc4>
 8007928:	0645      	lsls	r5, r0, #25
 800792a:	d5fb      	bpl.n	8007924 <_printf_i+0xb8>
 800792c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007930:	2d00      	cmp	r5, #0
 8007932:	da03      	bge.n	800793c <_printf_i+0xd0>
 8007934:	232d      	movs	r3, #45	@ 0x2d
 8007936:	426d      	negs	r5, r5
 8007938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800793c:	4858      	ldr	r0, [pc, #352]	@ (8007aa0 <_printf_i+0x234>)
 800793e:	230a      	movs	r3, #10
 8007940:	e011      	b.n	8007966 <_printf_i+0xfa>
 8007942:	6821      	ldr	r1, [r4, #0]
 8007944:	6833      	ldr	r3, [r6, #0]
 8007946:	0608      	lsls	r0, r1, #24
 8007948:	f853 5b04 	ldr.w	r5, [r3], #4
 800794c:	d402      	bmi.n	8007954 <_printf_i+0xe8>
 800794e:	0649      	lsls	r1, r1, #25
 8007950:	bf48      	it	mi
 8007952:	b2ad      	uxthmi	r5, r5
 8007954:	2f6f      	cmp	r7, #111	@ 0x6f
 8007956:	4852      	ldr	r0, [pc, #328]	@ (8007aa0 <_printf_i+0x234>)
 8007958:	6033      	str	r3, [r6, #0]
 800795a:	bf14      	ite	ne
 800795c:	230a      	movne	r3, #10
 800795e:	2308      	moveq	r3, #8
 8007960:	2100      	movs	r1, #0
 8007962:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007966:	6866      	ldr	r6, [r4, #4]
 8007968:	60a6      	str	r6, [r4, #8]
 800796a:	2e00      	cmp	r6, #0
 800796c:	db05      	blt.n	800797a <_printf_i+0x10e>
 800796e:	6821      	ldr	r1, [r4, #0]
 8007970:	432e      	orrs	r6, r5
 8007972:	f021 0104 	bic.w	r1, r1, #4
 8007976:	6021      	str	r1, [r4, #0]
 8007978:	d04b      	beq.n	8007a12 <_printf_i+0x1a6>
 800797a:	4616      	mov	r6, r2
 800797c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007980:	fb03 5711 	mls	r7, r3, r1, r5
 8007984:	5dc7      	ldrb	r7, [r0, r7]
 8007986:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800798a:	462f      	mov	r7, r5
 800798c:	42bb      	cmp	r3, r7
 800798e:	460d      	mov	r5, r1
 8007990:	d9f4      	bls.n	800797c <_printf_i+0x110>
 8007992:	2b08      	cmp	r3, #8
 8007994:	d10b      	bne.n	80079ae <_printf_i+0x142>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	07df      	lsls	r7, r3, #31
 800799a:	d508      	bpl.n	80079ae <_printf_i+0x142>
 800799c:	6923      	ldr	r3, [r4, #16]
 800799e:	6861      	ldr	r1, [r4, #4]
 80079a0:	4299      	cmp	r1, r3
 80079a2:	bfde      	ittt	le
 80079a4:	2330      	movle	r3, #48	@ 0x30
 80079a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079ae:	1b92      	subs	r2, r2, r6
 80079b0:	6122      	str	r2, [r4, #16]
 80079b2:	f8cd a000 	str.w	sl, [sp]
 80079b6:	464b      	mov	r3, r9
 80079b8:	aa03      	add	r2, sp, #12
 80079ba:	4621      	mov	r1, r4
 80079bc:	4640      	mov	r0, r8
 80079be:	f7ff fee7 	bl	8007790 <_printf_common>
 80079c2:	3001      	adds	r0, #1
 80079c4:	d14a      	bne.n	8007a5c <_printf_i+0x1f0>
 80079c6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ca:	b004      	add	sp, #16
 80079cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	f043 0320 	orr.w	r3, r3, #32
 80079d6:	6023      	str	r3, [r4, #0]
 80079d8:	4832      	ldr	r0, [pc, #200]	@ (8007aa4 <_printf_i+0x238>)
 80079da:	2778      	movs	r7, #120	@ 0x78
 80079dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	6831      	ldr	r1, [r6, #0]
 80079e4:	061f      	lsls	r7, r3, #24
 80079e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80079ea:	d402      	bmi.n	80079f2 <_printf_i+0x186>
 80079ec:	065f      	lsls	r7, r3, #25
 80079ee:	bf48      	it	mi
 80079f0:	b2ad      	uxthmi	r5, r5
 80079f2:	6031      	str	r1, [r6, #0]
 80079f4:	07d9      	lsls	r1, r3, #31
 80079f6:	bf44      	itt	mi
 80079f8:	f043 0320 	orrmi.w	r3, r3, #32
 80079fc:	6023      	strmi	r3, [r4, #0]
 80079fe:	b11d      	cbz	r5, 8007a08 <_printf_i+0x19c>
 8007a00:	2310      	movs	r3, #16
 8007a02:	e7ad      	b.n	8007960 <_printf_i+0xf4>
 8007a04:	4826      	ldr	r0, [pc, #152]	@ (8007aa0 <_printf_i+0x234>)
 8007a06:	e7e9      	b.n	80079dc <_printf_i+0x170>
 8007a08:	6823      	ldr	r3, [r4, #0]
 8007a0a:	f023 0320 	bic.w	r3, r3, #32
 8007a0e:	6023      	str	r3, [r4, #0]
 8007a10:	e7f6      	b.n	8007a00 <_printf_i+0x194>
 8007a12:	4616      	mov	r6, r2
 8007a14:	e7bd      	b.n	8007992 <_printf_i+0x126>
 8007a16:	6833      	ldr	r3, [r6, #0]
 8007a18:	6825      	ldr	r5, [r4, #0]
 8007a1a:	6961      	ldr	r1, [r4, #20]
 8007a1c:	1d18      	adds	r0, r3, #4
 8007a1e:	6030      	str	r0, [r6, #0]
 8007a20:	062e      	lsls	r6, r5, #24
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	d501      	bpl.n	8007a2a <_printf_i+0x1be>
 8007a26:	6019      	str	r1, [r3, #0]
 8007a28:	e002      	b.n	8007a30 <_printf_i+0x1c4>
 8007a2a:	0668      	lsls	r0, r5, #25
 8007a2c:	d5fb      	bpl.n	8007a26 <_printf_i+0x1ba>
 8007a2e:	8019      	strh	r1, [r3, #0]
 8007a30:	2300      	movs	r3, #0
 8007a32:	6123      	str	r3, [r4, #16]
 8007a34:	4616      	mov	r6, r2
 8007a36:	e7bc      	b.n	80079b2 <_printf_i+0x146>
 8007a38:	6833      	ldr	r3, [r6, #0]
 8007a3a:	1d1a      	adds	r2, r3, #4
 8007a3c:	6032      	str	r2, [r6, #0]
 8007a3e:	681e      	ldr	r6, [r3, #0]
 8007a40:	6862      	ldr	r2, [r4, #4]
 8007a42:	2100      	movs	r1, #0
 8007a44:	4630      	mov	r0, r6
 8007a46:	f7f8 fbdb 	bl	8000200 <memchr>
 8007a4a:	b108      	cbz	r0, 8007a50 <_printf_i+0x1e4>
 8007a4c:	1b80      	subs	r0, r0, r6
 8007a4e:	6060      	str	r0, [r4, #4]
 8007a50:	6863      	ldr	r3, [r4, #4]
 8007a52:	6123      	str	r3, [r4, #16]
 8007a54:	2300      	movs	r3, #0
 8007a56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a5a:	e7aa      	b.n	80079b2 <_printf_i+0x146>
 8007a5c:	6923      	ldr	r3, [r4, #16]
 8007a5e:	4632      	mov	r2, r6
 8007a60:	4649      	mov	r1, r9
 8007a62:	4640      	mov	r0, r8
 8007a64:	47d0      	blx	sl
 8007a66:	3001      	adds	r0, #1
 8007a68:	d0ad      	beq.n	80079c6 <_printf_i+0x15a>
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	079b      	lsls	r3, r3, #30
 8007a6e:	d413      	bmi.n	8007a98 <_printf_i+0x22c>
 8007a70:	68e0      	ldr	r0, [r4, #12]
 8007a72:	9b03      	ldr	r3, [sp, #12]
 8007a74:	4298      	cmp	r0, r3
 8007a76:	bfb8      	it	lt
 8007a78:	4618      	movlt	r0, r3
 8007a7a:	e7a6      	b.n	80079ca <_printf_i+0x15e>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4632      	mov	r2, r6
 8007a80:	4649      	mov	r1, r9
 8007a82:	4640      	mov	r0, r8
 8007a84:	47d0      	blx	sl
 8007a86:	3001      	adds	r0, #1
 8007a88:	d09d      	beq.n	80079c6 <_printf_i+0x15a>
 8007a8a:	3501      	adds	r5, #1
 8007a8c:	68e3      	ldr	r3, [r4, #12]
 8007a8e:	9903      	ldr	r1, [sp, #12]
 8007a90:	1a5b      	subs	r3, r3, r1
 8007a92:	42ab      	cmp	r3, r5
 8007a94:	dcf2      	bgt.n	8007a7c <_printf_i+0x210>
 8007a96:	e7eb      	b.n	8007a70 <_printf_i+0x204>
 8007a98:	2500      	movs	r5, #0
 8007a9a:	f104 0619 	add.w	r6, r4, #25
 8007a9e:	e7f5      	b.n	8007a8c <_printf_i+0x220>
 8007aa0:	08007e3e 	.word	0x08007e3e
 8007aa4:	08007e4f 	.word	0x08007e4f

08007aa8 <memmove>:
 8007aa8:	4288      	cmp	r0, r1
 8007aaa:	b510      	push	{r4, lr}
 8007aac:	eb01 0402 	add.w	r4, r1, r2
 8007ab0:	d902      	bls.n	8007ab8 <memmove+0x10>
 8007ab2:	4284      	cmp	r4, r0
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	d807      	bhi.n	8007ac8 <memmove+0x20>
 8007ab8:	1e43      	subs	r3, r0, #1
 8007aba:	42a1      	cmp	r1, r4
 8007abc:	d008      	beq.n	8007ad0 <memmove+0x28>
 8007abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ac6:	e7f8      	b.n	8007aba <memmove+0x12>
 8007ac8:	4402      	add	r2, r0
 8007aca:	4601      	mov	r1, r0
 8007acc:	428a      	cmp	r2, r1
 8007ace:	d100      	bne.n	8007ad2 <memmove+0x2a>
 8007ad0:	bd10      	pop	{r4, pc}
 8007ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ada:	e7f7      	b.n	8007acc <memmove+0x24>

08007adc <_sbrk_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d06      	ldr	r5, [pc, #24]	@ (8007af8 <_sbrk_r+0x1c>)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	602b      	str	r3, [r5, #0]
 8007ae8:	f7f9 f9f6 	bl	8000ed8 <_sbrk>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_sbrk_r+0x1a>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_sbrk_r+0x1a>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	2000912c 	.word	0x2000912c

08007afc <_realloc_r>:
 8007afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b00:	4607      	mov	r7, r0
 8007b02:	4614      	mov	r4, r2
 8007b04:	460d      	mov	r5, r1
 8007b06:	b921      	cbnz	r1, 8007b12 <_realloc_r+0x16>
 8007b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	f7ff bc5b 	b.w	80073c8 <_malloc_r>
 8007b12:	b92a      	cbnz	r2, 8007b20 <_realloc_r+0x24>
 8007b14:	f7ff fbec 	bl	80072f0 <_free_r>
 8007b18:	4625      	mov	r5, r4
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b20:	f000 f81a 	bl	8007b58 <_malloc_usable_size_r>
 8007b24:	4284      	cmp	r4, r0
 8007b26:	4606      	mov	r6, r0
 8007b28:	d802      	bhi.n	8007b30 <_realloc_r+0x34>
 8007b2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b2e:	d8f4      	bhi.n	8007b1a <_realloc_r+0x1e>
 8007b30:	4621      	mov	r1, r4
 8007b32:	4638      	mov	r0, r7
 8007b34:	f7ff fc48 	bl	80073c8 <_malloc_r>
 8007b38:	4680      	mov	r8, r0
 8007b3a:	b908      	cbnz	r0, 8007b40 <_realloc_r+0x44>
 8007b3c:	4645      	mov	r5, r8
 8007b3e:	e7ec      	b.n	8007b1a <_realloc_r+0x1e>
 8007b40:	42b4      	cmp	r4, r6
 8007b42:	4622      	mov	r2, r4
 8007b44:	4629      	mov	r1, r5
 8007b46:	bf28      	it	cs
 8007b48:	4632      	movcs	r2, r6
 8007b4a:	f7ff fbc3 	bl	80072d4 <memcpy>
 8007b4e:	4629      	mov	r1, r5
 8007b50:	4638      	mov	r0, r7
 8007b52:	f7ff fbcd 	bl	80072f0 <_free_r>
 8007b56:	e7f1      	b.n	8007b3c <_realloc_r+0x40>

08007b58 <_malloc_usable_size_r>:
 8007b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b5c:	1f18      	subs	r0, r3, #4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bfbc      	itt	lt
 8007b62:	580b      	ldrlt	r3, [r1, r0]
 8007b64:	18c0      	addlt	r0, r0, r3
 8007b66:	4770      	bx	lr

08007b68 <_init>:
 8007b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6a:	bf00      	nop
 8007b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6e:	bc08      	pop	{r3}
 8007b70:	469e      	mov	lr, r3
 8007b72:	4770      	bx	lr

08007b74 <_fini>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	bf00      	nop
 8007b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	4770      	bx	lr
