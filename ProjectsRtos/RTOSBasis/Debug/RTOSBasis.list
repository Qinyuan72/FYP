
RTOSBasis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004a64  08004a64  00005a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b0c  08004b0c  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004b0c  08004b0c  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b0c  08004b0c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b0c  08004b0c  00005b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b10  08004b10  00005b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004b14  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001978  20000010  08004b24  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001988  08004b24  00006988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ec3  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e6f  00000000  00000000  00019f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0001cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee7  00000000  00000000  0001e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c3b  00000000  00000000  0001efbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014239  00000000  00000000  00021bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6a73  00000000  00000000  00035e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c8a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050ec  00000000  00000000  0012c8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001319d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a4c 	.word	0x08004a4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004a4c 	.word	0x08004a4c

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 f9fe 	bl	80005d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f833 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f883 	bl	80002e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e2:	f001 fe79 	bl	8001ed8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001e6:	4a10      	ldr	r2, [pc, #64]	@ (8000228 <main+0x58>)
 80001e8:	2100      	movs	r1, #0
 80001ea:	4810      	ldr	r0, [pc, #64]	@ (800022c <main+0x5c>)
 80001ec:	f001 febe 	bl	8001f6c <osThreadNew>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000230 <main+0x60>)
 80001f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //Create task to manipulate LED_0
  if((xTaskCreate(vTaskLed_0, "Task LED 0", configMINIMAL_STACK_SIZE, NULL, 1, NULL)) != pdTRUE)
 80001f6:	2300      	movs	r3, #0
 80001f8:	9301      	str	r3, [sp, #4]
 80001fa:	2301      	movs	r3, #1
 80001fc:	9300      	str	r3, [sp, #0]
 80001fe:	2300      	movs	r3, #0
 8000200:	2280      	movs	r2, #128	@ 0x80
 8000202:	490c      	ldr	r1, [pc, #48]	@ (8000234 <main+0x64>)
 8000204:	480c      	ldr	r0, [pc, #48]	@ (8000238 <main+0x68>)
 8000206:	f002 fda1 	bl	8002d4c <xTaskCreate>
  {

  }

  //Create task to manipulate LED_1
  if((xTaskCreate(vTaskLed_1, "Task LED 1", configMINIMAL_STACK_SIZE, NULL, 1, NULL)) != pdTRUE)
 800020a:	2300      	movs	r3, #0
 800020c:	9301      	str	r3, [sp, #4]
 800020e:	2301      	movs	r3, #1
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	2300      	movs	r3, #0
 8000214:	2280      	movs	r2, #128	@ 0x80
 8000216:	4909      	ldr	r1, [pc, #36]	@ (800023c <main+0x6c>)
 8000218:	4809      	ldr	r0, [pc, #36]	@ (8000240 <main+0x70>)
 800021a:	f002 fd97 	bl	8002d4c <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800021e:	f001 fe7f 	bl	8001f20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000222:	bf00      	nop
 8000224:	e7fd      	b.n	8000222 <main+0x52>
 8000226:	bf00      	nop
 8000228:	08004aa0 	.word	0x08004aa0
 800022c:	0800038f 	.word	0x0800038f
 8000230:	2000002c 	.word	0x2000002c
 8000234:	08004a70 	.word	0x08004a70
 8000238:	08000365 	.word	0x08000365
 800023c:	08004a7c 	.word	0x08004a7c
 8000240:	08000383 	.word	0x08000383

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b096      	sub	sp, #88	@ 0x58
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0314 	add.w	r3, r7, #20
 800024e:	2244      	movs	r2, #68	@ 0x44
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f004 fbc0 	bl	80049d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	463b      	mov	r3, r7
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000266:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800026a:	f000 fcb9 	bl	8000be0 <HAL_PWREx_ControlVoltageScaling>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000274:	f000 f8a6 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000278:	2310      	movs	r3, #16
 800027a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000284:	2360      	movs	r3, #96	@ 0x60
 8000286:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000288:	2302      	movs	r3, #2
 800028a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800028c:	2301      	movs	r3, #1
 800028e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000290:	2301      	movs	r3, #1
 8000292:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000294:	2328      	movs	r3, #40	@ 0x28
 8000296:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000298:	2307      	movs	r3, #7
 800029a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800029c:	2302      	movs	r3, #2
 800029e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a0:	2302      	movs	r3, #2
 80002a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fcef 	bl	8000c8c <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002b4:	f000 f886 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002bc:	2303      	movs	r3, #3
 80002be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002cc:	463b      	mov	r3, r7
 80002ce:	2104      	movs	r1, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 f8b7 	bl	8001444 <HAL_RCC_ClockConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002dc:	f000 f872 	bl	80003c4 <Error_Handler>
  }
}
 80002e0:	bf00      	nop
 80002e2:	3758      	adds	r7, #88	@ 0x58
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	f107 030c 	add.w	r3, r7, #12
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002fe:	4b18      	ldr	r3, [pc, #96]	@ (8000360 <MX_GPIO_Init+0x78>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000302:	4a17      	ldr	r2, [pc, #92]	@ (8000360 <MX_GPIO_Init+0x78>)
 8000304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800030a:	4b15      	ldr	r3, [pc, #84]	@ (8000360 <MX_GPIO_Init+0x78>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000312:	60bb      	str	r3, [r7, #8]
 8000314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000316:	4b12      	ldr	r3, [pc, #72]	@ (8000360 <MX_GPIO_Init+0x78>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031a:	4a11      	ldr	r2, [pc, #68]	@ (8000360 <MX_GPIO_Init+0x78>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000322:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <MX_GPIO_Init+0x78>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	2120      	movs	r1, #32
 8000332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000336:	f000 fc13 	bl	8000b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800033a:	2320      	movs	r3, #32
 800033c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2301      	movs	r3, #1
 8000340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000346:	2300      	movs	r3, #0
 8000348:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800034a:	f107 030c 	add.w	r3, r7, #12
 800034e:	4619      	mov	r1, r3
 8000350:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000354:	f000 fa5a 	bl	800080c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000358:	bf00      	nop
 800035a:	3720      	adds	r7, #32
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40021000 	.word	0x40021000

08000364 <vTaskLed_0>:

/* USER CODE BEGIN 4 */
void vTaskLed_0 (void *pvParameters)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	//Variable Declaration

	//Infinite Loop
	for (;;)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800036c:	2120      	movs	r1, #32
 800036e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000372:	f000 fc0d 	bl	8000b90 <HAL_GPIO_TogglePin>

		vTaskDelay(1000 / portTICK_PERIOD_MS);
 8000376:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800037a:	f002 fe2d 	bl	8002fd8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800037e:	bf00      	nop
 8000380:	e7f4      	b.n	800036c <vTaskLed_0+0x8>

08000382 <vTaskLed_1>:
	}
	//Delete this task if break out the loop
	vTaskDelete(NULL);
}
void vTaskLed_1 (void *pvParameters)
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
	//Variable Declaration

	//Infinite Loop
	for (;;)
 800038a:	bf00      	nop
 800038c:	e7fd      	b.n	800038a <vTaskLed_1+0x8>

0800038e <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b082      	sub	sp, #8
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000396:	2001      	movs	r0, #1
 8000398:	f001 fe7a 	bl	8002090 <osDelay>
 800039c:	e7fb      	b.n	8000396 <StartDefaultTask+0x8>
	...

080003a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a04      	ldr	r2, [pc, #16]	@ (80003c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d101      	bne.n	80003b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003b2:	f000 f929 	bl	8000608 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40001000 	.word	0x40001000

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <Error_Handler+0x8>

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d6:	4b11      	ldr	r3, [pc, #68]	@ (800041c <HAL_MspInit+0x4c>)
 80003d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003da:	4a10      	ldr	r2, [pc, #64]	@ (800041c <HAL_MspInit+0x4c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80003e2:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <HAL_MspInit+0x4c>)
 80003e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b0b      	ldr	r3, [pc, #44]	@ (800041c <HAL_MspInit+0x4c>)
 80003f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003f2:	4a0a      	ldr	r2, [pc, #40]	@ (800041c <HAL_MspInit+0x4c>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80003fa:	4b08      	ldr	r3, [pc, #32]	@ (800041c <HAL_MspInit+0x4c>)
 80003fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000406:	2200      	movs	r2, #0
 8000408:	210f      	movs	r1, #15
 800040a:	f06f 0001 	mvn.w	r0, #1
 800040e:	f000 f9d3 	bl	80007b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08e      	sub	sp, #56	@ 0x38
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000428:	2300      	movs	r3, #0
 800042a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800042e:	4b34      	ldr	r3, [pc, #208]	@ (8000500 <HAL_InitTick+0xe0>)
 8000430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000432:	4a33      	ldr	r2, [pc, #204]	@ (8000500 <HAL_InitTick+0xe0>)
 8000434:	f043 0310 	orr.w	r3, r3, #16
 8000438:	6593      	str	r3, [r2, #88]	@ 0x58
 800043a:	4b31      	ldr	r3, [pc, #196]	@ (8000500 <HAL_InitTick+0xe0>)
 800043c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800043e:	f003 0310 	and.w	r3, r3, #16
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000446:	f107 0210 	add.w	r2, r7, #16
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	4611      	mov	r1, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f001 f9a5 	bl	80017a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000456:	6a3b      	ldr	r3, [r7, #32]
 8000458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800045a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800045c:	2b00      	cmp	r3, #0
 800045e:	d103      	bne.n	8000468 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000460:	f001 f988 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 8000464:	6378      	str	r0, [r7, #52]	@ 0x34
 8000466:	e004      	b.n	8000472 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000468:	f001 f984 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 800046c:	4603      	mov	r3, r0
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000474:	4a23      	ldr	r2, [pc, #140]	@ (8000504 <HAL_InitTick+0xe4>)
 8000476:	fba2 2303 	umull	r2, r3, r2, r3
 800047a:	0c9b      	lsrs	r3, r3, #18
 800047c:	3b01      	subs	r3, #1
 800047e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000480:	4b21      	ldr	r3, [pc, #132]	@ (8000508 <HAL_InitTick+0xe8>)
 8000482:	4a22      	ldr	r2, [pc, #136]	@ (800050c <HAL_InitTick+0xec>)
 8000484:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000486:	4b20      	ldr	r3, [pc, #128]	@ (8000508 <HAL_InitTick+0xe8>)
 8000488:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800048c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800048e:	4a1e      	ldr	r2, [pc, #120]	@ (8000508 <HAL_InitTick+0xe8>)
 8000490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000492:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000494:	4b1c      	ldr	r3, [pc, #112]	@ (8000508 <HAL_InitTick+0xe8>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049a:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <HAL_InitTick+0xe8>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a0:	4b19      	ldr	r3, [pc, #100]	@ (8000508 <HAL_InitTick+0xe8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80004a6:	4818      	ldr	r0, [pc, #96]	@ (8000508 <HAL_InitTick+0xe8>)
 80004a8:	f001 fa0c 	bl	80018c4 <HAL_TIM_Base_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80004b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d11b      	bne.n	80004f2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80004ba:	4813      	ldr	r0, [pc, #76]	@ (8000508 <HAL_InitTick+0xe8>)
 80004bc:	f001 fa64 	bl	8001988 <HAL_TIM_Base_Start_IT>
 80004c0:	4603      	mov	r3, r0
 80004c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80004c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d111      	bne.n	80004f2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80004ce:	2036      	movs	r0, #54	@ 0x36
 80004d0:	f000 f98e 	bl	80007f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b0f      	cmp	r3, #15
 80004d8:	d808      	bhi.n	80004ec <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80004da:	2200      	movs	r2, #0
 80004dc:	6879      	ldr	r1, [r7, #4]
 80004de:	2036      	movs	r0, #54	@ 0x36
 80004e0:	f000 f96a 	bl	80007b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000510 <HAL_InitTick+0xf0>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6013      	str	r3, [r2, #0]
 80004ea:	e002      	b.n	80004f2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80004ec:	2301      	movs	r3, #1
 80004ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80004f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3738      	adds	r7, #56	@ 0x38
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000
 8000504:	431bde83 	.word	0x431bde83
 8000508:	20000030 	.word	0x20000030
 800050c:	40001000 	.word	0x40001000
 8000510:	20000004 	.word	0x20000004

08000514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <NMI_Handler+0x4>

0800051c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <HardFault_Handler+0x4>

08000524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <MemManage_Handler+0x4>

0800052c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <UsageFault_Handler+0x4>

0800053c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
	...

0800054c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000550:	4802      	ldr	r0, [pc, #8]	@ (800055c <TIM6_DAC_IRQHandler+0x10>)
 8000552:	f001 fa89 	bl	8001a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000030 	.word	0x20000030

08000560 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <SystemInit+0x20>)
 8000566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800056a:	4a05      	ldr	r2, [pc, #20]	@ (8000580 <SystemInit+0x20>)
 800056c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000584:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000588:	f7ff ffea 	bl	8000560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800058c:	480c      	ldr	r0, [pc, #48]	@ (80005c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800058e:	490d      	ldr	r1, [pc, #52]	@ (80005c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000590:	4a0d      	ldr	r2, [pc, #52]	@ (80005c8 <LoopForever+0xe>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0a      	ldr	r2, [pc, #40]	@ (80005cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a4:	4c0a      	ldr	r4, [pc, #40]	@ (80005d0 <LoopForever+0x16>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005b2:	f004 fa19 	bl	80049e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005b6:	f7ff fe0b 	bl	80001d0 <main>

080005ba <LoopForever>:

LoopForever:
    b LoopForever
 80005ba:	e7fe      	b.n	80005ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80005c8:	08004b14 	.word	0x08004b14
  ldr r2, =_sbss
 80005cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80005d0:	20001988 	.word	0x20001988

080005d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_2_IRQHandler>

080005d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005dc:	2300      	movs	r3, #0
 80005de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e0:	2003      	movs	r0, #3
 80005e2:	f000 f8de 	bl	80007a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005e6:	200f      	movs	r0, #15
 80005e8:	f7ff ff1a 	bl	8000420 <HAL_InitTick>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	e001      	b.n	80005fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005f8:	f7ff feea 	bl	80003d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005fc:	79fb      	ldrb	r3, [r7, #7]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <HAL_IncTick+0x20>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <HAL_IncTick+0x24>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4413      	add	r3, r2
 8000618:	4a04      	ldr	r2, [pc, #16]	@ (800062c <HAL_IncTick+0x24>)
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000008 	.word	0x20000008
 800062c:	2000007c 	.word	0x2000007c

08000630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return uwTick;
 8000634:	4b03      	ldr	r3, [pc, #12]	@ (8000644 <HAL_GetTick+0x14>)
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	2000007c 	.word	0x2000007c

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067a:	4a04      	ldr	r2, [pc, #16]	@ (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	60d3      	str	r3, [r2, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0b      	blt.n	80006d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 021f 	and.w	r2, r3, #31
 80006c4:	4907      	ldr	r1, [pc, #28]	@ (80006e4 <__NVIC_EnableIRQ+0x38>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	2001      	movs	r0, #1
 80006ce:	fa00 f202 	lsl.w	r2, r0, r2
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	@ (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	@ (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	@ 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	@ 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ff4c 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007ca:	f7ff ff61 	bl	8000690 <__NVIC_GetPriorityGrouping>
 80007ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	68b9      	ldr	r1, [r7, #8]
 80007d4:	6978      	ldr	r0, [r7, #20]
 80007d6:	f7ff ffb1 	bl	800073c <NVIC_EncodePriority>
 80007da:	4602      	mov	r2, r0
 80007dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff80 	bl	80006e8 <__NVIC_SetPriority>
}
 80007e8:	bf00      	nop
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff54 	bl	80006ac <__NVIC_EnableIRQ>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800080c:	b480      	push	{r7}
 800080e:	b087      	sub	sp, #28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800081a:	e17f      	b.n	8000b1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	2101      	movs	r1, #1
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	fa01 f303 	lsl.w	r3, r1, r3
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2b00      	cmp	r3, #0
 8000830:	f000 8171 	beq.w	8000b16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f003 0303 	and.w	r3, r3, #3
 800083c:	2b01      	cmp	r3, #1
 800083e:	d005      	beq.n	800084c <HAL_GPIO_Init+0x40>
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f003 0303 	and.w	r3, r3, #3
 8000848:	2b02      	cmp	r3, #2
 800084a:	d130      	bne.n	80008ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	2203      	movs	r2, #3
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	43db      	mvns	r3, r3
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	4013      	ands	r3, r2
 8000862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	68da      	ldr	r2, [r3, #12]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	4313      	orrs	r3, r2
 8000874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000882:	2201      	movs	r2, #1
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	4013      	ands	r3, r2
 8000890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	091b      	lsrs	r3, r3, #4
 8000898:	f003 0201 	and.w	r2, r3, #1
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f003 0303 	and.w	r3, r3, #3
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d118      	bne.n	80008ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008c0:	2201      	movs	r2, #1
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	4013      	ands	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	f003 0201 	and.w	r2, r3, #1
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f003 0303 	and.w	r3, r3, #3
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d017      	beq.n	8000928 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	2203      	movs	r2, #3
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	689a      	ldr	r2, [r3, #8]
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4313      	orrs	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	f003 0303 	and.w	r3, r3, #3
 8000930:	2b02      	cmp	r3, #2
 8000932:	d123      	bne.n	800097c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	08da      	lsrs	r2, r3, #3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3208      	adds	r2, #8
 800093c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000940:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	f003 0307 	and.w	r3, r3, #7
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	220f      	movs	r2, #15
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4013      	ands	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	691a      	ldr	r2, [r3, #16]
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4313      	orrs	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	08da      	lsrs	r2, r3, #3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3208      	adds	r2, #8
 8000976:	6939      	ldr	r1, [r7, #16]
 8000978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	2203      	movs	r2, #3
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 0203 	and.w	r2, r3, #3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	f000 80ac 	beq.w	8000b16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b5f      	ldr	r3, [pc, #380]	@ (8000b3c <HAL_GPIO_Init+0x330>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009c2:	4a5e      	ldr	r2, [pc, #376]	@ (8000b3c <HAL_GPIO_Init+0x330>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ca:	4b5c      	ldr	r3, [pc, #368]	@ (8000b3c <HAL_GPIO_Init+0x330>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009d6:	4a5a      	ldr	r2, [pc, #360]	@ (8000b40 <HAL_GPIO_Init+0x334>)
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	089b      	lsrs	r3, r3, #2
 80009dc:	3302      	adds	r3, #2
 80009de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	f003 0303 	and.w	r3, r3, #3
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	220f      	movs	r2, #15
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a00:	d025      	beq.n	8000a4e <HAL_GPIO_Init+0x242>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4f      	ldr	r2, [pc, #316]	@ (8000b44 <HAL_GPIO_Init+0x338>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d01f      	beq.n	8000a4a <HAL_GPIO_Init+0x23e>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4e      	ldr	r2, [pc, #312]	@ (8000b48 <HAL_GPIO_Init+0x33c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d019      	beq.n	8000a46 <HAL_GPIO_Init+0x23a>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4d      	ldr	r2, [pc, #308]	@ (8000b4c <HAL_GPIO_Init+0x340>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d013      	beq.n	8000a42 <HAL_GPIO_Init+0x236>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4c      	ldr	r2, [pc, #304]	@ (8000b50 <HAL_GPIO_Init+0x344>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d00d      	beq.n	8000a3e <HAL_GPIO_Init+0x232>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4b      	ldr	r2, [pc, #300]	@ (8000b54 <HAL_GPIO_Init+0x348>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d007      	beq.n	8000a3a <HAL_GPIO_Init+0x22e>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8000b58 <HAL_GPIO_Init+0x34c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <HAL_GPIO_Init+0x22a>
 8000a32:	2306      	movs	r3, #6
 8000a34:	e00c      	b.n	8000a50 <HAL_GPIO_Init+0x244>
 8000a36:	2307      	movs	r3, #7
 8000a38:	e00a      	b.n	8000a50 <HAL_GPIO_Init+0x244>
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	e008      	b.n	8000a50 <HAL_GPIO_Init+0x244>
 8000a3e:	2304      	movs	r3, #4
 8000a40:	e006      	b.n	8000a50 <HAL_GPIO_Init+0x244>
 8000a42:	2303      	movs	r3, #3
 8000a44:	e004      	b.n	8000a50 <HAL_GPIO_Init+0x244>
 8000a46:	2302      	movs	r3, #2
 8000a48:	e002      	b.n	8000a50 <HAL_GPIO_Init+0x244>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e000      	b.n	8000a50 <HAL_GPIO_Init+0x244>
 8000a4e:	2300      	movs	r3, #0
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	f002 0203 	and.w	r2, r2, #3
 8000a56:	0092      	lsls	r2, r2, #2
 8000a58:	4093      	lsls	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a60:	4937      	ldr	r1, [pc, #220]	@ (8000b40 <HAL_GPIO_Init+0x334>)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	089b      	lsrs	r3, r3, #2
 8000a66:	3302      	adds	r3, #2
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b5c <HAL_GPIO_Init+0x350>)
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	43db      	mvns	r3, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a92:	4a32      	ldr	r2, [pc, #200]	@ (8000b5c <HAL_GPIO_Init+0x350>)
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a98:	4b30      	ldr	r3, [pc, #192]	@ (8000b5c <HAL_GPIO_Init+0x350>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000abc:	4a27      	ldr	r2, [pc, #156]	@ (8000b5c <HAL_GPIO_Init+0x350>)
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ac2:	4b26      	ldr	r3, [pc, #152]	@ (8000b5c <HAL_GPIO_Init+0x350>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b5c <HAL_GPIO_Init+0x350>)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <HAL_GPIO_Init+0x350>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b10:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <HAL_GPIO_Init+0x350>)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa22 f303 	lsr.w	r3, r2, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f47f ae78 	bne.w	800081c <HAL_GPIO_Init+0x10>
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	371c      	adds	r7, #28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000
 8000b44:	48000400 	.word	0x48000400
 8000b48:	48000800 	.word	0x48000800
 8000b4c:	48000c00 	.word	0x48000c00
 8000b50:	48001000 	.word	0x48001000
 8000b54:	48001400 	.word	0x48001400
 8000b58:	48001800 	.word	0x48001800
 8000b5c:	40010400 	.word	0x40010400

08000b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b70:	787b      	ldrb	r3, [r7, #1]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b7c:	e002      	b.n	8000b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	041a      	lsls	r2, r3, #16
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43d9      	mvns	r1, r3
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	400b      	ands	r3, r1
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	619a      	str	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <HAL_PWREx_GetVoltageRange+0x18>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40007000 	.word	0x40007000

08000be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bee:	d130      	bne.n	8000c52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bf0:	4b23      	ldr	r3, [pc, #140]	@ (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bfc:	d038      	beq.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfe:	4b20      	ldr	r3, [pc, #128]	@ (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c06:	4a1e      	ldr	r2, [pc, #120]	@ (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2232      	movs	r2, #50	@ 0x32
 8000c14:	fb02 f303 	mul.w	r3, r2, r3
 8000c18:	4a1b      	ldr	r2, [pc, #108]	@ (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1e:	0c9b      	lsrs	r3, r3, #18
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c24:	e002      	b.n	8000c2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c38:	d102      	bne.n	8000c40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f2      	bne.n	8000c26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c4c:	d110      	bne.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e00f      	b.n	8000c72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c5e:	d007      	beq.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c68:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40007000 	.word	0x40007000
 8000c84:	20000000 	.word	0x20000000
 8000c88:	431bde83 	.word	0x431bde83

08000c8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e3ca      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c9e:	4b97      	ldr	r3, [pc, #604]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 030c 	and.w	r3, r3, #12
 8000ca6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ca8:	4b94      	ldr	r3, [pc, #592]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80e4 	beq.w	8000e88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d007      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x4a>
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	2b0c      	cmp	r3, #12
 8000cca:	f040 808b 	bne.w	8000de4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	f040 8087 	bne.w	8000de4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cd6:	4b89      	ldr	r3, [pc, #548]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <HAL_RCC_OscConfig+0x62>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e3a2      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a1a      	ldr	r2, [r3, #32]
 8000cf2:	4b82      	ldr	r3, [pc, #520]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d004      	beq.n	8000d08 <HAL_RCC_OscConfig+0x7c>
 8000cfe:	4b7f      	ldr	r3, [pc, #508]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d06:	e005      	b.n	8000d14 <HAL_RCC_OscConfig+0x88>
 8000d08:	4b7c      	ldr	r3, [pc, #496]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d0e:	091b      	lsrs	r3, r3, #4
 8000d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d223      	bcs.n	8000d60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fd71 	bl	8001804 <RCC_SetFlashLatencyFromMSIRange>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e383      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d2c:	4b73      	ldr	r3, [pc, #460]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a72      	ldr	r2, [pc, #456]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b70      	ldr	r3, [pc, #448]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	496d      	ldr	r1, [pc, #436]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	4968      	ldr	r1, [pc, #416]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	604b      	str	r3, [r1, #4]
 8000d5e:	e025      	b.n	8000dac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d60:	4b66      	ldr	r3, [pc, #408]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a65      	ldr	r2, [pc, #404]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	4b63      	ldr	r3, [pc, #396]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	4960      	ldr	r1, [pc, #384]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	495b      	ldr	r1, [pc, #364]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d109      	bne.n	8000dac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fd31 	bl	8001804 <RCC_SetFlashLatencyFromMSIRange>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e343      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dac:	f000 fc4a 	bl	8001644 <HAL_RCC_GetSysClockFreq>
 8000db0:	4602      	mov	r2, r0
 8000db2:	4b52      	ldr	r3, [pc, #328]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	f003 030f 	and.w	r3, r3, #15
 8000dbc:	4950      	ldr	r1, [pc, #320]	@ (8000f00 <HAL_RCC_OscConfig+0x274>)
 8000dbe:	5ccb      	ldrb	r3, [r1, r3]
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc8:	4a4e      	ldr	r2, [pc, #312]	@ (8000f04 <HAL_RCC_OscConfig+0x278>)
 8000dca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8000f08 <HAL_RCC_OscConfig+0x27c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fb25 	bl	8000420 <HAL_InitTick>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d052      	beq.n	8000e86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	e327      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d032      	beq.n	8000e52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dec:	4b43      	ldr	r3, [pc, #268]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a42      	ldr	r2, [pc, #264]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000df8:	f7ff fc1a 	bl	8000630 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e00:	f7ff fc16 	bl	8000630 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e310      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e12:	4b3a      	ldr	r3, [pc, #232]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f0      	beq.n	8000e00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e1e:	4b37      	ldr	r3, [pc, #220]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a36      	ldr	r2, [pc, #216]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b34      	ldr	r3, [pc, #208]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	4931      	ldr	r1, [pc, #196]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	492c      	ldr	r1, [pc, #176]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
 8000e50:	e01a      	b.n	8000e88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e52:	4b2a      	ldr	r3, [pc, #168]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a29      	ldr	r2, [pc, #164]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000e58:	f023 0301 	bic.w	r3, r3, #1
 8000e5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fbe7 	bl	8000630 <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e66:	f7ff fbe3 	bl	8000630 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e2dd      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e78:	4b20      	ldr	r3, [pc, #128]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f0      	bne.n	8000e66 <HAL_RCC_OscConfig+0x1da>
 8000e84:	e000      	b.n	8000e88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d074      	beq.n	8000f7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d005      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x21a>
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	2b0c      	cmp	r3, #12
 8000e9e:	d10e      	bne.n	8000ebe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d10b      	bne.n	8000ebe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d064      	beq.n	8000f7c <HAL_RCC_OscConfig+0x2f0>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d160      	bne.n	8000f7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e2ba      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ec6:	d106      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x24a>
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	e026      	b.n	8000f24 <HAL_RCC_OscConfig+0x298>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ede:	d115      	bne.n	8000f0c <HAL_RCC_OscConfig+0x280>
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000ee6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a02      	ldr	r2, [pc, #8]	@ (8000efc <HAL_RCC_OscConfig+0x270>)
 8000ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	e014      	b.n	8000f24 <HAL_RCC_OscConfig+0x298>
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000
 8000f00:	08004ac4 	.word	0x08004ac4
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000004 	.word	0x20000004
 8000f0c:	4ba0      	ldr	r3, [pc, #640]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a9f      	ldr	r2, [pc, #636]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8000f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b9d      	ldr	r3, [pc, #628]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a9c      	ldr	r2, [pc, #624]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d013      	beq.n	8000f54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fb80 	bl	8000630 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fb7c 	bl	8000630 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b64      	cmp	r3, #100	@ 0x64
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e276      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f46:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f0      	beq.n	8000f34 <HAL_RCC_OscConfig+0x2a8>
 8000f52:	e014      	b.n	8000f7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f54:	f7ff fb6c 	bl	8000630 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fb68 	bl	8000630 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	@ 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e262      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f6e:	4b88      	ldr	r3, [pc, #544]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f0      	bne.n	8000f5c <HAL_RCC_OscConfig+0x2d0>
 8000f7a:	e000      	b.n	8000f7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d060      	beq.n	800104c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d005      	beq.n	8000f9c <HAL_RCC_OscConfig+0x310>
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	2b0c      	cmp	r3, #12
 8000f94:	d119      	bne.n	8000fca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d116      	bne.n	8000fca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f9c:	4b7c      	ldr	r3, [pc, #496]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x328>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e23f      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb4:	4b76      	ldr	r3, [pc, #472]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	061b      	lsls	r3, r3, #24
 8000fc2:	4973      	ldr	r1, [pc, #460]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fc8:	e040      	b.n	800104c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d023      	beq.n	800101a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd2:	4b6f      	ldr	r3, [pc, #444]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a6e      	ldr	r2, [pc, #440]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8000fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fde:	f7ff fb27 	bl	8000630 <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe6:	f7ff fb23 	bl	8000630 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e21d      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ff8:	4b65      	ldr	r3, [pc, #404]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f0      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001004:	4b62      	ldr	r3, [pc, #392]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	061b      	lsls	r3, r3, #24
 8001012:	495f      	ldr	r1, [pc, #380]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
 8001018:	e018      	b.n	800104c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800101a:	4b5d      	ldr	r3, [pc, #372]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a5c      	ldr	r2, [pc, #368]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8001020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001026:	f7ff fb03 	bl	8000630 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102e:	f7ff faff 	bl	8000630 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e1f9      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001040:	4b53      	ldr	r3, [pc, #332]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f0      	bne.n	800102e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	2b00      	cmp	r3, #0
 8001056:	d03c      	beq.n	80010d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d01c      	beq.n	800109a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001060:	4b4b      	ldr	r3, [pc, #300]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8001062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001066:	4a4a      	ldr	r2, [pc, #296]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001070:	f7ff fade 	bl	8000630 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001078:	f7ff fada 	bl	8000630 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1d4      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800108a:	4b41      	ldr	r3, [pc, #260]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 800108c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0ef      	beq.n	8001078 <HAL_RCC_OscConfig+0x3ec>
 8001098:	e01b      	b.n	80010d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109a:	4b3d      	ldr	r3, [pc, #244]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 800109c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010a0:	4a3b      	ldr	r2, [pc, #236]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 80010a2:	f023 0301 	bic.w	r3, r3, #1
 80010a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010aa:	f7ff fac1 	bl	8000630 <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b2:	f7ff fabd 	bl	8000630 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e1b7      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010c4:	4b32      	ldr	r3, [pc, #200]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 80010c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1ef      	bne.n	80010b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80a6 	beq.w	800122c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10d      	bne.n	800110c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f4:	4a26      	ldr	r2, [pc, #152]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80010fc:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001108:	2301      	movs	r3, #1
 800110a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800110c:	4b21      	ldr	r3, [pc, #132]	@ (8001194 <HAL_RCC_OscConfig+0x508>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001114:	2b00      	cmp	r3, #0
 8001116:	d118      	bne.n	800114a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001118:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <HAL_RCC_OscConfig+0x508>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a1d      	ldr	r2, [pc, #116]	@ (8001194 <HAL_RCC_OscConfig+0x508>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001122:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001124:	f7ff fa84 	bl	8000630 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112c:	f7ff fa80 	bl	8000630 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e17a      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_RCC_OscConfig+0x508>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d108      	bne.n	8001164 <HAL_RCC_OscConfig+0x4d8>
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8001154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001158:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001162:	e029      	b.n	80011b8 <HAL_RCC_OscConfig+0x52c>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b05      	cmp	r3, #5
 800116a:	d115      	bne.n	8001198 <HAL_RCC_OscConfig+0x50c>
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 800116e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001172:	4a07      	ldr	r2, [pc, #28]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 800117e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001182:	4a03      	ldr	r2, [pc, #12]	@ (8001190 <HAL_RCC_OscConfig+0x504>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800118c:	e014      	b.n	80011b8 <HAL_RCC_OscConfig+0x52c>
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	40007000 	.word	0x40007000
 8001198:	4b9c      	ldr	r3, [pc, #624]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 800119a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800119e:	4a9b      	ldr	r2, [pc, #620]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011a8:	4b98      	ldr	r3, [pc, #608]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80011aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ae:	4a97      	ldr	r2, [pc, #604]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80011b0:	f023 0304 	bic.w	r3, r3, #4
 80011b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d016      	beq.n	80011ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c0:	f7ff fa36 	bl	8000630 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011c6:	e00a      	b.n	80011de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c8:	f7ff fa32 	bl	8000630 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e12a      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011de:	4b8b      	ldr	r3, [pc, #556]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80011e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0ed      	beq.n	80011c8 <HAL_RCC_OscConfig+0x53c>
 80011ec:	e015      	b.n	800121a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ee:	f7ff fa1f 	bl	8000630 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011f4:	e00a      	b.n	800120c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f6:	f7ff fa1b 	bl	8000630 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001204:	4293      	cmp	r3, r2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e113      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800120c:	4b7f      	ldr	r3, [pc, #508]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 800120e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1ed      	bne.n	80011f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800121a:	7ffb      	ldrb	r3, [r7, #31]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d105      	bne.n	800122c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001220:	4b7a      	ldr	r3, [pc, #488]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001224:	4a79      	ldr	r2, [pc, #484]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 8001226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800122a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80fe 	beq.w	8001432 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123a:	2b02      	cmp	r3, #2
 800123c:	f040 80d0 	bne.w	80013e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001240:	4b72      	ldr	r3, [pc, #456]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001250:	429a      	cmp	r2, r3
 8001252:	d130      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	3b01      	subs	r3, #1
 8001260:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001262:	429a      	cmp	r2, r3
 8001264:	d127      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001270:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001272:	429a      	cmp	r2, r3
 8001274:	d11f      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001280:	2a07      	cmp	r2, #7
 8001282:	bf14      	ite	ne
 8001284:	2201      	movne	r2, #1
 8001286:	2200      	moveq	r2, #0
 8001288:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800128a:	4293      	cmp	r3, r2
 800128c:	d113      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001298:	085b      	lsrs	r3, r3, #1
 800129a:	3b01      	subs	r3, #1
 800129c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800129e:	429a      	cmp	r2, r3
 80012a0:	d109      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	085b      	lsrs	r3, r3, #1
 80012ae:	3b01      	subs	r3, #1
 80012b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d06e      	beq.n	8001394 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	d069      	beq.n	8001390 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012bc:	4b53      	ldr	r3, [pc, #332]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d105      	bne.n	80012d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012c8:	4b50      	ldr	r3, [pc, #320]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0ad      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012d8:	4b4c      	ldr	r3, [pc, #304]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a4b      	ldr	r2, [pc, #300]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80012de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012e4:	f7ff f9a4 	bl	8000630 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ec:	f7ff f9a0 	bl	8000630 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e09a      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012fe:	4b43      	ldr	r3, [pc, #268]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130a:	4b40      	ldr	r3, [pc, #256]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	4b40      	ldr	r3, [pc, #256]	@ (8001410 <HAL_RCC_OscConfig+0x784>)
 8001310:	4013      	ands	r3, r2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800131a:	3a01      	subs	r2, #1
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	4311      	orrs	r1, r2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001324:	0212      	lsls	r2, r2, #8
 8001326:	4311      	orrs	r1, r2
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800132c:	0852      	lsrs	r2, r2, #1
 800132e:	3a01      	subs	r2, #1
 8001330:	0552      	lsls	r2, r2, #21
 8001332:	4311      	orrs	r1, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001338:	0852      	lsrs	r2, r2, #1
 800133a:	3a01      	subs	r2, #1
 800133c:	0652      	lsls	r2, r2, #25
 800133e:	4311      	orrs	r1, r2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001344:	0912      	lsrs	r2, r2, #4
 8001346:	0452      	lsls	r2, r2, #17
 8001348:	430a      	orrs	r2, r1
 800134a:	4930      	ldr	r1, [pc, #192]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 800134c:	4313      	orrs	r3, r2
 800134e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001350:	4b2e      	ldr	r3, [pc, #184]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a2d      	ldr	r2, [pc, #180]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 8001356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800135a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800135c:	4b2b      	ldr	r3, [pc, #172]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4a2a      	ldr	r2, [pc, #168]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 8001362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001366:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001368:	f7ff f962 	bl	8000630 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff f95e 	bl	8000630 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e058      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001382:	4b22      	ldr	r3, [pc, #136]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800138e:	e050      	b.n	8001432 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e04f      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d148      	bne.n	8001432 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013a0:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a19      	ldr	r2, [pc, #100]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80013a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	4a16      	ldr	r2, [pc, #88]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80013b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013b8:	f7ff f93a 	bl	8000630 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c0:	f7ff f936 	bl	8000630 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e030      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x734>
 80013de:	e028      	b.n	8001432 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d023      	beq.n	800142e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a08      	ldr	r2, [pc, #32]	@ (800140c <HAL_RCC_OscConfig+0x780>)
 80013ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f2:	f7ff f91d 	bl	8000630 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f8:	e00c      	b.n	8001414 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff f919 	bl	8000630 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d905      	bls.n	8001414 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e013      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
 800140c:	40021000 	.word	0x40021000
 8001410:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001414:	4b09      	ldr	r3, [pc, #36]	@ (800143c <HAL_RCC_OscConfig+0x7b0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1ec      	bne.n	80013fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_RCC_OscConfig+0x7b0>)
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	4905      	ldr	r1, [pc, #20]	@ (800143c <HAL_RCC_OscConfig+0x7b0>)
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_RCC_OscConfig+0x7b4>)
 8001428:	4013      	ands	r3, r2
 800142a:	60cb      	str	r3, [r1, #12]
 800142c:	e001      	b.n	8001432 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000
 8001440:	feeefffc 	.word	0xfeeefffc

08001444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0e7      	b.n	8001628 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001458:	4b75      	ldr	r3, [pc, #468]	@ (8001630 <HAL_RCC_ClockConfig+0x1ec>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d910      	bls.n	8001488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	4b72      	ldr	r3, [pc, #456]	@ (8001630 <HAL_RCC_ClockConfig+0x1ec>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 0207 	bic.w	r2, r3, #7
 800146e:	4970      	ldr	r1, [pc, #448]	@ (8001630 <HAL_RCC_ClockConfig+0x1ec>)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b6e      	ldr	r3, [pc, #440]	@ (8001630 <HAL_RCC_ClockConfig+0x1ec>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0cf      	b.n	8001628 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d010      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	4b66      	ldr	r3, [pc, #408]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d908      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a4:	4b63      	ldr	r3, [pc, #396]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4960      	ldr	r1, [pc, #384]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d04c      	beq.n	800155c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d121      	bne.n	800151a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0a6      	b.n	8001628 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e2:	4b54      	ldr	r3, [pc, #336]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d115      	bne.n	800151a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e09a      	b.n	8001628 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d109      	bne.n	800151a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e08e      	b.n	8001628 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800150a:	4b4a      	ldr	r3, [pc, #296]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e086      	b.n	8001628 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800151a:	4b46      	ldr	r3, [pc, #280]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f023 0203 	bic.w	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4943      	ldr	r1, [pc, #268]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 8001528:	4313      	orrs	r3, r2
 800152a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800152c:	f7ff f880 	bl	8000630 <HAL_GetTick>
 8001530:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001532:	e00a      	b.n	800154a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001534:	f7ff f87c 	bl	8000630 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e06e      	b.n	8001628 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	4b3a      	ldr	r3, [pc, #232]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 020c 	and.w	r2, r3, #12
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	429a      	cmp	r2, r3
 800155a:	d1eb      	bne.n	8001534 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d010      	beq.n	800158a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	4b31      	ldr	r3, [pc, #196]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001574:	429a      	cmp	r2, r3
 8001576:	d208      	bcs.n	800158a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001578:	4b2e      	ldr	r3, [pc, #184]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	492b      	ldr	r1, [pc, #172]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800158a:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <HAL_RCC_ClockConfig+0x1ec>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d210      	bcs.n	80015ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001598:	4b25      	ldr	r3, [pc, #148]	@ (8001630 <HAL_RCC_ClockConfig+0x1ec>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 0207 	bic.w	r2, r3, #7
 80015a0:	4923      	ldr	r1, [pc, #140]	@ (8001630 <HAL_RCC_ClockConfig+0x1ec>)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a8:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <HAL_RCC_ClockConfig+0x1ec>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e036      	b.n	8001628 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	4918      	ldr	r1, [pc, #96]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d009      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015e4:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4910      	ldr	r1, [pc, #64]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015f8:	f000 f824 	bl	8001644 <HAL_RCC_GetSysClockFreq>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	490b      	ldr	r1, [pc, #44]	@ (8001638 <HAL_RCC_ClockConfig+0x1f4>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	fa22 f303 	lsr.w	r3, r2, r3
 8001614:	4a09      	ldr	r2, [pc, #36]	@ (800163c <HAL_RCC_ClockConfig+0x1f8>)
 8001616:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <HAL_RCC_ClockConfig+0x1fc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe feff 	bl	8000420 <HAL_InitTick>
 8001622:	4603      	mov	r3, r0
 8001624:	72fb      	strb	r3, [r7, #11]

  return status;
 8001626:	7afb      	ldrb	r3, [r7, #11]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40022000 	.word	0x40022000
 8001634:	40021000 	.word	0x40021000
 8001638:	08004ac4 	.word	0x08004ac4
 800163c:	20000000 	.word	0x20000000
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	@ 0x24
 8001648:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001652:	4b3e      	ldr	r3, [pc, #248]	@ (800174c <HAL_RCC_GetSysClockFreq+0x108>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165c:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <HAL_RCC_GetSysClockFreq+0x108>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x34>
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d121      	bne.n	80016b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d11e      	bne.n	80016b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001678:	4b34      	ldr	r3, [pc, #208]	@ (800174c <HAL_RCC_GetSysClockFreq+0x108>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d107      	bne.n	8001694 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001684:	4b31      	ldr	r3, [pc, #196]	@ (800174c <HAL_RCC_GetSysClockFreq+0x108>)
 8001686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	e005      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001694:	4b2d      	ldr	r3, [pc, #180]	@ (800174c <HAL_RCC_GetSysClockFreq+0x108>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10d      	bne.n	80016cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d102      	bne.n	80016c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016bc:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <HAL_RCC_GetSysClockFreq+0x110>)
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	e004      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016c8:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x114>)
 80016ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	d134      	bne.n	800173c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016d2:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <HAL_RCC_GetSysClockFreq+0x108>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d003      	beq.n	80016ea <HAL_RCC_GetSysClockFreq+0xa6>
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d003      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0xac>
 80016e8:	e005      	b.n	80016f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <HAL_RCC_GetSysClockFreq+0x110>)
 80016ec:	617b      	str	r3, [r7, #20]
      break;
 80016ee:	e005      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016f0:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x114>)
 80016f2:	617b      	str	r3, [r7, #20]
      break;
 80016f4:	e002      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	617b      	str	r3, [r7, #20]
      break;
 80016fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <HAL_RCC_GetSysClockFreq+0x108>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	3301      	adds	r3, #1
 8001708:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <HAL_RCC_GetSysClockFreq+0x108>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	fb03 f202 	mul.w	r2, r3, r2
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001720:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <HAL_RCC_GetSysClockFreq+0x108>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	0e5b      	lsrs	r3, r3, #25
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	3301      	adds	r3, #1
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800173c:	69bb      	ldr	r3, [r7, #24]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	@ 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	08004adc 	.word	0x08004adc
 8001754:	00f42400 	.word	0x00f42400
 8001758:	007a1200 	.word	0x007a1200

0800175c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <HAL_RCC_GetHCLKFreq+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000000 	.word	0x20000000

08001774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001778:	f7ff fff0 	bl	800175c <HAL_RCC_GetHCLKFreq>
 800177c:	4602      	mov	r2, r0
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	4904      	ldr	r1, [pc, #16]	@ (800179c <HAL_RCC_GetPCLK1Freq+0x28>)
 800178a:	5ccb      	ldrb	r3, [r1, r3]
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001794:	4618      	mov	r0, r3
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	08004ad4 	.word	0x08004ad4

080017a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	220f      	movs	r2, #15
 80017ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_RCC_GetClockConfig+0x5c>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80017bc:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <HAL_RCC_GetClockConfig+0x5c>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <HAL_RCC_GetClockConfig+0x5c>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80017d4:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_RCC_GetClockConfig+0x5c>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	08db      	lsrs	r3, r3, #3
 80017da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <HAL_RCC_GetClockConfig+0x60>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0207 	and.w	r2, r3, #7
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	601a      	str	r2, [r3, #0]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	40022000 	.word	0x40022000

08001804 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001810:	4b2a      	ldr	r3, [pc, #168]	@ (80018bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800181c:	f7ff f9d2 	bl	8000bc4 <HAL_PWREx_GetVoltageRange>
 8001820:	6178      	str	r0, [r7, #20]
 8001822:	e014      	b.n	800184e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001824:	4b25      	ldr	r3, [pc, #148]	@ (80018bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001828:	4a24      	ldr	r2, [pc, #144]	@ (80018bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800182a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800182e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001830:	4b22      	ldr	r3, [pc, #136]	@ (80018bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800183c:	f7ff f9c2 	bl	8000bc4 <HAL_PWREx_GetVoltageRange>
 8001840:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001842:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001846:	4a1d      	ldr	r2, [pc, #116]	@ (80018bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800184c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001854:	d10b      	bne.n	800186e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b80      	cmp	r3, #128	@ 0x80
 800185a:	d919      	bls.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001860:	d902      	bls.n	8001868 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001862:	2302      	movs	r3, #2
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	e013      	b.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001868:	2301      	movs	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	e010      	b.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b80      	cmp	r3, #128	@ 0x80
 8001872:	d902      	bls.n	800187a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001874:	2303      	movs	r3, #3
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	e00a      	b.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b80      	cmp	r3, #128	@ 0x80
 800187e:	d102      	bne.n	8001886 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001880:	2302      	movs	r3, #2
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	e004      	b.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b70      	cmp	r3, #112	@ 0x70
 800188a:	d101      	bne.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800188c:	2301      	movs	r3, #1
 800188e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001890:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 0207 	bic.w	r2, r3, #7
 8001898:	4909      	ldr	r1, [pc, #36]	@ (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018a0:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d001      	beq.n	80018b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e049      	b.n	800196a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f841 	bl	8001972 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3304      	adds	r3, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4610      	mov	r0, r2
 8001904:	f000 f9e0 	bl	8001cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d001      	beq.n	80019a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e04f      	b.n	8001a40 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2202      	movs	r2, #2
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a23      	ldr	r2, [pc, #140]	@ (8001a4c <HAL_TIM_Base_Start_IT+0xc4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d01d      	beq.n	80019fe <HAL_TIM_Base_Start_IT+0x76>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ca:	d018      	beq.n	80019fe <HAL_TIM_Base_Start_IT+0x76>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a50 <HAL_TIM_Base_Start_IT+0xc8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_TIM_Base_Start_IT+0x76>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1e      	ldr	r2, [pc, #120]	@ (8001a54 <HAL_TIM_Base_Start_IT+0xcc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d00e      	beq.n	80019fe <HAL_TIM_Base_Start_IT+0x76>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a58 <HAL_TIM_Base_Start_IT+0xd0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d009      	beq.n	80019fe <HAL_TIM_Base_Start_IT+0x76>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1b      	ldr	r2, [pc, #108]	@ (8001a5c <HAL_TIM_Base_Start_IT+0xd4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d004      	beq.n	80019fe <HAL_TIM_Base_Start_IT+0x76>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a19      	ldr	r2, [pc, #100]	@ (8001a60 <HAL_TIM_Base_Start_IT+0xd8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d115      	bne.n	8001a2a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b06      	cmp	r3, #6
 8001a0e:	d015      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0xb4>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a16:	d011      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a28:	e008      	b.n	8001a3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	e000      	b.n	8001a3e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40012c00 	.word	0x40012c00
 8001a50:	40000400 	.word	0x40000400
 8001a54:	40000800 	.word	0x40000800
 8001a58:	40000c00 	.word	0x40000c00
 8001a5c:	40013400 	.word	0x40013400
 8001a60:	40014000 	.word	0x40014000
 8001a64:	00010007 	.word	0x00010007

08001a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d020      	beq.n	8001acc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01b      	beq.n	8001acc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f06f 0202 	mvn.w	r2, #2
 8001a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f8e9 	bl	8001c8a <HAL_TIM_IC_CaptureCallback>
 8001ab8:	e005      	b.n	8001ac6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8db 	bl	8001c76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f8ec 	bl	8001c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d020      	beq.n	8001b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01b      	beq.n	8001b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0204 	mvn.w	r2, #4
 8001ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8c3 	bl	8001c8a <HAL_TIM_IC_CaptureCallback>
 8001b04:	e005      	b.n	8001b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f8b5 	bl	8001c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f8c6 	bl	8001c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d020      	beq.n	8001b64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01b      	beq.n	8001b64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f06f 0208 	mvn.w	r2, #8
 8001b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2204      	movs	r2, #4
 8001b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f89d 	bl	8001c8a <HAL_TIM_IC_CaptureCallback>
 8001b50:	e005      	b.n	8001b5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f88f 	bl	8001c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f8a0 	bl	8001c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d020      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01b      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f06f 0210 	mvn.w	r2, #16
 8001b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2208      	movs	r2, #8
 8001b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f877 	bl	8001c8a <HAL_TIM_IC_CaptureCallback>
 8001b9c:	e005      	b.n	8001baa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f869 	bl	8001c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f87a 	bl	8001c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00c      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d007      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0201 	mvn.w	r2, #1
 8001bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe fbe6 	bl	80003a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d104      	bne.n	8001be8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00c      	beq.n	8001c02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f913 	bl	8001e28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00c      	beq.n	8001c26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f90b 	bl	8001e3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00c      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d007      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f834 	bl	8001cb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f003 0320 	and.w	r3, r3, #32
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00c      	beq.n	8001c6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f06f 0220 	mvn.w	r2, #32
 8001c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f8d3 	bl	8001e14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a46      	ldr	r2, [pc, #280]	@ (8001df4 <TIM_Base_SetConfig+0x12c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d013      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ce6:	d00f      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a43      	ldr	r2, [pc, #268]	@ (8001df8 <TIM_Base_SetConfig+0x130>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00b      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a42      	ldr	r2, [pc, #264]	@ (8001dfc <TIM_Base_SetConfig+0x134>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a41      	ldr	r2, [pc, #260]	@ (8001e00 <TIM_Base_SetConfig+0x138>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d003      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a40      	ldr	r2, [pc, #256]	@ (8001e04 <TIM_Base_SetConfig+0x13c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d108      	bne.n	8001d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a35      	ldr	r2, [pc, #212]	@ (8001df4 <TIM_Base_SetConfig+0x12c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01f      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d28:	d01b      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a32      	ldr	r2, [pc, #200]	@ (8001df8 <TIM_Base_SetConfig+0x130>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d017      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a31      	ldr	r2, [pc, #196]	@ (8001dfc <TIM_Base_SetConfig+0x134>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a30      	ldr	r2, [pc, #192]	@ (8001e00 <TIM_Base_SetConfig+0x138>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00f      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a2f      	ldr	r2, [pc, #188]	@ (8001e04 <TIM_Base_SetConfig+0x13c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00b      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001e08 <TIM_Base_SetConfig+0x140>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d007      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a2d      	ldr	r2, [pc, #180]	@ (8001e0c <TIM_Base_SetConfig+0x144>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d003      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e10 <TIM_Base_SetConfig+0x148>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d108      	bne.n	8001d74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a16      	ldr	r2, [pc, #88]	@ (8001df4 <TIM_Base_SetConfig+0x12c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00f      	beq.n	8001dc0 <TIM_Base_SetConfig+0xf8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a18      	ldr	r2, [pc, #96]	@ (8001e04 <TIM_Base_SetConfig+0x13c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00b      	beq.n	8001dc0 <TIM_Base_SetConfig+0xf8>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a17      	ldr	r2, [pc, #92]	@ (8001e08 <TIM_Base_SetConfig+0x140>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d007      	beq.n	8001dc0 <TIM_Base_SetConfig+0xf8>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a16      	ldr	r2, [pc, #88]	@ (8001e0c <TIM_Base_SetConfig+0x144>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d003      	beq.n	8001dc0 <TIM_Base_SetConfig+0xf8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a15      	ldr	r2, [pc, #84]	@ (8001e10 <TIM_Base_SetConfig+0x148>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d103      	bne.n	8001dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d105      	bne.n	8001de6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f023 0201 	bic.w	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	611a      	str	r2, [r3, #16]
  }
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40012c00 	.word	0x40012c00
 8001df8:	40000400 	.word	0x40000400
 8001dfc:	40000800 	.word	0x40000800
 8001e00:	40000c00 	.word	0x40000c00
 8001e04:	40013400 	.word	0x40013400
 8001e08:	40014000 	.word	0x40014000
 8001e0c:	40014400 	.word	0x40014400
 8001e10:	40014800 	.word	0x40014800

08001e14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <__NVIC_SetPriority>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db0a      	blt.n	8001e7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	490c      	ldr	r1, [pc, #48]	@ (8001e9c <__NVIC_SetPriority+0x4c>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	440b      	add	r3, r1
 8001e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e78:	e00a      	b.n	8001e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4908      	ldr	r1, [pc, #32]	@ (8001ea0 <__NVIC_SetPriority+0x50>)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	3b04      	subs	r3, #4
 8001e88:	0112      	lsls	r2, r2, #4
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	761a      	strb	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <SysTick_Handler+0x1c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001eac:	f001 fd18 	bl	80038e0 <xTaskGetSchedulerState>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d001      	beq.n	8001eba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001eb6:	f002 fb0f 	bl	80044d8 <xPortSysTickHandler>
  }
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	f06f 0004 	mvn.w	r0, #4
 8001ece:	f7ff ffbf 	bl	8001e50 <__NVIC_SetPriority>
#endif
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ede:	f3ef 8305 	mrs	r3, IPSR
 8001ee2:	603b      	str	r3, [r7, #0]
  return(result);
 8001ee4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001eea:	f06f 0305 	mvn.w	r3, #5
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	e00c      	b.n	8001f0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <osKernelInitialize+0x44>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d105      	bne.n	8001f06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <osKernelInitialize+0x44>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	e002      	b.n	8001f0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f0c:	687b      	ldr	r3, [r7, #4]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000080 	.word	0x20000080

08001f20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f26:	f3ef 8305 	mrs	r3, IPSR
 8001f2a:	603b      	str	r3, [r7, #0]
  return(result);
 8001f2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f32:	f06f 0305 	mvn.w	r3, #5
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	e010      	b.n	8001f5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <osKernelStart+0x48>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d109      	bne.n	8001f56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f42:	f7ff ffbf 	bl	8001ec4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <osKernelStart+0x48>)
 8001f48:	2202      	movs	r2, #2
 8001f4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f4c:	f001 f87a 	bl	8003044 <vTaskStartScheduler>
      stat = osOK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	e002      	b.n	8001f5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f5c:	687b      	ldr	r3, [r7, #4]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000080 	.word	0x20000080

08001f6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	@ 0x38
 8001f70:	af04      	add	r7, sp, #16
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f7c:	f3ef 8305 	mrs	r3, IPSR
 8001f80:	617b      	str	r3, [r7, #20]
  return(result);
 8001f82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d17e      	bne.n	8002086 <osThreadNew+0x11a>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d07b      	beq.n	8002086 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f8e:	2380      	movs	r3, #128	@ 0x80
 8001f90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f92:	2318      	movs	r3, #24
 8001f94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d045      	beq.n	8002032 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <osThreadNew+0x48>
        name = attr->name;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <osThreadNew+0x6e>
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	2b38      	cmp	r3, #56	@ 0x38
 8001fcc:	d805      	bhi.n	8001fda <osThreadNew+0x6e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <osThreadNew+0x72>
        return (NULL);
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e054      	b.n	8002088 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00e      	beq.n	8002014 <osThreadNew+0xa8>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b5b      	cmp	r3, #91	@ 0x5b
 8001ffc:	d90a      	bls.n	8002014 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <osThreadNew+0xa8>
        mem = 1;
 800200e:	2301      	movs	r3, #1
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	e010      	b.n	8002036 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10c      	bne.n	8002036 <osThreadNew+0xca>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d108      	bne.n	8002036 <osThreadNew+0xca>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d104      	bne.n	8002036 <osThreadNew+0xca>
          mem = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	e001      	b.n	8002036 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d110      	bne.n	800205e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002044:	9202      	str	r2, [sp, #8]
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	6a3a      	ldr	r2, [r7, #32]
 8002050:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 fe1a 	bl	8002c8c <xTaskCreateStatic>
 8002058:	4603      	mov	r3, r0
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	e013      	b.n	8002086 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d110      	bne.n	8002086 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	b29a      	uxth	r2, r3
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 fe68 	bl	8002d4c <xTaskCreate>
 800207c:	4603      	mov	r3, r0
 800207e:	2b01      	cmp	r3, #1
 8002080:	d001      	beq.n	8002086 <osThreadNew+0x11a>
            hTask = NULL;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002086:	693b      	ldr	r3, [r7, #16]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3728      	adds	r7, #40	@ 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002098:	f3ef 8305 	mrs	r3, IPSR
 800209c:	60bb      	str	r3, [r7, #8]
  return(result);
 800209e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <osDelay+0x1c>
    stat = osErrorISR;
 80020a4:	f06f 0305 	mvn.w	r3, #5
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	e007      	b.n	80020bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 ff8e 	bl	8002fd8 <vTaskDelay>
    }
  }

  return (stat);
 80020bc:	68fb      	ldr	r3, [r7, #12]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4a07      	ldr	r2, [pc, #28]	@ (80020f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80020d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	4a06      	ldr	r2, [pc, #24]	@ (80020f8 <vApplicationGetIdleTaskMemory+0x30>)
 80020de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2280      	movs	r2, #128	@ 0x80
 80020e4:	601a      	str	r2, [r3, #0]
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000084 	.word	0x20000084
 80020f8:	200000e0 	.word	0x200000e0

080020fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4a07      	ldr	r2, [pc, #28]	@ (8002128 <vApplicationGetTimerTaskMemory+0x2c>)
 800210c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4a06      	ldr	r2, [pc, #24]	@ (800212c <vApplicationGetTimerTaskMemory+0x30>)
 8002112:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800211a:	601a      	str	r2, [r3, #0]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	200002e0 	.word	0x200002e0
 800212c:	2000033c 	.word	0x2000033c

08002130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 0208 	add.w	r2, r3, #8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f103 0208 	add.w	r2, r3, #8
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f103 0208 	add.w	r2, r3, #8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800218a:	b480      	push	{r7}
 800218c:	b085      	sub	sp, #20
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d103      	bne.n	80021f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e00c      	b.n	800220c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3308      	adds	r3, #8
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e002      	b.n	8002200 <vListInsert+0x2e>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	429a      	cmp	r2, r3
 800220a:	d2f6      	bcs.n	80021fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	601a      	str	r2, [r3, #0]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6892      	ldr	r2, [r2, #8]
 800225a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6852      	ldr	r2, [r2, #4]
 8002264:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	d103      	bne.n	8002278 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1e5a      	subs	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10b      	bne.n	80022c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022be:	bf00      	nop
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022c4:	f002 f878 	bl	80043b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d0:	68f9      	ldr	r1, [r7, #12]
 80022d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	441a      	add	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f4:	3b01      	subs	r3, #1
 80022f6:	68f9      	ldr	r1, [r7, #12]
 80022f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	441a      	add	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	22ff      	movs	r2, #255	@ 0xff
 8002308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	22ff      	movs	r2, #255	@ 0xff
 8002310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d114      	bne.n	8002344 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01a      	beq.n	8002358 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3310      	adds	r3, #16
 8002326:	4618      	mov	r0, r3
 8002328:	f001 f91a 	bl	8003560 <xTaskRemoveFromEventList>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d012      	beq.n	8002358 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002332:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <xQueueGenericReset+0xd0>)
 8002334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f3bf 8f4f 	dsb	sy
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	e009      	b.n	8002358 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3310      	adds	r3, #16
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fef1 	bl	8002130 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3324      	adds	r3, #36	@ 0x24
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff feec 	bl	8002130 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002358:	f002 f860 	bl	800441c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800235c:	2301      	movs	r3, #1
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000ed04 	.word	0xe000ed04

0800236c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08e      	sub	sp, #56	@ 0x38
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10b      	bne.n	80023b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800239e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	e7fd      	b.n	80023b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <xQueueGenericCreateStatic+0x56>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <xQueueGenericCreateStatic+0x5a>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <xQueueGenericCreateStatic+0x5c>
 80023c6:	2300      	movs	r3, #0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80023cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d0:	f383 8811 	msr	BASEPRI, r3
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	623b      	str	r3, [r7, #32]
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <xQueueGenericCreateStatic+0x84>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <xQueueGenericCreateStatic+0x88>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <xQueueGenericCreateStatic+0x8a>
 80023f4:	2300      	movs	r3, #0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10b      	bne.n	8002412 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80023fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023fe:	f383 8811 	msr	BASEPRI, r3
 8002402:	f3bf 8f6f 	isb	sy
 8002406:	f3bf 8f4f 	dsb	sy
 800240a:	61fb      	str	r3, [r7, #28]
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	e7fd      	b.n	800240e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002412:	2350      	movs	r3, #80	@ 0x50
 8002414:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b50      	cmp	r3, #80	@ 0x50
 800241a:	d00b      	beq.n	8002434 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	61bb      	str	r3, [r7, #24]
}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002434:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800243a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00d      	beq.n	800245c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002448:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800244c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f805 	bl	8002466 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800245c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800245e:	4618      	mov	r0, r3
 8002460:	3730      	adds	r7, #48	@ 0x30
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e002      	b.n	8002488 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002494:	2101      	movs	r1, #1
 8002496:	69b8      	ldr	r0, [r7, #24]
 8002498:	f7ff fefe 	bl	8002298 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	@ 0x38
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024ba:	2300      	movs	r3, #0
 80024bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80024c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10b      	bne.n	80024e0 <xQueueGenericSend+0x34>
	__asm volatile
 80024c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80024da:	bf00      	nop
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d103      	bne.n	80024ee <xQueueGenericSend+0x42>
 80024e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <xQueueGenericSend+0x46>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <xQueueGenericSend+0x48>
 80024f2:	2300      	movs	r3, #0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10b      	bne.n	8002510 <xQueueGenericSend+0x64>
	__asm volatile
 80024f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d103      	bne.n	800251e <xQueueGenericSend+0x72>
 8002516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <xQueueGenericSend+0x76>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <xQueueGenericSend+0x78>
 8002522:	2300      	movs	r3, #0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10b      	bne.n	8002540 <xQueueGenericSend+0x94>
	__asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	623b      	str	r3, [r7, #32]
}
 800253a:	bf00      	nop
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002540:	f001 f9ce 	bl	80038e0 <xTaskGetSchedulerState>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <xQueueGenericSend+0xa4>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <xQueueGenericSend+0xa8>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <xQueueGenericSend+0xaa>
 8002554:	2300      	movs	r3, #0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10b      	bne.n	8002572 <xQueueGenericSend+0xc6>
	__asm volatile
 800255a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800255e:	f383 8811 	msr	BASEPRI, r3
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	61fb      	str	r3, [r7, #28]
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	e7fd      	b.n	800256e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002572:	f001 ff21 	bl	80043b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800257a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <xQueueGenericSend+0xdc>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d129      	bne.n	80025dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800258e:	f000 fa0f 	bl	80029b0 <prvCopyDataToQueue>
 8002592:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	2b00      	cmp	r3, #0
 800259a:	d010      	beq.n	80025be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800259c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259e:	3324      	adds	r3, #36	@ 0x24
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 ffdd 	bl	8003560 <xTaskRemoveFromEventList>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025ac:	4b3f      	ldr	r3, [pc, #252]	@ (80026ac <xQueueGenericSend+0x200>)
 80025ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	e00a      	b.n	80025d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025c4:	4b39      	ldr	r3, [pc, #228]	@ (80026ac <xQueueGenericSend+0x200>)
 80025c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025d4:	f001 ff22 	bl	800441c <vPortExitCritical>
				return pdPASS;
 80025d8:	2301      	movs	r3, #1
 80025da:	e063      	b.n	80026a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d103      	bne.n	80025ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025e2:	f001 ff1b 	bl	800441c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e05c      	b.n	80026a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d106      	bne.n	80025fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 f817 	bl	8003628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025fa:	2301      	movs	r3, #1
 80025fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025fe:	f001 ff0d 	bl	800441c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002602:	f000 fd87 	bl	8003114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002606:	f001 fed7 	bl	80043b8 <vPortEnterCritical>
 800260a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002610:	b25b      	sxtb	r3, r3
 8002612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002616:	d103      	bne.n	8002620 <xQueueGenericSend+0x174>
 8002618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002622:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002626:	b25b      	sxtb	r3, r3
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262c:	d103      	bne.n	8002636 <xQueueGenericSend+0x18a>
 800262e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002636:	f001 fef1 	bl	800441c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800263a:	1d3a      	adds	r2, r7, #4
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f001 f806 	bl	8003654 <xTaskCheckForTimeOut>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d124      	bne.n	8002698 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800264e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002650:	f000 faa6 	bl	8002ba0 <prvIsQueueFull>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d018      	beq.n	800268c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800265a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265c:	3310      	adds	r3, #16
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f000 ff2a 	bl	80034bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800266a:	f000 fa31 	bl	8002ad0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800266e:	f000 fd5f 	bl	8003130 <xTaskResumeAll>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	f47f af7c 	bne.w	8002572 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800267a:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <xQueueGenericSend+0x200>)
 800267c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	f3bf 8f6f 	isb	sy
 800268a:	e772      	b.n	8002572 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800268c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800268e:	f000 fa1f 	bl	8002ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002692:	f000 fd4d 	bl	8003130 <xTaskResumeAll>
 8002696:	e76c      	b.n	8002572 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800269a:	f000 fa19 	bl	8002ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800269e:	f000 fd47 	bl	8003130 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3738      	adds	r7, #56	@ 0x38
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	e000ed04 	.word	0xe000ed04

080026b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b090      	sub	sp, #64	@ 0x40
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80026c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80026c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d103      	bne.n	80026ee <xQueueGenericSendFromISR+0x3e>
 80026e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <xQueueGenericSendFromISR+0x42>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <xQueueGenericSendFromISR+0x44>
 80026f2:	2300      	movs	r3, #0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10b      	bne.n	8002710 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80026f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800270a:	bf00      	nop
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d103      	bne.n	800271e <xQueueGenericSendFromISR+0x6e>
 8002716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <xQueueGenericSendFromISR+0x72>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <xQueueGenericSendFromISR+0x74>
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	623b      	str	r3, [r7, #32]
}
 800273a:	bf00      	nop
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002740:	f001 ff1a 	bl	8004578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002744:	f3ef 8211 	mrs	r2, BASEPRI
 8002748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	61fa      	str	r2, [r7, #28]
 800275a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800275c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800275e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002762:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002768:	429a      	cmp	r2, r3
 800276a:	d302      	bcc.n	8002772 <xQueueGenericSendFromISR+0xc2>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d12f      	bne.n	80027d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002778:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800277c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002780:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002788:	f000 f912 	bl	80029b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800278c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d112      	bne.n	80027bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800279e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a0:	3324      	adds	r3, #36	@ 0x24
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fedc 	bl	8003560 <xTaskRemoveFromEventList>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00e      	beq.n	80027cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e007      	b.n	80027cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027c0:	3301      	adds	r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	b25a      	sxtb	r2, r3
 80027c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80027cc:	2301      	movs	r3, #1
 80027ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80027d0:	e001      	b.n	80027d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3740      	adds	r7, #64	@ 0x40
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	@ 0x30
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <xQueueReceive+0x32>
	__asm volatile
 8002806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800280a:	f383 8811 	msr	BASEPRI, r3
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	f3bf 8f4f 	dsb	sy
 8002816:	623b      	str	r3, [r7, #32]
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	e7fd      	b.n	800281a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <xQueueReceive+0x40>
 8002824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <xQueueReceive+0x44>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <xQueueReceive+0x46>
 8002830:	2300      	movs	r3, #0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10b      	bne.n	800284e <xQueueReceive+0x62>
	__asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	61fb      	str	r3, [r7, #28]
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	e7fd      	b.n	800284a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800284e:	f001 f847 	bl	80038e0 <xTaskGetSchedulerState>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <xQueueReceive+0x72>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <xQueueReceive+0x76>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <xQueueReceive+0x78>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <xQueueReceive+0x94>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	61bb      	str	r3, [r7, #24]
}
 800287a:	bf00      	nop
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002880:	f001 fd9a 	bl	80043b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01f      	beq.n	80028d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002894:	f000 f8f6 	bl	8002a84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	1e5a      	subs	r2, r3, #1
 800289c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00f      	beq.n	80028c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028aa:	3310      	adds	r3, #16
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fe57 	bl	8003560 <xTaskRemoveFromEventList>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028b8:	4b3c      	ldr	r3, [pc, #240]	@ (80029ac <xQueueReceive+0x1c0>)
 80028ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028c8:	f001 fda8 	bl	800441c <vPortExitCritical>
				return pdPASS;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e069      	b.n	80029a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d103      	bne.n	80028de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028d6:	f001 fda1 	bl	800441c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028da:	2300      	movs	r3, #0
 80028dc:	e062      	b.n	80029a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d106      	bne.n	80028f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028e4:	f107 0310 	add.w	r3, r7, #16
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fe9d 	bl	8003628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028ee:	2301      	movs	r3, #1
 80028f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028f2:	f001 fd93 	bl	800441c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028f6:	f000 fc0d 	bl	8003114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028fa:	f001 fd5d 	bl	80043b8 <vPortEnterCritical>
 80028fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002900:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002904:	b25b      	sxtb	r3, r3
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290a:	d103      	bne.n	8002914 <xQueueReceive+0x128>
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002916:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800291a:	b25b      	sxtb	r3, r3
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d103      	bne.n	800292a <xQueueReceive+0x13e>
 8002922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800292a:	f001 fd77 	bl	800441c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800292e:	1d3a      	adds	r2, r7, #4
 8002930:	f107 0310 	add.w	r3, r7, #16
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fe8c 	bl	8003654 <xTaskCheckForTimeOut>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d123      	bne.n	800298a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002944:	f000 f916 	bl	8002b74 <prvIsQueueEmpty>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d017      	beq.n	800297e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800294e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002950:	3324      	adds	r3, #36	@ 0x24
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fdb0 	bl	80034bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800295c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800295e:	f000 f8b7 	bl	8002ad0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002962:	f000 fbe5 	bl	8003130 <xTaskResumeAll>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d189      	bne.n	8002880 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800296c:	4b0f      	ldr	r3, [pc, #60]	@ (80029ac <xQueueReceive+0x1c0>)
 800296e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	e780      	b.n	8002880 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800297e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002980:	f000 f8a6 	bl	8002ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002984:	f000 fbd4 	bl	8003130 <xTaskResumeAll>
 8002988:	e77a      	b.n	8002880 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800298a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800298c:	f000 f8a0 	bl	8002ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002990:	f000 fbce 	bl	8003130 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002994:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002996:	f000 f8ed 	bl	8002b74 <prvIsQueueEmpty>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	f43f af6f 	beq.w	8002880 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3730      	adds	r7, #48	@ 0x30
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	e000ed04 	.word	0xe000ed04

080029b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10d      	bne.n	80029ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d14d      	bne.n	8002a72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 ff9e 	bl	800391c <xTaskPriorityDisinherit>
 80029e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	e043      	b.n	8002a72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d119      	bne.n	8002a24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6858      	ldr	r0, [r3, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	461a      	mov	r2, r3
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	f002 f818 	bl	8004a30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	441a      	add	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d32b      	bcc.n	8002a72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	e026      	b.n	8002a72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	68d8      	ldr	r0, [r3, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	f001 fffe 	bl	8004a30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	425b      	negs	r3, r3
 8002a3e:	441a      	add	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d207      	bcs.n	8002a60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	425b      	negs	r3, r3
 8002a5a:	441a      	add	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d105      	bne.n	8002a72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002a7a:	697b      	ldr	r3, [r7, #20]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d018      	beq.n	8002ac8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	441a      	add	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d303      	bcc.n	8002ab8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68d9      	ldr	r1, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6838      	ldr	r0, [r7, #0]
 8002ac4:	f001 ffb4 	bl	8004a30 <memcpy>
	}
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ad8:	f001 fc6e 	bl	80043b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ae2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ae4:	e011      	b.n	8002b0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d012      	beq.n	8002b14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3324      	adds	r3, #36	@ 0x24
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fd34 	bl	8003560 <xTaskRemoveFromEventList>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002afe:	f000 fe0d 	bl	800371c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	dce9      	bgt.n	8002ae6 <prvUnlockQueue+0x16>
 8002b12:	e000      	b.n	8002b16 <prvUnlockQueue+0x46>
					break;
 8002b14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	22ff      	movs	r2, #255	@ 0xff
 8002b1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002b1e:	f001 fc7d 	bl	800441c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b22:	f001 fc49 	bl	80043b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b2e:	e011      	b.n	8002b54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d012      	beq.n	8002b5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3310      	adds	r3, #16
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fd0f 	bl	8003560 <xTaskRemoveFromEventList>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b48:	f000 fde8 	bl	800371c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b4c:	7bbb      	ldrb	r3, [r7, #14]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	dce9      	bgt.n	8002b30 <prvUnlockQueue+0x60>
 8002b5c:	e000      	b.n	8002b60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	22ff      	movs	r2, #255	@ 0xff
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002b68:	f001 fc58 	bl	800441c <vPortExitCritical>
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b7c:	f001 fc1c 	bl	80043b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	e001      	b.n	8002b92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b92:	f001 fc43 	bl	800441c <vPortExitCritical>

	return xReturn;
 8002b96:	68fb      	ldr	r3, [r7, #12]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ba8:	f001 fc06 	bl	80043b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d102      	bne.n	8002bbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e001      	b.n	8002bc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bc2:	f001 fc2b 	bl	800441c <vPortExitCritical>

	return xReturn;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	e014      	b.n	8002c0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002be0:	4a0f      	ldr	r2, [pc, #60]	@ (8002c20 <vQueueAddToRegistry+0x50>)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bec:	490c      	ldr	r1, [pc, #48]	@ (8002c20 <vQueueAddToRegistry+0x50>)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c20 <vQueueAddToRegistry+0x50>)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c02:	e006      	b.n	8002c12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3301      	adds	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b07      	cmp	r3, #7
 8002c0e:	d9e7      	bls.n	8002be0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	2000073c 	.word	0x2000073c

08002c24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c34:	f001 fbc0 	bl	80043b8 <vPortEnterCritical>
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c3e:	b25b      	sxtb	r3, r3
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c44:	d103      	bne.n	8002c4e <vQueueWaitForMessageRestricted+0x2a>
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c54:	b25b      	sxtb	r3, r3
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d103      	bne.n	8002c64 <vQueueWaitForMessageRestricted+0x40>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c64:	f001 fbda 	bl	800441c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d106      	bne.n	8002c7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	3324      	adds	r3, #36	@ 0x24
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fc45 	bl	8003508 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f7ff ff26 	bl	8002ad0 <prvUnlockQueue>
	}
 8002c84:	bf00      	nop
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08e      	sub	sp, #56	@ 0x38
 8002c90:	af04      	add	r7, sp, #16
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	623b      	str	r3, [r7, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	61fb      	str	r3, [r7, #28]
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	e7fd      	b.n	8002cd2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002cd6:	235c      	movs	r3, #92	@ 0x5c
 8002cd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b5c      	cmp	r3, #92	@ 0x5c
 8002cde:	d00b      	beq.n	8002cf8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	61bb      	str	r3, [r7, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002cf8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01e      	beq.n	8002d3e <xTaskCreateStatic+0xb2>
 8002d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d01b      	beq.n	8002d3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d18:	2300      	movs	r3, #0
 8002d1a:	9303      	str	r3, [sp, #12]
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	9302      	str	r3, [sp, #8]
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f850 	bl	8002dd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d38:	f000 f8de 	bl	8002ef8 <prvAddNewTaskToReadyList>
 8002d3c:	e001      	b.n	8002d42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d42:	697b      	ldr	r3, [r7, #20]
	}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3728      	adds	r7, #40	@ 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08c      	sub	sp, #48	@ 0x30
 8002d50:	af04      	add	r7, sp, #16
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 fc4b 	bl	80045fc <pvPortMalloc>
 8002d66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00e      	beq.n	8002d8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d6e:	205c      	movs	r0, #92	@ 0x5c
 8002d70:	f001 fc44 	bl	80045fc <pvPortMalloc>
 8002d74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d82:	e005      	b.n	8002d90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d84:	6978      	ldr	r0, [r7, #20]
 8002d86:	f001 fd07 	bl	8004798 <vPortFree>
 8002d8a:	e001      	b.n	8002d90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d017      	beq.n	8002dc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d9e:	88fa      	ldrh	r2, [r7, #6]
 8002da0:	2300      	movs	r3, #0
 8002da2:	9303      	str	r3, [sp, #12]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f80e 	bl	8002dd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dba:	69f8      	ldr	r0, [r7, #28]
 8002dbc:	f000 f89c 	bl	8002ef8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	e002      	b.n	8002dcc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002dcc:	69bb      	ldr	r3, [r7, #24]
	}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b088      	sub	sp, #32
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	461a      	mov	r2, r3
 8002dee:	21a5      	movs	r1, #165	@ 0xa5
 8002df0:	f001 fdf2 	bl	80049d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	f023 0307 	bic.w	r3, r3, #7
 8002e0c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	617b      	str	r3, [r7, #20]
}
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
 8002e2e:	e7fd      	b.n	8002e2c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01f      	beq.n	8002e76 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e012      	b.n	8002e62 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	4413      	add	r3, r2
 8002e42:	7819      	ldrb	r1, [r3, #0]
 8002e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4413      	add	r3, r2
 8002e4a:	3334      	adds	r3, #52	@ 0x34
 8002e4c:	460a      	mov	r2, r1
 8002e4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	4413      	add	r3, r2
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d006      	beq.n	8002e6a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	2b0f      	cmp	r3, #15
 8002e66:	d9e9      	bls.n	8002e3c <prvInitialiseNewTask+0x66>
 8002e68:	e000      	b.n	8002e6c <prvInitialiseNewTask+0x96>
			{
				break;
 8002e6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e74:	e003      	b.n	8002e7e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e80:	2b37      	cmp	r3, #55	@ 0x37
 8002e82:	d901      	bls.n	8002e88 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e84:	2337      	movs	r3, #55	@ 0x37
 8002e86:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e92:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	2200      	movs	r2, #0
 8002e98:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff f966 	bl	8002170 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea6:	3318      	adds	r3, #24
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff f961 	bl	8002170 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ec2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	68f9      	ldr	r1, [r7, #12]
 8002ed6:	69b8      	ldr	r0, [r7, #24]
 8002ed8:	f001 f93e 	bl	8004158 <pxPortInitialiseStack>
 8002edc:	4602      	mov	r2, r0
 8002ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002eee:	bf00      	nop
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f00:	f001 fa5a 	bl	80043b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f04:	4b2d      	ldr	r3, [pc, #180]	@ (8002fbc <prvAddNewTaskToReadyList+0xc4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	4a2c      	ldr	r2, [pc, #176]	@ (8002fbc <prvAddNewTaskToReadyList+0xc4>)
 8002f0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc0 <prvAddNewTaskToReadyList+0xc8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f16:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc0 <prvAddNewTaskToReadyList+0xc8>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f1c:	4b27      	ldr	r3, [pc, #156]	@ (8002fbc <prvAddNewTaskToReadyList+0xc4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d110      	bne.n	8002f46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f24:	f000 fc1e 	bl	8003764 <prvInitialiseTaskLists>
 8002f28:	e00d      	b.n	8002f46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f2a:	4b26      	ldr	r3, [pc, #152]	@ (8002fc4 <prvAddNewTaskToReadyList+0xcc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f32:	4b23      	ldr	r3, [pc, #140]	@ (8002fc0 <prvAddNewTaskToReadyList+0xc8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d802      	bhi.n	8002f46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f40:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc0 <prvAddNewTaskToReadyList+0xc8>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f46:	4b20      	ldr	r3, [pc, #128]	@ (8002fc8 <prvAddNewTaskToReadyList+0xd0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc8 <prvAddNewTaskToReadyList+0xd0>)
 8002f4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <prvAddNewTaskToReadyList+0xd0>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fcc <prvAddNewTaskToReadyList+0xd4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d903      	bls.n	8002f6c <prvAddNewTaskToReadyList+0x74>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f68:	4a18      	ldr	r2, [pc, #96]	@ (8002fcc <prvAddNewTaskToReadyList+0xd4>)
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4a15      	ldr	r2, [pc, #84]	@ (8002fd0 <prvAddNewTaskToReadyList+0xd8>)
 8002f7a:	441a      	add	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f7ff f901 	bl	800218a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f88:	f001 fa48 	bl	800441c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc4 <prvAddNewTaskToReadyList+0xcc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f94:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <prvAddNewTaskToReadyList+0xc8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d207      	bcs.n	8002fb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd4 <prvAddNewTaskToReadyList+0xdc>)
 8002fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000c50 	.word	0x20000c50
 8002fc0:	2000077c 	.word	0x2000077c
 8002fc4:	20000c5c 	.word	0x20000c5c
 8002fc8:	20000c6c 	.word	0x20000c6c
 8002fcc:	20000c58 	.word	0x20000c58
 8002fd0:	20000780 	.word	0x20000780
 8002fd4:	e000ed04 	.word	0xe000ed04

08002fd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d018      	beq.n	800301c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002fea:	4b14      	ldr	r3, [pc, #80]	@ (800303c <vTaskDelay+0x64>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <vTaskDelay+0x32>
	__asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	60bb      	str	r3, [r7, #8]
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	e7fd      	b.n	8003006 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800300a:	f000 f883 	bl	8003114 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800300e:	2100      	movs	r1, #0
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fcf3 	bl	80039fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003016:	f000 f88b 	bl	8003130 <xTaskResumeAll>
 800301a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d107      	bne.n	8003032 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003022:	4b07      	ldr	r3, [pc, #28]	@ (8003040 <vTaskDelay+0x68>)
 8003024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000c78 	.word	0x20000c78
 8003040:	e000ed04 	.word	0xe000ed04

08003044 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	@ 0x28
 8003048:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800304e:	2300      	movs	r3, #0
 8003050:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003052:	463a      	mov	r2, r7
 8003054:	1d39      	adds	r1, r7, #4
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff f834 	bl	80020c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003060:	6839      	ldr	r1, [r7, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	9202      	str	r2, [sp, #8]
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	2300      	movs	r3, #0
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2300      	movs	r3, #0
 8003070:	460a      	mov	r2, r1
 8003072:	4922      	ldr	r1, [pc, #136]	@ (80030fc <vTaskStartScheduler+0xb8>)
 8003074:	4822      	ldr	r0, [pc, #136]	@ (8003100 <vTaskStartScheduler+0xbc>)
 8003076:	f7ff fe09 	bl	8002c8c <xTaskCreateStatic>
 800307a:	4603      	mov	r3, r0
 800307c:	4a21      	ldr	r2, [pc, #132]	@ (8003104 <vTaskStartScheduler+0xc0>)
 800307e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003080:	4b20      	ldr	r3, [pc, #128]	@ (8003104 <vTaskStartScheduler+0xc0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003088:	2301      	movs	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	e001      	b.n	8003092 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d102      	bne.n	800309e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003098:	f000 fd04 	bl	8003aa4 <xTimerCreateTimerTask>
 800309c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d116      	bne.n	80030d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80030a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	613b      	str	r3, [r7, #16]
}
 80030b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030b8:	4b13      	ldr	r3, [pc, #76]	@ (8003108 <vTaskStartScheduler+0xc4>)
 80030ba:	f04f 32ff 	mov.w	r2, #4294967295
 80030be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030c0:	4b12      	ldr	r3, [pc, #72]	@ (800310c <vTaskStartScheduler+0xc8>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030c6:	4b12      	ldr	r3, [pc, #72]	@ (8003110 <vTaskStartScheduler+0xcc>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030cc:	f001 f8d0 	bl	8004270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030d0:	e00f      	b.n	80030f2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d10b      	bne.n	80030f2 <vTaskStartScheduler+0xae>
	__asm volatile
 80030da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	60fb      	str	r3, [r7, #12]
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	e7fd      	b.n	80030ee <vTaskStartScheduler+0xaa>
}
 80030f2:	bf00      	nop
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	08004a88 	.word	0x08004a88
 8003100:	08003735 	.word	0x08003735
 8003104:	20000c74 	.word	0x20000c74
 8003108:	20000c70 	.word	0x20000c70
 800310c:	20000c5c 	.word	0x20000c5c
 8003110:	20000c54 	.word	0x20000c54

08003114 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003118:	4b04      	ldr	r3, [pc, #16]	@ (800312c <vTaskSuspendAll+0x18>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	4a03      	ldr	r2, [pc, #12]	@ (800312c <vTaskSuspendAll+0x18>)
 8003120:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	20000c78 	.word	0x20000c78

08003130 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800313e:	4b42      	ldr	r3, [pc, #264]	@ (8003248 <xTaskResumeAll+0x118>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <xTaskResumeAll+0x2e>
	__asm volatile
 8003146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800314a:	f383 8811 	msr	BASEPRI, r3
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	603b      	str	r3, [r7, #0]
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	e7fd      	b.n	800315a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800315e:	f001 f92b 	bl	80043b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003162:	4b39      	ldr	r3, [pc, #228]	@ (8003248 <xTaskResumeAll+0x118>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3b01      	subs	r3, #1
 8003168:	4a37      	ldr	r2, [pc, #220]	@ (8003248 <xTaskResumeAll+0x118>)
 800316a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800316c:	4b36      	ldr	r3, [pc, #216]	@ (8003248 <xTaskResumeAll+0x118>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d162      	bne.n	800323a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003174:	4b35      	ldr	r3, [pc, #212]	@ (800324c <xTaskResumeAll+0x11c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05e      	beq.n	800323a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800317c:	e02f      	b.n	80031de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800317e:	4b34      	ldr	r3, [pc, #208]	@ (8003250 <xTaskResumeAll+0x120>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3318      	adds	r3, #24
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff f85a 	bl	8002244 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3304      	adds	r3, #4
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff f855 	bl	8002244 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800319e:	4b2d      	ldr	r3, [pc, #180]	@ (8003254 <xTaskResumeAll+0x124>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d903      	bls.n	80031ae <xTaskResumeAll+0x7e>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003254 <xTaskResumeAll+0x124>)
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4a27      	ldr	r2, [pc, #156]	@ (8003258 <xTaskResumeAll+0x128>)
 80031bc:	441a      	add	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3304      	adds	r3, #4
 80031c2:	4619      	mov	r1, r3
 80031c4:	4610      	mov	r0, r2
 80031c6:	f7fe ffe0 	bl	800218a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ce:	4b23      	ldr	r3, [pc, #140]	@ (800325c <xTaskResumeAll+0x12c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d302      	bcc.n	80031de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80031d8:	4b21      	ldr	r3, [pc, #132]	@ (8003260 <xTaskResumeAll+0x130>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031de:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <xTaskResumeAll+0x120>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1cb      	bne.n	800317e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031ec:	f000 fb58 	bl	80038a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <xTaskResumeAll+0x134>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d010      	beq.n	800321e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031fc:	f000 f846 	bl	800328c <xTaskIncrementTick>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003206:	4b16      	ldr	r3, [pc, #88]	@ (8003260 <xTaskResumeAll+0x130>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f1      	bne.n	80031fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003218:	4b12      	ldr	r3, [pc, #72]	@ (8003264 <xTaskResumeAll+0x134>)
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800321e:	4b10      	ldr	r3, [pc, #64]	@ (8003260 <xTaskResumeAll+0x130>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003226:	2301      	movs	r3, #1
 8003228:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800322a:	4b0f      	ldr	r3, [pc, #60]	@ (8003268 <xTaskResumeAll+0x138>)
 800322c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800323a:	f001 f8ef 	bl	800441c <vPortExitCritical>

	return xAlreadyYielded;
 800323e:	68bb      	ldr	r3, [r7, #8]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000c78 	.word	0x20000c78
 800324c:	20000c50 	.word	0x20000c50
 8003250:	20000c10 	.word	0x20000c10
 8003254:	20000c58 	.word	0x20000c58
 8003258:	20000780 	.word	0x20000780
 800325c:	2000077c 	.word	0x2000077c
 8003260:	20000c64 	.word	0x20000c64
 8003264:	20000c60 	.word	0x20000c60
 8003268:	e000ed04 	.word	0xe000ed04

0800326c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003272:	4b05      	ldr	r3, [pc, #20]	@ (8003288 <xTaskGetTickCount+0x1c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003278:	687b      	ldr	r3, [r7, #4]
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000c54 	.word	0x20000c54

0800328c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003296:	4b4f      	ldr	r3, [pc, #316]	@ (80033d4 <xTaskIncrementTick+0x148>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 8090 	bne.w	80033c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032a0:	4b4d      	ldr	r3, [pc, #308]	@ (80033d8 <xTaskIncrementTick+0x14c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3301      	adds	r3, #1
 80032a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032a8:	4a4b      	ldr	r2, [pc, #300]	@ (80033d8 <xTaskIncrementTick+0x14c>)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d121      	bne.n	80032f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80032b4:	4b49      	ldr	r3, [pc, #292]	@ (80033dc <xTaskIncrementTick+0x150>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	603b      	str	r3, [r7, #0]
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	e7fd      	b.n	80032d2 <xTaskIncrementTick+0x46>
 80032d6:	4b41      	ldr	r3, [pc, #260]	@ (80033dc <xTaskIncrementTick+0x150>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	4b40      	ldr	r3, [pc, #256]	@ (80033e0 <xTaskIncrementTick+0x154>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a3e      	ldr	r2, [pc, #248]	@ (80033dc <xTaskIncrementTick+0x150>)
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	4a3e      	ldr	r2, [pc, #248]	@ (80033e0 <xTaskIncrementTick+0x154>)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	4b3e      	ldr	r3, [pc, #248]	@ (80033e4 <xTaskIncrementTick+0x158>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3301      	adds	r3, #1
 80032f0:	4a3c      	ldr	r2, [pc, #240]	@ (80033e4 <xTaskIncrementTick+0x158>)
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	f000 fad4 	bl	80038a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032f8:	4b3b      	ldr	r3, [pc, #236]	@ (80033e8 <xTaskIncrementTick+0x15c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d349      	bcc.n	8003396 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003302:	4b36      	ldr	r3, [pc, #216]	@ (80033dc <xTaskIncrementTick+0x150>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800330c:	4b36      	ldr	r3, [pc, #216]	@ (80033e8 <xTaskIncrementTick+0x15c>)
 800330e:	f04f 32ff 	mov.w	r2, #4294967295
 8003312:	601a      	str	r2, [r3, #0]
					break;
 8003314:	e03f      	b.n	8003396 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003316:	4b31      	ldr	r3, [pc, #196]	@ (80033dc <xTaskIncrementTick+0x150>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d203      	bcs.n	8003336 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800332e:	4a2e      	ldr	r2, [pc, #184]	@ (80033e8 <xTaskIncrementTick+0x15c>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003334:	e02f      	b.n	8003396 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3304      	adds	r3, #4
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe ff82 	bl	8002244 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	3318      	adds	r3, #24
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe ff79 	bl	8002244 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003356:	4b25      	ldr	r3, [pc, #148]	@ (80033ec <xTaskIncrementTick+0x160>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d903      	bls.n	8003366 <xTaskIncrementTick+0xda>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003362:	4a22      	ldr	r2, [pc, #136]	@ (80033ec <xTaskIncrementTick+0x160>)
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4a1f      	ldr	r2, [pc, #124]	@ (80033f0 <xTaskIncrementTick+0x164>)
 8003374:	441a      	add	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	3304      	adds	r3, #4
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f7fe ff04 	bl	800218a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003386:	4b1b      	ldr	r3, [pc, #108]	@ (80033f4 <xTaskIncrementTick+0x168>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	429a      	cmp	r2, r3
 800338e:	d3b8      	bcc.n	8003302 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003390:	2301      	movs	r3, #1
 8003392:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003394:	e7b5      	b.n	8003302 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003396:	4b17      	ldr	r3, [pc, #92]	@ (80033f4 <xTaskIncrementTick+0x168>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800339c:	4914      	ldr	r1, [pc, #80]	@ (80033f0 <xTaskIncrementTick+0x164>)
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d901      	bls.n	80033b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80033ae:	2301      	movs	r3, #1
 80033b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80033b2:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <xTaskIncrementTick+0x16c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d007      	beq.n	80033ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80033ba:	2301      	movs	r3, #1
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	e004      	b.n	80033ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80033c0:	4b0e      	ldr	r3, [pc, #56]	@ (80033fc <xTaskIncrementTick+0x170>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	4a0d      	ldr	r2, [pc, #52]	@ (80033fc <xTaskIncrementTick+0x170>)
 80033c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80033ca:	697b      	ldr	r3, [r7, #20]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000c78 	.word	0x20000c78
 80033d8:	20000c54 	.word	0x20000c54
 80033dc:	20000c08 	.word	0x20000c08
 80033e0:	20000c0c 	.word	0x20000c0c
 80033e4:	20000c68 	.word	0x20000c68
 80033e8:	20000c70 	.word	0x20000c70
 80033ec:	20000c58 	.word	0x20000c58
 80033f0:	20000780 	.word	0x20000780
 80033f4:	2000077c 	.word	0x2000077c
 80033f8:	20000c64 	.word	0x20000c64
 80033fc:	20000c60 	.word	0x20000c60

08003400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003406:	4b28      	ldr	r3, [pc, #160]	@ (80034a8 <vTaskSwitchContext+0xa8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800340e:	4b27      	ldr	r3, [pc, #156]	@ (80034ac <vTaskSwitchContext+0xac>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003414:	e042      	b.n	800349c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003416:	4b25      	ldr	r3, [pc, #148]	@ (80034ac <vTaskSwitchContext+0xac>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800341c:	4b24      	ldr	r3, [pc, #144]	@ (80034b0 <vTaskSwitchContext+0xb0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e011      	b.n	8003448 <vTaskSwitchContext+0x48>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10b      	bne.n	8003442 <vTaskSwitchContext+0x42>
	__asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	607b      	str	r3, [r7, #4]
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	e7fd      	b.n	800343e <vTaskSwitchContext+0x3e>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3b01      	subs	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	491a      	ldr	r1, [pc, #104]	@ (80034b4 <vTaskSwitchContext+0xb4>)
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0e3      	beq.n	8003424 <vTaskSwitchContext+0x24>
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4a13      	ldr	r2, [pc, #76]	@ (80034b4 <vTaskSwitchContext+0xb4>)
 8003468:	4413      	add	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	3308      	adds	r3, #8
 800347e:	429a      	cmp	r2, r3
 8003480:	d104      	bne.n	800348c <vTaskSwitchContext+0x8c>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	4a09      	ldr	r2, [pc, #36]	@ (80034b8 <vTaskSwitchContext+0xb8>)
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	4a06      	ldr	r2, [pc, #24]	@ (80034b0 <vTaskSwitchContext+0xb0>)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6013      	str	r3, [r2, #0]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	20000c78 	.word	0x20000c78
 80034ac:	20000c64 	.word	0x20000c64
 80034b0:	20000c58 	.word	0x20000c58
 80034b4:	20000780 	.word	0x20000780
 80034b8:	2000077c 	.word	0x2000077c

080034bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	60fb      	str	r3, [r7, #12]
}
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034e4:	4b07      	ldr	r3, [pc, #28]	@ (8003504 <vTaskPlaceOnEventList+0x48>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3318      	adds	r3, #24
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7fe fe70 	bl	80021d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034f2:	2101      	movs	r1, #1
 80034f4:	6838      	ldr	r0, [r7, #0]
 80034f6:	f000 fa81 	bl	80039fc <prvAddCurrentTaskToDelayedList>
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	2000077c 	.word	0x2000077c

08003508 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10b      	bne.n	8003532 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	617b      	str	r3, [r7, #20]
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	e7fd      	b.n	800352e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003532:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <vTaskPlaceOnEventListRestricted+0x54>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3318      	adds	r3, #24
 8003538:	4619      	mov	r1, r3
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f7fe fe25 	bl	800218a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	68b8      	ldr	r0, [r7, #8]
 8003550:	f000 fa54 	bl	80039fc <prvAddCurrentTaskToDelayedList>
	}
 8003554:	bf00      	nop
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	2000077c 	.word	0x2000077c

08003560 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10b      	bne.n	800358e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	60fb      	str	r3, [r7, #12]
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	e7fd      	b.n	800358a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	3318      	adds	r3, #24
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe fe56 	bl	8002244 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003598:	4b1d      	ldr	r3, [pc, #116]	@ (8003610 <xTaskRemoveFromEventList+0xb0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d11d      	bne.n	80035dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fe4d 	bl	8002244 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ae:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <xTaskRemoveFromEventList+0xb4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d903      	bls.n	80035be <xTaskRemoveFromEventList+0x5e>
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ba:	4a16      	ldr	r2, [pc, #88]	@ (8003614 <xTaskRemoveFromEventList+0xb4>)
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4a13      	ldr	r2, [pc, #76]	@ (8003618 <xTaskRemoveFromEventList+0xb8>)
 80035cc:	441a      	add	r2, r3
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f7fe fdd8 	bl	800218a <vListInsertEnd>
 80035da:	e005      	b.n	80035e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	3318      	adds	r3, #24
 80035e0:	4619      	mov	r1, r3
 80035e2:	480e      	ldr	r0, [pc, #56]	@ (800361c <xTaskRemoveFromEventList+0xbc>)
 80035e4:	f7fe fdd1 	bl	800218a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003620 <xTaskRemoveFromEventList+0xc0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d905      	bls.n	8003602 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035f6:	2301      	movs	r3, #1
 80035f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <xTaskRemoveFromEventList+0xc4>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e001      	b.n	8003606 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003606:	697b      	ldr	r3, [r7, #20]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20000c78 	.word	0x20000c78
 8003614:	20000c58 	.word	0x20000c58
 8003618:	20000780 	.word	0x20000780
 800361c:	20000c10 	.word	0x20000c10
 8003620:	2000077c 	.word	0x2000077c
 8003624:	20000c64 	.word	0x20000c64

08003628 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003630:	4b06      	ldr	r3, [pc, #24]	@ (800364c <vTaskInternalSetTimeOutState+0x24>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003638:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <vTaskInternalSetTimeOutState+0x28>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	605a      	str	r2, [r3, #4]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	20000c68 	.word	0x20000c68
 8003650:	20000c54 	.word	0x20000c54

08003654 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	613b      	str	r3, [r7, #16]
}
 8003676:	bf00      	nop
 8003678:	bf00      	nop
 800367a:	e7fd      	b.n	8003678 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10b      	bne.n	800369a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	60fb      	str	r3, [r7, #12]
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	e7fd      	b.n	8003696 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800369a:	f000 fe8d 	bl	80043b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800369e:	4b1d      	ldr	r3, [pc, #116]	@ (8003714 <xTaskCheckForTimeOut+0xc0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b6:	d102      	bne.n	80036be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	e023      	b.n	8003706 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4b15      	ldr	r3, [pc, #84]	@ (8003718 <xTaskCheckForTimeOut+0xc4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d007      	beq.n	80036da <xTaskCheckForTimeOut+0x86>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	e015      	b.n	8003706 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d20b      	bcs.n	80036fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	1ad2      	subs	r2, r2, r3
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ff99 	bl	8003628 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e004      	b.n	8003706 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003702:	2301      	movs	r3, #1
 8003704:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003706:	f000 fe89 	bl	800441c <vPortExitCritical>

	return xReturn;
 800370a:	69fb      	ldr	r3, [r7, #28]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000c54 	.word	0x20000c54
 8003718:	20000c68 	.word	0x20000c68

0800371c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003720:	4b03      	ldr	r3, [pc, #12]	@ (8003730 <vTaskMissedYield+0x14>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	20000c64 	.word	0x20000c64

08003734 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800373c:	f000 f852 	bl	80037e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003740:	4b06      	ldr	r3, [pc, #24]	@ (800375c <prvIdleTask+0x28>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d9f9      	bls.n	800373c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003748:	4b05      	ldr	r3, [pc, #20]	@ (8003760 <prvIdleTask+0x2c>)
 800374a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003758:	e7f0      	b.n	800373c <prvIdleTask+0x8>
 800375a:	bf00      	nop
 800375c:	20000780 	.word	0x20000780
 8003760:	e000ed04 	.word	0xe000ed04

08003764 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	e00c      	b.n	800378a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4a12      	ldr	r2, [pc, #72]	@ (80037c4 <prvInitialiseTaskLists+0x60>)
 800377c:	4413      	add	r3, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fcd6 	bl	8002130 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3301      	adds	r3, #1
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b37      	cmp	r3, #55	@ 0x37
 800378e:	d9ef      	bls.n	8003770 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003790:	480d      	ldr	r0, [pc, #52]	@ (80037c8 <prvInitialiseTaskLists+0x64>)
 8003792:	f7fe fccd 	bl	8002130 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003796:	480d      	ldr	r0, [pc, #52]	@ (80037cc <prvInitialiseTaskLists+0x68>)
 8003798:	f7fe fcca 	bl	8002130 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800379c:	480c      	ldr	r0, [pc, #48]	@ (80037d0 <prvInitialiseTaskLists+0x6c>)
 800379e:	f7fe fcc7 	bl	8002130 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037a2:	480c      	ldr	r0, [pc, #48]	@ (80037d4 <prvInitialiseTaskLists+0x70>)
 80037a4:	f7fe fcc4 	bl	8002130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037a8:	480b      	ldr	r0, [pc, #44]	@ (80037d8 <prvInitialiseTaskLists+0x74>)
 80037aa:	f7fe fcc1 	bl	8002130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037ae:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <prvInitialiseTaskLists+0x78>)
 80037b0:	4a05      	ldr	r2, [pc, #20]	@ (80037c8 <prvInitialiseTaskLists+0x64>)
 80037b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037b4:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <prvInitialiseTaskLists+0x7c>)
 80037b6:	4a05      	ldr	r2, [pc, #20]	@ (80037cc <prvInitialiseTaskLists+0x68>)
 80037b8:	601a      	str	r2, [r3, #0]
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000780 	.word	0x20000780
 80037c8:	20000be0 	.word	0x20000be0
 80037cc:	20000bf4 	.word	0x20000bf4
 80037d0:	20000c10 	.word	0x20000c10
 80037d4:	20000c24 	.word	0x20000c24
 80037d8:	20000c3c 	.word	0x20000c3c
 80037dc:	20000c08 	.word	0x20000c08
 80037e0:	20000c0c 	.word	0x20000c0c

080037e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037ea:	e019      	b.n	8003820 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037ec:	f000 fde4 	bl	80043b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f0:	4b10      	ldr	r3, [pc, #64]	@ (8003834 <prvCheckTasksWaitingTermination+0x50>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fe fd21 	bl	8002244 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003802:	4b0d      	ldr	r3, [pc, #52]	@ (8003838 <prvCheckTasksWaitingTermination+0x54>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3b01      	subs	r3, #1
 8003808:	4a0b      	ldr	r2, [pc, #44]	@ (8003838 <prvCheckTasksWaitingTermination+0x54>)
 800380a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800380c:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <prvCheckTasksWaitingTermination+0x58>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3b01      	subs	r3, #1
 8003812:	4a0a      	ldr	r2, [pc, #40]	@ (800383c <prvCheckTasksWaitingTermination+0x58>)
 8003814:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003816:	f000 fe01 	bl	800441c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f810 	bl	8003840 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003820:	4b06      	ldr	r3, [pc, #24]	@ (800383c <prvCheckTasksWaitingTermination+0x58>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e1      	bne.n	80037ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000c24 	.word	0x20000c24
 8003838:	20000c50 	.word	0x20000c50
 800383c:	20000c38 	.word	0x20000c38

08003840 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	4618      	mov	r0, r3
 8003858:	f000 ff9e 	bl	8004798 <vPortFree>
				vPortFree( pxTCB );
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 ff9b 	bl	8004798 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003862:	e019      	b.n	8003898 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800386a:	2b01      	cmp	r3, #1
 800386c:	d103      	bne.n	8003876 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 ff92 	bl	8004798 <vPortFree>
	}
 8003874:	e010      	b.n	8003898 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800387c:	2b02      	cmp	r3, #2
 800387e:	d00b      	beq.n	8003898 <prvDeleteTCB+0x58>
	__asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	60fb      	str	r3, [r7, #12]
}
 8003892:	bf00      	nop
 8003894:	bf00      	nop
 8003896:	e7fd      	b.n	8003894 <prvDeleteTCB+0x54>
	}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038a6:	4b0c      	ldr	r3, [pc, #48]	@ (80038d8 <prvResetNextTaskUnblockTime+0x38>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038b0:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <prvResetNextTaskUnblockTime+0x3c>)
 80038b2:	f04f 32ff 	mov.w	r2, #4294967295
 80038b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038b8:	e008      	b.n	80038cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ba:	4b07      	ldr	r3, [pc, #28]	@ (80038d8 <prvResetNextTaskUnblockTime+0x38>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a04      	ldr	r2, [pc, #16]	@ (80038dc <prvResetNextTaskUnblockTime+0x3c>)
 80038ca:	6013      	str	r3, [r2, #0]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	20000c08 	.word	0x20000c08
 80038dc:	20000c70 	.word	0x20000c70

080038e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <xTaskGetSchedulerState+0x34>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d102      	bne.n	80038f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038ee:	2301      	movs	r3, #1
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	e008      	b.n	8003906 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038f4:	4b08      	ldr	r3, [pc, #32]	@ (8003918 <xTaskGetSchedulerState+0x38>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038fc:	2302      	movs	r3, #2
 80038fe:	607b      	str	r3, [r7, #4]
 8003900:	e001      	b.n	8003906 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003902:	2300      	movs	r3, #0
 8003904:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003906:	687b      	ldr	r3, [r7, #4]
	}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	20000c5c 	.word	0x20000c5c
 8003918:	20000c78 	.word	0x20000c78

0800391c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d058      	beq.n	80039e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003932:	4b2f      	ldr	r3, [pc, #188]	@ (80039f0 <xTaskPriorityDisinherit+0xd4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	429a      	cmp	r2, r3
 800393a:	d00b      	beq.n	8003954 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	60fb      	str	r3, [r7, #12]
}
 800394e:	bf00      	nop
 8003950:	bf00      	nop
 8003952:	e7fd      	b.n	8003950 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10b      	bne.n	8003974 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	60bb      	str	r3, [r7, #8]
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	e7fd      	b.n	8003970 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003978:	1e5a      	subs	r2, r3, #1
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003986:	429a      	cmp	r2, r3
 8003988:	d02c      	beq.n	80039e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800398e:	2b00      	cmp	r3, #0
 8003990:	d128      	bne.n	80039e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	3304      	adds	r3, #4
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe fc54 	bl	8002244 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b4:	4b0f      	ldr	r3, [pc, #60]	@ (80039f4 <xTaskPriorityDisinherit+0xd8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d903      	bls.n	80039c4 <xTaskPriorityDisinherit+0xa8>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c0:	4a0c      	ldr	r2, [pc, #48]	@ (80039f4 <xTaskPriorityDisinherit+0xd8>)
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4a09      	ldr	r2, [pc, #36]	@ (80039f8 <xTaskPriorityDisinherit+0xdc>)
 80039d2:	441a      	add	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f7fe fbd5 	bl	800218a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039e0:	2301      	movs	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039e4:	697b      	ldr	r3, [r7, #20]
	}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	2000077c 	.word	0x2000077c
 80039f4:	20000c58 	.word	0x20000c58
 80039f8:	20000780 	.word	0x20000780

080039fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a06:	4b21      	ldr	r3, [pc, #132]	@ (8003a8c <prvAddCurrentTaskToDelayedList+0x90>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a0c:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fc16 	bl	8002244 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d10a      	bne.n	8003a36 <prvAddCurrentTaskToDelayedList+0x3a>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a26:	4b1a      	ldr	r3, [pc, #104]	@ (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4819      	ldr	r0, [pc, #100]	@ (8003a94 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a30:	f7fe fbab 	bl	800218a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a34:	e026      	b.n	8003a84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a3e:	4b14      	ldr	r3, [pc, #80]	@ (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d209      	bcs.n	8003a62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a4e:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3304      	adds	r3, #4
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f7fe fbb9 	bl	80021d2 <vListInsert>
}
 8003a60:	e010      	b.n	8003a84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a62:	4b0e      	ldr	r3, [pc, #56]	@ (8003a9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f7fe fbaf 	bl	80021d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a74:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d202      	bcs.n	8003a84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a7e:	4a08      	ldr	r2, [pc, #32]	@ (8003aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6013      	str	r3, [r2, #0]
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000c54 	.word	0x20000c54
 8003a90:	2000077c 	.word	0x2000077c
 8003a94:	20000c3c 	.word	0x20000c3c
 8003a98:	20000c0c 	.word	0x20000c0c
 8003a9c:	20000c08 	.word	0x20000c08
 8003aa0:	20000c70 	.word	0x20000c70

08003aa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	@ 0x28
 8003aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003aae:	f000 fb13 	bl	80040d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <xTimerCreateTimerTask+0x84>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d021      	beq.n	8003afe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ac2:	1d3a      	adds	r2, r7, #4
 8003ac4:	f107 0108 	add.w	r1, r7, #8
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe fb15 	bl	80020fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	9202      	str	r2, [sp, #8]
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	2302      	movs	r3, #2
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	4911      	ldr	r1, [pc, #68]	@ (8003b2c <xTimerCreateTimerTask+0x88>)
 8003ae6:	4812      	ldr	r0, [pc, #72]	@ (8003b30 <xTimerCreateTimerTask+0x8c>)
 8003ae8:	f7ff f8d0 	bl	8002c8c <xTaskCreateStatic>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4a11      	ldr	r2, [pc, #68]	@ (8003b34 <xTimerCreateTimerTask+0x90>)
 8003af0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003af2:	4b10      	ldr	r3, [pc, #64]	@ (8003b34 <xTimerCreateTimerTask+0x90>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003afa:	2301      	movs	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	613b      	str	r3, [r7, #16]
}
 8003b16:	bf00      	nop
 8003b18:	bf00      	nop
 8003b1a:	e7fd      	b.n	8003b18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b1c:	697b      	ldr	r3, [r7, #20]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000cac 	.word	0x20000cac
 8003b2c:	08004a90 	.word	0x08004a90
 8003b30:	08003c71 	.word	0x08003c71
 8003b34:	20000cb0 	.word	0x20000cb0

08003b38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	@ 0x28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <xTimerGenericCommand+0x30>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	623b      	str	r3, [r7, #32]
}
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b68:	4b19      	ldr	r3, [pc, #100]	@ (8003bd0 <xTimerGenericCommand+0x98>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d02a      	beq.n	8003bc6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b05      	cmp	r3, #5
 8003b80:	dc18      	bgt.n	8003bb4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b82:	f7ff fead 	bl	80038e0 <xTaskGetSchedulerState>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d109      	bne.n	8003ba0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b8c:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <xTimerGenericCommand+0x98>)
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	f107 0110 	add.w	r1, r7, #16
 8003b94:	2300      	movs	r3, #0
 8003b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b98:	f7fe fc88 	bl	80024ac <xQueueGenericSend>
 8003b9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003b9e:	e012      	b.n	8003bc6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <xTimerGenericCommand+0x98>)
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	f107 0110 	add.w	r1, r7, #16
 8003ba8:	2300      	movs	r3, #0
 8003baa:	2200      	movs	r2, #0
 8003bac:	f7fe fc7e 	bl	80024ac <xQueueGenericSend>
 8003bb0:	6278      	str	r0, [r7, #36]	@ 0x24
 8003bb2:	e008      	b.n	8003bc6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003bb4:	4b06      	ldr	r3, [pc, #24]	@ (8003bd0 <xTimerGenericCommand+0x98>)
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	f107 0110 	add.w	r1, r7, #16
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	f7fe fd76 	bl	80026b0 <xQueueGenericSendFromISR>
 8003bc4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3728      	adds	r7, #40	@ 0x28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000cac 	.word	0x20000cac

08003bd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bde:	4b23      	ldr	r3, [pc, #140]	@ (8003c6c <prvProcessExpiredTimer+0x98>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe fb29 	bl	8002244 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d023      	beq.n	8003c48 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	18d1      	adds	r1, r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	6978      	ldr	r0, [r7, #20]
 8003c0e:	f000 f8d5 	bl	8003dbc <prvInsertTimerInActiveList>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d020      	beq.n	8003c5a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	2100      	movs	r1, #0
 8003c22:	6978      	ldr	r0, [r7, #20]
 8003c24:	f7ff ff88 	bl	8003b38 <xTimerGenericCommand>
 8003c28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d114      	bne.n	8003c5a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	60fb      	str	r3, [r7, #12]
}
 8003c42:	bf00      	nop
 8003c44:	bf00      	nop
 8003c46:	e7fd      	b.n	8003c44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	6978      	ldr	r0, [r7, #20]
 8003c60:	4798      	blx	r3
}
 8003c62:	bf00      	nop
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000ca4 	.word	0x20000ca4

08003c70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c78:	f107 0308 	add.w	r3, r7, #8
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 f859 	bl	8003d34 <prvGetNextExpireTime>
 8003c82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4619      	mov	r1, r3
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f805 	bl	8003c98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c8e:	f000 f8d7 	bl	8003e40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c92:	bf00      	nop
 8003c94:	e7f0      	b.n	8003c78 <prvTimerTask+0x8>
	...

08003c98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ca2:	f7ff fa37 	bl	8003114 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ca6:	f107 0308 	add.w	r3, r7, #8
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f866 	bl	8003d7c <prvSampleTimeNow>
 8003cb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d130      	bne.n	8003d1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <prvProcessTimerOrBlockTask+0x3c>
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d806      	bhi.n	8003cd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003cc6:	f7ff fa33 	bl	8003130 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ff81 	bl	8003bd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003cd2:	e024      	b.n	8003d1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d008      	beq.n	8003cec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003cda:	4b13      	ldr	r3, [pc, #76]	@ (8003d28 <prvProcessTimerOrBlockTask+0x90>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <prvProcessTimerOrBlockTask+0x50>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <prvProcessTimerOrBlockTask+0x52>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003cec:	4b0f      	ldr	r3, [pc, #60]	@ (8003d2c <prvProcessTimerOrBlockTask+0x94>)
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f7fe ff93 	bl	8002c24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003cfe:	f7ff fa17 	bl	8003130 <xTaskResumeAll>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d08:	4b09      	ldr	r3, [pc, #36]	@ (8003d30 <prvProcessTimerOrBlockTask+0x98>)
 8003d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	f3bf 8f6f 	isb	sy
}
 8003d18:	e001      	b.n	8003d1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d1a:	f7ff fa09 	bl	8003130 <xTaskResumeAll>
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000ca8 	.word	0x20000ca8
 8003d2c:	20000cac 	.word	0x20000cac
 8003d30:	e000ed04 	.word	0xe000ed04

08003d34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d78 <prvGetNextExpireTime+0x44>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <prvGetNextExpireTime+0x16>
 8003d46:	2201      	movs	r2, #1
 8003d48:	e000      	b.n	8003d4c <prvGetNextExpireTime+0x18>
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d58:	4b07      	ldr	r3, [pc, #28]	@ (8003d78 <prvGetNextExpireTime+0x44>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e001      	b.n	8003d68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d68:	68fb      	ldr	r3, [r7, #12]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000ca4 	.word	0x20000ca4

08003d7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d84:	f7ff fa72 	bl	800326c <xTaskGetTickCount>
 8003d88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003db8 <prvSampleTimeNow+0x3c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d205      	bcs.n	8003da0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d94:	f000 f93a 	bl	800400c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	e002      	b.n	8003da6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003da6:	4a04      	ldr	r2, [pc, #16]	@ (8003db8 <prvSampleTimeNow+0x3c>)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003dac:	68fb      	ldr	r3, [r7, #12]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000cb4 	.word	0x20000cb4

08003dbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d812      	bhi.n	8003e08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	1ad2      	subs	r2, r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d302      	bcc.n	8003df6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	e01b      	b.n	8003e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003df6:	4b10      	ldr	r3, [pc, #64]	@ (8003e38 <prvInsertTimerInActiveList+0x7c>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4610      	mov	r0, r2
 8003e02:	f7fe f9e6 	bl	80021d2 <vListInsert>
 8003e06:	e012      	b.n	8003e2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d206      	bcs.n	8003e1e <prvInsertTimerInActiveList+0x62>
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d302      	bcc.n	8003e1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e007      	b.n	8003e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e1e:	4b07      	ldr	r3, [pc, #28]	@ (8003e3c <prvInsertTimerInActiveList+0x80>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3304      	adds	r3, #4
 8003e26:	4619      	mov	r1, r3
 8003e28:	4610      	mov	r0, r2
 8003e2a:	f7fe f9d2 	bl	80021d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e2e:	697b      	ldr	r3, [r7, #20]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000ca8 	.word	0x20000ca8
 8003e3c:	20000ca4 	.word	0x20000ca4

08003e40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08e      	sub	sp, #56	@ 0x38
 8003e44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e46:	e0ce      	b.n	8003fe6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	da19      	bge.n	8003e82 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e4e:	1d3b      	adds	r3, r7, #4
 8003e50:	3304      	adds	r3, #4
 8003e52:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	61fb      	str	r3, [r7, #28]
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e78:	6850      	ldr	r0, [r2, #4]
 8003e7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e7c:	6892      	ldr	r2, [r2, #8]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f2c0 80ae 	blt.w	8003fe6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d004      	beq.n	8003ea0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe f9d2 	bl	8002244 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ea0:	463b      	mov	r3, r7
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff ff6a 	bl	8003d7c <prvSampleTimeNow>
 8003ea8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b09      	cmp	r3, #9
 8003eae:	f200 8097 	bhi.w	8003fe0 <prvProcessReceivedCommands+0x1a0>
 8003eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb8 <prvProcessReceivedCommands+0x78>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003ee1 	.word	0x08003ee1
 8003ebc:	08003ee1 	.word	0x08003ee1
 8003ec0:	08003ee1 	.word	0x08003ee1
 8003ec4:	08003f57 	.word	0x08003f57
 8003ec8:	08003f6b 	.word	0x08003f6b
 8003ecc:	08003fb7 	.word	0x08003fb7
 8003ed0:	08003ee1 	.word	0x08003ee1
 8003ed4:	08003ee1 	.word	0x08003ee1
 8003ed8:	08003f57 	.word	0x08003f57
 8003edc:	08003f6b 	.word	0x08003f6b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	18d1      	adds	r1, r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f00:	f7ff ff5c 	bl	8003dbc <prvInsertTimerInActiveList>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d06c      	beq.n	8003fe4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d061      	beq.n	8003fe4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	441a      	add	r2, r3
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2100      	movs	r1, #0
 8003f30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f32:	f7ff fe01 	bl	8003b38 <xTimerGenericCommand>
 8003f36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d152      	bne.n	8003fe4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	61bb      	str	r3, [r7, #24]
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	e7fd      	b.n	8003f52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003f68:	e03d      	b.n	8003fe6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f80:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10b      	bne.n	8003fa2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	617b      	str	r3, [r7, #20]
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	e7fd      	b.n	8003f9e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	18d1      	adds	r1, r2, r3
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fb0:	f7ff ff04 	bl	8003dbc <prvInsertTimerInActiveList>
					break;
 8003fb4:	e017      	b.n	8003fe6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d103      	bne.n	8003fcc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003fc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fc6:	f000 fbe7 	bl	8004798 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003fca:	e00c      	b.n	8003fe6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003fde:	e002      	b.n	8003fe6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003fe0:	bf00      	nop
 8003fe2:	e000      	b.n	8003fe6 <prvProcessReceivedCommands+0x1a6>
					break;
 8003fe4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fe6:	4b08      	ldr	r3, [pc, #32]	@ (8004008 <prvProcessReceivedCommands+0x1c8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	1d39      	adds	r1, r7, #4
 8003fec:	2200      	movs	r2, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fbfc 	bl	80027ec <xQueueReceive>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f47f af26 	bne.w	8003e48 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	3730      	adds	r7, #48	@ 0x30
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000cac 	.word	0x20000cac

0800400c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004012:	e049      	b.n	80040a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004014:	4b2e      	ldr	r3, [pc, #184]	@ (80040d0 <prvSwitchTimerLists+0xc4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800401e:	4b2c      	ldr	r3, [pc, #176]	@ (80040d0 <prvSwitchTimerLists+0xc4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3304      	adds	r3, #4
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe f909 	bl	8002244 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d02f      	beq.n	80040a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4413      	add	r3, r2
 8004050:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	429a      	cmp	r2, r3
 8004058:	d90e      	bls.n	8004078 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004066:	4b1a      	ldr	r3, [pc, #104]	@ (80040d0 <prvSwitchTimerLists+0xc4>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3304      	adds	r3, #4
 800406e:	4619      	mov	r1, r3
 8004070:	4610      	mov	r0, r2
 8004072:	f7fe f8ae 	bl	80021d2 <vListInsert>
 8004076:	e017      	b.n	80040a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004078:	2300      	movs	r3, #0
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	2300      	movs	r3, #0
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	2100      	movs	r1, #0
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff fd58 	bl	8003b38 <xTimerGenericCommand>
 8004088:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10b      	bne.n	80040a8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	603b      	str	r3, [r7, #0]
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040a8:	4b09      	ldr	r3, [pc, #36]	@ (80040d0 <prvSwitchTimerLists+0xc4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1b0      	bne.n	8004014 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80040b2:	4b07      	ldr	r3, [pc, #28]	@ (80040d0 <prvSwitchTimerLists+0xc4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80040b8:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <prvSwitchTimerLists+0xc8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a04      	ldr	r2, [pc, #16]	@ (80040d0 <prvSwitchTimerLists+0xc4>)
 80040be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80040c0:	4a04      	ldr	r2, [pc, #16]	@ (80040d4 <prvSwitchTimerLists+0xc8>)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	6013      	str	r3, [r2, #0]
}
 80040c6:	bf00      	nop
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000ca4 	.word	0x20000ca4
 80040d4:	20000ca8 	.word	0x20000ca8

080040d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80040de:	f000 f96b 	bl	80043b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80040e2:	4b15      	ldr	r3, [pc, #84]	@ (8004138 <prvCheckForValidListAndQueue+0x60>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d120      	bne.n	800412c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80040ea:	4814      	ldr	r0, [pc, #80]	@ (800413c <prvCheckForValidListAndQueue+0x64>)
 80040ec:	f7fe f820 	bl	8002130 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80040f0:	4813      	ldr	r0, [pc, #76]	@ (8004140 <prvCheckForValidListAndQueue+0x68>)
 80040f2:	f7fe f81d 	bl	8002130 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80040f6:	4b13      	ldr	r3, [pc, #76]	@ (8004144 <prvCheckForValidListAndQueue+0x6c>)
 80040f8:	4a10      	ldr	r2, [pc, #64]	@ (800413c <prvCheckForValidListAndQueue+0x64>)
 80040fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80040fc:	4b12      	ldr	r3, [pc, #72]	@ (8004148 <prvCheckForValidListAndQueue+0x70>)
 80040fe:	4a10      	ldr	r2, [pc, #64]	@ (8004140 <prvCheckForValidListAndQueue+0x68>)
 8004100:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004102:	2300      	movs	r3, #0
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	4b11      	ldr	r3, [pc, #68]	@ (800414c <prvCheckForValidListAndQueue+0x74>)
 8004108:	4a11      	ldr	r2, [pc, #68]	@ (8004150 <prvCheckForValidListAndQueue+0x78>)
 800410a:	2110      	movs	r1, #16
 800410c:	200a      	movs	r0, #10
 800410e:	f7fe f92d 	bl	800236c <xQueueGenericCreateStatic>
 8004112:	4603      	mov	r3, r0
 8004114:	4a08      	ldr	r2, [pc, #32]	@ (8004138 <prvCheckForValidListAndQueue+0x60>)
 8004116:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004118:	4b07      	ldr	r3, [pc, #28]	@ (8004138 <prvCheckForValidListAndQueue+0x60>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004120:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <prvCheckForValidListAndQueue+0x60>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	490b      	ldr	r1, [pc, #44]	@ (8004154 <prvCheckForValidListAndQueue+0x7c>)
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe fd52 	bl	8002bd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800412c:	f000 f976 	bl	800441c <vPortExitCritical>
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000cac 	.word	0x20000cac
 800413c:	20000c7c 	.word	0x20000c7c
 8004140:	20000c90 	.word	0x20000c90
 8004144:	20000ca4 	.word	0x20000ca4
 8004148:	20000ca8 	.word	0x20000ca8
 800414c:	20000d58 	.word	0x20000d58
 8004150:	20000cb8 	.word	0x20000cb8
 8004154:	08004a98 	.word	0x08004a98

08004158 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3b04      	subs	r3, #4
 8004168:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004170:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3b04      	subs	r3, #4
 8004176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f023 0201 	bic.w	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3b04      	subs	r3, #4
 8004186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004188:	4a0c      	ldr	r2, [pc, #48]	@ (80041bc <pxPortInitialiseStack+0x64>)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3b14      	subs	r3, #20
 8004192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3b04      	subs	r3, #4
 800419e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f06f 0202 	mvn.w	r2, #2
 80041a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3b20      	subs	r3, #32
 80041ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041ae:	68fb      	ldr	r3, [r7, #12]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	080041c1 	.word	0x080041c1

080041c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041ca:	4b13      	ldr	r3, [pc, #76]	@ (8004218 <prvTaskExitError+0x58>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d00b      	beq.n	80041ec <prvTaskExitError+0x2c>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	60fb      	str	r3, [r7, #12]
}
 80041e6:	bf00      	nop
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <prvTaskExitError+0x28>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	60bb      	str	r3, [r7, #8]
}
 80041fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004200:	bf00      	nop
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0fc      	beq.n	8004202 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	2000000c 	.word	0x2000000c
 800421c:	00000000 	.word	0x00000000

08004220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004220:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <pxCurrentTCBConst2>)
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	6808      	ldr	r0, [r1, #0]
 8004226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422a:	f380 8809 	msr	PSP, r0
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8811 	msr	BASEPRI, r0
 800423a:	4770      	bx	lr
 800423c:	f3af 8000 	nop.w

08004240 <pxCurrentTCBConst2>:
 8004240:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop

08004248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004248:	4808      	ldr	r0, [pc, #32]	@ (800426c <prvPortStartFirstTask+0x24>)
 800424a:	6800      	ldr	r0, [r0, #0]
 800424c:	6800      	ldr	r0, [r0, #0]
 800424e:	f380 8808 	msr	MSP, r0
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8814 	msr	CONTROL, r0
 800425a:	b662      	cpsie	i
 800425c:	b661      	cpsie	f
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	df00      	svc	0
 8004268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800426a:	bf00      	nop
 800426c:	e000ed08 	.word	0xe000ed08

08004270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004276:	4b47      	ldr	r3, [pc, #284]	@ (8004394 <xPortStartScheduler+0x124>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a47      	ldr	r2, [pc, #284]	@ (8004398 <xPortStartScheduler+0x128>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10b      	bne.n	8004298 <xPortStartScheduler+0x28>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	613b      	str	r3, [r7, #16]
}
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004298:	4b3e      	ldr	r3, [pc, #248]	@ (8004394 <xPortStartScheduler+0x124>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a3f      	ldr	r2, [pc, #252]	@ (800439c <xPortStartScheduler+0x12c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10b      	bne.n	80042ba <xPortStartScheduler+0x4a>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	60fb      	str	r3, [r7, #12]
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	e7fd      	b.n	80042b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ba:	4b39      	ldr	r3, [pc, #228]	@ (80043a0 <xPortStartScheduler+0x130>)
 80042bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	22ff      	movs	r2, #255	@ 0xff
 80042ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4b31      	ldr	r3, [pc, #196]	@ (80043a4 <xPortStartScheduler+0x134>)
 80042e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042e2:	4b31      	ldr	r3, [pc, #196]	@ (80043a8 <xPortStartScheduler+0x138>)
 80042e4:	2207      	movs	r2, #7
 80042e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042e8:	e009      	b.n	80042fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80042ea:	4b2f      	ldr	r3, [pc, #188]	@ (80043a8 <xPortStartScheduler+0x138>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	4a2d      	ldr	r2, [pc, #180]	@ (80043a8 <xPortStartScheduler+0x138>)
 80042f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004306:	2b80      	cmp	r3, #128	@ 0x80
 8004308:	d0ef      	beq.n	80042ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800430a:	4b27      	ldr	r3, [pc, #156]	@ (80043a8 <xPortStartScheduler+0x138>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1c3 0307 	rsb	r3, r3, #7
 8004312:	2b04      	cmp	r3, #4
 8004314:	d00b      	beq.n	800432e <xPortStartScheduler+0xbe>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	60bb      	str	r3, [r7, #8]
}
 8004328:	bf00      	nop
 800432a:	bf00      	nop
 800432c:	e7fd      	b.n	800432a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800432e:	4b1e      	ldr	r3, [pc, #120]	@ (80043a8 <xPortStartScheduler+0x138>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	4a1c      	ldr	r2, [pc, #112]	@ (80043a8 <xPortStartScheduler+0x138>)
 8004336:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004338:	4b1b      	ldr	r3, [pc, #108]	@ (80043a8 <xPortStartScheduler+0x138>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004340:	4a19      	ldr	r2, [pc, #100]	@ (80043a8 <xPortStartScheduler+0x138>)
 8004342:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800434c:	4b17      	ldr	r3, [pc, #92]	@ (80043ac <xPortStartScheduler+0x13c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a16      	ldr	r2, [pc, #88]	@ (80043ac <xPortStartScheduler+0x13c>)
 8004352:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004358:	4b14      	ldr	r3, [pc, #80]	@ (80043ac <xPortStartScheduler+0x13c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a13      	ldr	r2, [pc, #76]	@ (80043ac <xPortStartScheduler+0x13c>)
 800435e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004364:	f000 f8da 	bl	800451c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004368:	4b11      	ldr	r3, [pc, #68]	@ (80043b0 <xPortStartScheduler+0x140>)
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800436e:	f000 f8f9 	bl	8004564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004372:	4b10      	ldr	r3, [pc, #64]	@ (80043b4 <xPortStartScheduler+0x144>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a0f      	ldr	r2, [pc, #60]	@ (80043b4 <xPortStartScheduler+0x144>)
 8004378:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800437c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800437e:	f7ff ff63 	bl	8004248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004382:	f7ff f83d 	bl	8003400 <vTaskSwitchContext>
	prvTaskExitError();
 8004386:	f7ff ff1b 	bl	80041c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	e000ed00 	.word	0xe000ed00
 8004398:	410fc271 	.word	0x410fc271
 800439c:	410fc270 	.word	0x410fc270
 80043a0:	e000e400 	.word	0xe000e400
 80043a4:	20000da8 	.word	0x20000da8
 80043a8:	20000dac 	.word	0x20000dac
 80043ac:	e000ed20 	.word	0xe000ed20
 80043b0:	2000000c 	.word	0x2000000c
 80043b4:	e000ef34 	.word	0xe000ef34

080043b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	607b      	str	r3, [r7, #4]
}
 80043d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043d2:	4b10      	ldr	r3, [pc, #64]	@ (8004414 <vPortEnterCritical+0x5c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3301      	adds	r3, #1
 80043d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004414 <vPortEnterCritical+0x5c>)
 80043da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <vPortEnterCritical+0x5c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d110      	bne.n	8004406 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004418 <vPortEnterCritical+0x60>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <vPortEnterCritical+0x4e>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	603b      	str	r3, [r7, #0]
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <vPortEnterCritical+0x4a>
	}
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	2000000c 	.word	0x2000000c
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004422:	4b12      	ldr	r3, [pc, #72]	@ (800446c <vPortExitCritical+0x50>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <vPortExitCritical+0x26>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	607b      	str	r3, [r7, #4]
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004442:	4b0a      	ldr	r3, [pc, #40]	@ (800446c <vPortExitCritical+0x50>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3b01      	subs	r3, #1
 8004448:	4a08      	ldr	r2, [pc, #32]	@ (800446c <vPortExitCritical+0x50>)
 800444a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800444c:	4b07      	ldr	r3, [pc, #28]	@ (800446c <vPortExitCritical+0x50>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <vPortExitCritical+0x44>
 8004454:	2300      	movs	r3, #0
 8004456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f383 8811 	msr	BASEPRI, r3
}
 800445e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	2000000c 	.word	0x2000000c

08004470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004470:	f3ef 8009 	mrs	r0, PSP
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <pxCurrentTCBConst>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	f01e 0f10 	tst.w	lr, #16
 8004480:	bf08      	it	eq
 8004482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448a:	6010      	str	r0, [r2, #0]
 800448c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004490:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004494:	f380 8811 	msr	BASEPRI, r0
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f7fe ffae 	bl	8003400 <vTaskSwitchContext>
 80044a4:	f04f 0000 	mov.w	r0, #0
 80044a8:	f380 8811 	msr	BASEPRI, r0
 80044ac:	bc09      	pop	{r0, r3}
 80044ae:	6819      	ldr	r1, [r3, #0]
 80044b0:	6808      	ldr	r0, [r1, #0]
 80044b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b6:	f01e 0f10 	tst.w	lr, #16
 80044ba:	bf08      	it	eq
 80044bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044c0:	f380 8809 	msr	PSP, r0
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	f3af 8000 	nop.w

080044d0 <pxCurrentTCBConst>:
 80044d0:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop

080044d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	607b      	str	r3, [r7, #4]
}
 80044f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044f2:	f7fe fecb 	bl	800328c <xTaskIncrementTick>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044fc:	4b06      	ldr	r3, [pc, #24]	@ (8004518 <xPortSysTickHandler+0x40>)
 80044fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f383 8811 	msr	BASEPRI, r3
}
 800450e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	e000ed04 	.word	0xe000ed04

0800451c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004520:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <vPortSetupTimerInterrupt+0x34>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004526:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <vPortSetupTimerInterrupt+0x38>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800452c:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <vPortSetupTimerInterrupt+0x3c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0a      	ldr	r2, [pc, #40]	@ (800455c <vPortSetupTimerInterrupt+0x40>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	099b      	lsrs	r3, r3, #6
 8004538:	4a09      	ldr	r2, [pc, #36]	@ (8004560 <vPortSetupTimerInterrupt+0x44>)
 800453a:	3b01      	subs	r3, #1
 800453c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800453e:	4b04      	ldr	r3, [pc, #16]	@ (8004550 <vPortSetupTimerInterrupt+0x34>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	e000e010 	.word	0xe000e010
 8004554:	e000e018 	.word	0xe000e018
 8004558:	20000000 	.word	0x20000000
 800455c:	10624dd3 	.word	0x10624dd3
 8004560:	e000e014 	.word	0xe000e014

08004564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004564:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004574 <vPortEnableVFP+0x10>
 8004568:	6801      	ldr	r1, [r0, #0]
 800456a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800456e:	6001      	str	r1, [r0, #0]
 8004570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004572:	bf00      	nop
 8004574:	e000ed88 	.word	0xe000ed88

08004578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800457e:	f3ef 8305 	mrs	r3, IPSR
 8004582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b0f      	cmp	r3, #15
 8004588:	d915      	bls.n	80045b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800458a:	4a18      	ldr	r2, [pc, #96]	@ (80045ec <vPortValidateInterruptPriority+0x74>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004594:	4b16      	ldr	r3, [pc, #88]	@ (80045f0 <vPortValidateInterruptPriority+0x78>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	7afa      	ldrb	r2, [r7, #11]
 800459a:	429a      	cmp	r2, r3
 800459c:	d20b      	bcs.n	80045b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	607b      	str	r3, [r7, #4]
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	e7fd      	b.n	80045b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045b6:	4b0f      	ldr	r3, [pc, #60]	@ (80045f4 <vPortValidateInterruptPriority+0x7c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045be:	4b0e      	ldr	r3, [pc, #56]	@ (80045f8 <vPortValidateInterruptPriority+0x80>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d90b      	bls.n	80045de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	603b      	str	r3, [r7, #0]
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	e7fd      	b.n	80045da <vPortValidateInterruptPriority+0x62>
	}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	e000e3f0 	.word	0xe000e3f0
 80045f0:	20000da8 	.word	0x20000da8
 80045f4:	e000ed0c 	.word	0xe000ed0c
 80045f8:	20000dac 	.word	0x20000dac

080045fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	@ 0x28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004608:	f7fe fd84 	bl	8003114 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800460c:	4b5c      	ldr	r3, [pc, #368]	@ (8004780 <pvPortMalloc+0x184>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004614:	f000 f924 	bl	8004860 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004618:	4b5a      	ldr	r3, [pc, #360]	@ (8004784 <pvPortMalloc+0x188>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	f040 8095 	bne.w	8004750 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01e      	beq.n	800466a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800462c:	2208      	movs	r2, #8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4413      	add	r3, r2
 8004632:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	2b00      	cmp	r3, #0
 800463c:	d015      	beq.n	800466a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f023 0307 	bic.w	r3, r3, #7
 8004644:	3308      	adds	r3, #8
 8004646:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <pvPortMalloc+0x6e>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	617b      	str	r3, [r7, #20]
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	e7fd      	b.n	8004666 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d06f      	beq.n	8004750 <pvPortMalloc+0x154>
 8004670:	4b45      	ldr	r3, [pc, #276]	@ (8004788 <pvPortMalloc+0x18c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d86a      	bhi.n	8004750 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800467a:	4b44      	ldr	r3, [pc, #272]	@ (800478c <pvPortMalloc+0x190>)
 800467c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800467e:	4b43      	ldr	r3, [pc, #268]	@ (800478c <pvPortMalloc+0x190>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004684:	e004      	b.n	8004690 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d903      	bls.n	80046a2 <pvPortMalloc+0xa6>
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f1      	bne.n	8004686 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046a2:	4b37      	ldr	r3, [pc, #220]	@ (8004780 <pvPortMalloc+0x184>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d051      	beq.n	8004750 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2208      	movs	r2, #8
 80046b2:	4413      	add	r3, r2
 80046b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	1ad2      	subs	r2, r2, r3
 80046c6:	2308      	movs	r3, #8
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d920      	bls.n	8004710 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00b      	beq.n	80046f8 <pvPortMalloc+0xfc>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	613b      	str	r3, [r7, #16]
}
 80046f2:	bf00      	nop
 80046f4:	bf00      	nop
 80046f6:	e7fd      	b.n	80046f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	1ad2      	subs	r2, r2, r3
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800470a:	69b8      	ldr	r0, [r7, #24]
 800470c:	f000 f90a 	bl	8004924 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004710:	4b1d      	ldr	r3, [pc, #116]	@ (8004788 <pvPortMalloc+0x18c>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	4a1b      	ldr	r2, [pc, #108]	@ (8004788 <pvPortMalloc+0x18c>)
 800471c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800471e:	4b1a      	ldr	r3, [pc, #104]	@ (8004788 <pvPortMalloc+0x18c>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b1b      	ldr	r3, [pc, #108]	@ (8004790 <pvPortMalloc+0x194>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d203      	bcs.n	8004732 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800472a:	4b17      	ldr	r3, [pc, #92]	@ (8004788 <pvPortMalloc+0x18c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a18      	ldr	r2, [pc, #96]	@ (8004790 <pvPortMalloc+0x194>)
 8004730:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	4b13      	ldr	r3, [pc, #76]	@ (8004784 <pvPortMalloc+0x188>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	431a      	orrs	r2, r3
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004746:	4b13      	ldr	r3, [pc, #76]	@ (8004794 <pvPortMalloc+0x198>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3301      	adds	r3, #1
 800474c:	4a11      	ldr	r2, [pc, #68]	@ (8004794 <pvPortMalloc+0x198>)
 800474e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004750:	f7fe fcee 	bl	8003130 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <pvPortMalloc+0x17a>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	60fb      	str	r3, [r7, #12]
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	e7fd      	b.n	8004772 <pvPortMalloc+0x176>
	return pvReturn;
 8004776:	69fb      	ldr	r3, [r7, #28]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3728      	adds	r7, #40	@ 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20001970 	.word	0x20001970
 8004784:	20001984 	.word	0x20001984
 8004788:	20001974 	.word	0x20001974
 800478c:	20001968 	.word	0x20001968
 8004790:	20001978 	.word	0x20001978
 8004794:	2000197c 	.word	0x2000197c

08004798 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d04f      	beq.n	800484a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047aa:	2308      	movs	r3, #8
 80047ac:	425b      	negs	r3, r3
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4413      	add	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	4b25      	ldr	r3, [pc, #148]	@ (8004854 <vPortFree+0xbc>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <vPortFree+0x46>
	__asm volatile
 80047c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	60fb      	str	r3, [r7, #12]
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	e7fd      	b.n	80047da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <vPortFree+0x66>
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	60bb      	str	r3, [r7, #8]
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	e7fd      	b.n	80047fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	4b14      	ldr	r3, [pc, #80]	@ (8004854 <vPortFree+0xbc>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4013      	ands	r3, r2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01e      	beq.n	800484a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d11a      	bne.n	800484a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	4b0e      	ldr	r3, [pc, #56]	@ (8004854 <vPortFree+0xbc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	43db      	mvns	r3, r3
 800481e:	401a      	ands	r2, r3
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004824:	f7fe fc76 	bl	8003114 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	4b0a      	ldr	r3, [pc, #40]	@ (8004858 <vPortFree+0xc0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4413      	add	r3, r2
 8004832:	4a09      	ldr	r2, [pc, #36]	@ (8004858 <vPortFree+0xc0>)
 8004834:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004836:	6938      	ldr	r0, [r7, #16]
 8004838:	f000 f874 	bl	8004924 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800483c:	4b07      	ldr	r3, [pc, #28]	@ (800485c <vPortFree+0xc4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3301      	adds	r3, #1
 8004842:	4a06      	ldr	r2, [pc, #24]	@ (800485c <vPortFree+0xc4>)
 8004844:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004846:	f7fe fc73 	bl	8003130 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800484a:	bf00      	nop
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20001984 	.word	0x20001984
 8004858:	20001974 	.word	0x20001974
 800485c:	20001980 	.word	0x20001980

08004860 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004866:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800486a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800486c:	4b27      	ldr	r3, [pc, #156]	@ (800490c <prvHeapInit+0xac>)
 800486e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00c      	beq.n	8004894 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3307      	adds	r3, #7
 800487e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0307 	bic.w	r3, r3, #7
 8004886:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	4a1f      	ldr	r2, [pc, #124]	@ (800490c <prvHeapInit+0xac>)
 8004890:	4413      	add	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004898:	4a1d      	ldr	r2, [pc, #116]	@ (8004910 <prvHeapInit+0xb0>)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800489e:	4b1c      	ldr	r3, [pc, #112]	@ (8004910 <prvHeapInit+0xb0>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	4413      	add	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048ac:	2208      	movs	r2, #8
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0307 	bic.w	r3, r3, #7
 80048ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a15      	ldr	r2, [pc, #84]	@ (8004914 <prvHeapInit+0xb4>)
 80048c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048c2:	4b14      	ldr	r3, [pc, #80]	@ (8004914 <prvHeapInit+0xb4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2200      	movs	r2, #0
 80048c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048ca:	4b12      	ldr	r3, [pc, #72]	@ (8004914 <prvHeapInit+0xb4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	1ad2      	subs	r2, r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004914 <prvHeapInit+0xb4>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004918 <prvHeapInit+0xb8>)
 80048ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	4a09      	ldr	r2, [pc, #36]	@ (800491c <prvHeapInit+0xbc>)
 80048f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048f8:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <prvHeapInit+0xc0>)
 80048fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80048fe:	601a      	str	r2, [r3, #0]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	20000db0 	.word	0x20000db0
 8004910:	20001968 	.word	0x20001968
 8004914:	20001970 	.word	0x20001970
 8004918:	20001978 	.word	0x20001978
 800491c:	20001974 	.word	0x20001974
 8004920:	20001984 	.word	0x20001984

08004924 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800492c:	4b28      	ldr	r3, [pc, #160]	@ (80049d0 <prvInsertBlockIntoFreeList+0xac>)
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e002      	b.n	8004938 <prvInsertBlockIntoFreeList+0x14>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	429a      	cmp	r2, r3
 8004940:	d8f7      	bhi.n	8004932 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	4413      	add	r3, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	429a      	cmp	r2, r3
 8004952:	d108      	bne.n	8004966 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	441a      	add	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	441a      	add	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d118      	bne.n	80049ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4b15      	ldr	r3, [pc, #84]	@ (80049d4 <prvInsertBlockIntoFreeList+0xb0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d00d      	beq.n	80049a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	441a      	add	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	e008      	b.n	80049b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049a2:	4b0c      	ldr	r3, [pc, #48]	@ (80049d4 <prvInsertBlockIntoFreeList+0xb0>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e003      	b.n	80049b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d002      	beq.n	80049c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20001968 	.word	0x20001968
 80049d4:	20001970 	.word	0x20001970

080049d8 <memset>:
 80049d8:	4402      	add	r2, r0
 80049da:	4603      	mov	r3, r0
 80049dc:	4293      	cmp	r3, r2
 80049de:	d100      	bne.n	80049e2 <memset+0xa>
 80049e0:	4770      	bx	lr
 80049e2:	f803 1b01 	strb.w	r1, [r3], #1
 80049e6:	e7f9      	b.n	80049dc <memset+0x4>

080049e8 <__libc_init_array>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004a20 <__libc_init_array+0x38>)
 80049ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004a24 <__libc_init_array+0x3c>)
 80049ee:	1b64      	subs	r4, r4, r5
 80049f0:	10a4      	asrs	r4, r4, #2
 80049f2:	2600      	movs	r6, #0
 80049f4:	42a6      	cmp	r6, r4
 80049f6:	d109      	bne.n	8004a0c <__libc_init_array+0x24>
 80049f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004a28 <__libc_init_array+0x40>)
 80049fa:	4c0c      	ldr	r4, [pc, #48]	@ (8004a2c <__libc_init_array+0x44>)
 80049fc:	f000 f826 	bl	8004a4c <_init>
 8004a00:	1b64      	subs	r4, r4, r5
 8004a02:	10a4      	asrs	r4, r4, #2
 8004a04:	2600      	movs	r6, #0
 8004a06:	42a6      	cmp	r6, r4
 8004a08:	d105      	bne.n	8004a16 <__libc_init_array+0x2e>
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a10:	4798      	blx	r3
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7ee      	b.n	80049f4 <__libc_init_array+0xc>
 8004a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1a:	4798      	blx	r3
 8004a1c:	3601      	adds	r6, #1
 8004a1e:	e7f2      	b.n	8004a06 <__libc_init_array+0x1e>
 8004a20:	08004b0c 	.word	0x08004b0c
 8004a24:	08004b0c 	.word	0x08004b0c
 8004a28:	08004b0c 	.word	0x08004b0c
 8004a2c:	08004b10 	.word	0x08004b10

08004a30 <memcpy>:
 8004a30:	440a      	add	r2, r1
 8004a32:	4291      	cmp	r1, r2
 8004a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a38:	d100      	bne.n	8004a3c <memcpy+0xc>
 8004a3a:	4770      	bx	lr
 8004a3c:	b510      	push	{r4, lr}
 8004a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a46:	4291      	cmp	r1, r2
 8004a48:	d1f9      	bne.n	8004a3e <memcpy+0xe>
 8004a4a:	bd10      	pop	{r4, pc}

08004a4c <_init>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr

08004a58 <_fini>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	bf00      	nop
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr
